#!/usr/local/bin/perl -w

use strict;

use FileHandle;
use Carp;
use ArcturusDatabase;

my $validkeys = "instance|i|organism|o|";
my ($nextword, $instance, $organism);

#------------------------------------------------------------------------------

while (my $nextword = shift @ARGV) {

    if ($nextword !~ /\-($validkeys)\b/) {
        &showusage("Invalid keyword '$nextword'"); # and exit
    }

    if ($nextword eq '-instance' || $nextword eq '-i') { # mandatory
# the next statement prevents redefinition when used with e.g. a wrapper script
        die "You can't re-define instance" if $instance;
        $instance = shift @ARGV;
    }

    if ($nextword eq '-organism' || $nextword eq '-o') { # mandatory
# the next statement prevents redefinition when used with e.g. a wrapper script
        die "You can't re-define organism" if $organism;
        $organism = shift @ARGV;
    }  
}

#------------------------------------------------------------------------------
# Check input parameters
#------------------------------------------------------------------------------

unless (defined($instance)) {
    &showUsage("No instance name specified");
    exit 1;
}

unless (defined($organism)) {
    &showUsage("No organism name specified");
    exit 1;
}

#------------------------------------------------------------------------------
# get a Project instance
#------------------------------------------------------------------------------

my $adb = new ArcturusDatabase (-instance => $instance,
		                -organism => $organism);

if (!$adb || $adb->errorStatus()) {
     &showUsage("Invalid organism '$organism' on instance '$instance'");
     exit 2;
}

my $dbh = $adb->getConnection();
my $sth = $dbh->prepare("select contig_id from CONTIG where gap4name = ?");

#-------------------------------------------------------------------------------------------------------
# Read the matches file, look up the contig id from the contig name and write the appropriate SQL insert
# matches file format is  "%6d %4.2f %1s %-20s %6d %6d %6d   %1s %-20s %6d %6d %6d\n"
#-------------------------------------------------------------------------------------------------------

my $count = 0;
my $line_count = 0;
my $not_found = 0;
my $invalid = 0;

my $contig_id = 0;

my $line = "";
my ($dummy, $score, $frac, $end1, $name1, $len1, $start1, $finish1, $end2, $name2, $len2, $start2, $finish2);

while ($line = <STDIN>) {
		$line_count++;
		print STDERR "\n\n$line_count: $line\n";
    chop($line);

    if ($line =~ /^\s*\d+\s+\d+\.\d+\s+\S+\s+\S+\s+\d+\s+\d+\s+\d+\s+\S+\s+\S+\s+\d+\s+\d+\s+\d+/) {
			($dummy, $score, $frac, $end1, $name1, $len1, $start1, $finish1, $end2, $name2, $len2, $start2, $finish2) 
    	 = split(/\s+/,$line, 13);

			$count++;

			$sth->execute($name1);
			while (my @data = $sth->fetchrow_array()) {
			  my $contig_id = $data[1];
				my $gap4name = $data[2];
				#print " $contig_id $gap4name\n";
			}

			if ($contig_id == 0) {
					$not_found++;
					print STDERR "$line_count: cannot find contig id for contig $name1\n";
				}
			#else {
				print STDOUT "insert into SAMTAG (SAMtagtype, SAMtype, GAPtagtype,  tagcomment, contig_id, start, length, tag_seq_id, strand, comment) values ('Zc', 'i', 'REPT', '$name2 auto-generated by REPTILE', $contig_id, $start1, $len2, 0, 'U', null);\n";
			#}
		} # if input line in matches file is valid
		else {
					$invalid++;
					print STDERR "$line_count: invalid input line $line";
		}
}

my $found = $count - $invalid - $not_found;

print STDOUT "\n\n$found SAMTAGs generated\n";
print STDOUT "$not_found SAMTAGs cannot be generated because the contig id cannot be found\n";
print STDOUT "$invalid SAMTAGs cannot be generated because the matches file line was invalid\n";
$adb->disconnect();

exit(0);

#-------------------------------------------------------------------------------

sub showUsage {
    my $code = shift;

    print STDERR "\n";
    print STDERR "\nERROR for $0: $code \n" if defined($code);
    print STDERR "\n";
    print STDERR "Generate SAMTAG SQL for Arcturus from repeats.matches file\n";
    print STDERR "\n";
    print STDERR "MANDATORY PARAMETERS:\n";
    unless ($organism && $instance) {
        print STDERR "\n";
        print STDERR "-instance\t(i) Database instance name\n" unless $instance;
        print STDERR "-organism\t(o) Arcturus database name\n" unless $organism;
    }
    print STDERR "\n";
    print STDERR "< repeats.matches > repeats.sql (specify different directory if required)\n";
    print STDERR "\n";
    print STDERR "\nERROR for $0: $code \n" if defined($code);
    exit 1;
}

#------------------------------------------------------------------------------

