REVISED STRUCTURE FOR THE READS DOCUMENT


1. The purpose of a Read object

  * Encapsulates information about a read

  * Has a set of properties e.g. name, template, asped date, ...

  * Some properties are immutable e.g. name, template

  * Other properties may exist in several versions due to editing
    e.g. sequence, base quality, tags


2. Sources of new Read objects

  * Reads can enter Arcturus from several sources:

    - WGS Oracle database

    - CAF files (e.g. TIGR Schisto data)

    - Experiment files

    - Asp

  * We handle the diversity of sources using the factory
    design pattern, based upon a ReadFactory parent class
    which represents a generic source of one or more reads

  * Each concrete source is a sub-class of ReadFactory


3. How reads are stored in Arcturus

  * Arcturus is based upon a MySQL database

  * Immutable data are stored in the READ table, keyed by
    unique read_id

  * Mutable data are stored in several tables keyed by a
    seq_id; each seq_id maps uniquely to a read_id and a
    read version

  * Ancillary data such as ligation, template, sequencing
    vector are stored in dictionary tables


4. The role of the ArcturusDatabase class

  * The persistent storage mechanism is implemented in 
    a proxy class named ArcturusDatabase

  * This avoids the need for database code in any class
    which represents a data object e.g. Read, Contig.
    Data objects do not need to know how they are stored

  * An ArcturusDatabase object is instantiated by
    specifying an organism name and (optionally) an
    instance

  * It is used to create data objects such as reads
    from data in the underlying database

  * It is also used to store new data objects that
    have been created from external data sources by
    factory objects


5. The properties of a Read

  An enumeration of the properties of a read, with flags
  to indicate

  * mandatory/optional

  * multiple/unique

  * mutable/immutable


6. Loading reads from external sources

  * Elaboration of the ReadFactory class

  * Definition of the minimal set of read properties

  * Description of the general loading strategy:

    while more reads
      get next read
      if read not already in Arcturus
        check read for completeness
        if read is complete
          store read in Arcturus
        endif
      endif
    endwhile


7. Fetching reads from Arcturus

  * Two principal scenarios:

    - Unassembled reads, identified by read_id and version zero

    - Assembled reads, identified by seq_id in the MAPPING table

  * The ArcturusDatabase class provides methods to create
    a Read object from read_id, seq_id and by name

  * Outline the process of building a Read object from
    the database

  * Explain why delayed loading of sequence and quality data
    is a useful option


8. Reads and sequences

  * The need for read editing leads us to introduce the concept
    of a "sequence", which is the mutable part of a read

  * All reads have at least one associated sequence

  * Every sequence corresponds to a unique (read_id, version)
    pair

  * When a read is edited in Gap4, a new sequence will be
    created and stored in Arcturus

  * The properties of a sequence are:

    - version number

    - DNA sequence string

    - base quality array

    - Align_to_SCF mapping(s)

    - Quality clipping

    - Sequencing vector clipping (optional)

    - Cloning vector clipping (optional)

    - Tags (optional)

  * Every sequence is uniquely defined by a seq_id

  * Sequence objects are created and stored in Arcturus during
    the processing of new contigs, whenever an edited read is
    found