#!/usr/local/bin/perl

# Copyright (c) 2001-2014 Genome Research Ltd.
#
# Authors: David Harper
#          Ed Zuiderwijk
#          Kate Taylor
#
# This file is part of Arcturus.
#
# Arcturus is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

#
# This script replaces the masked sequences generated by
# getunassembledreads with the -mask option.

use DBI;
use FileHandle;
use DataSource;
use Compress::Zlib;

my $instance;
my $organism;

while ($nextword = shift @ARGV) {
    $instance = shift @ARGV if ($nextword eq '-instance');
    $organism = shift @ARGV if ($nextword eq '-organism');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($instance) &&
	defined($organism)) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

$ds = new DataSource(-instance => $instance, -organism => $organism);

$dbh = $ds->getConnection();

unless (defined($dbh)) {
    print STDERR "Failed to connect to DataSource(instance=$instance, organism=$organism)\n";
    print STDERR "DataSource URL is ", $ds->getURL(), "\n";
    print STDERR "DBI error is $DBI::errstr\n";
    die "getConnection failed";
}

my $query = "select seqlen,sequence from" .
    " (READINFO left join (SEQ2READ left join SEQUENCE using(seq_id))" .
    " using(read_id)) where readname = ? and version = 0";

my $sth = $dbh->prepare($query);
&db_die("Failed to prepare query");

while (my $line = <STDIN>) {
    if ($line =~ /^DNA\s+:\s+(\S+)/) {
	&processDNARecord($1, $sth);
    } else {
	print $line;
    }
}

$sth->finish();

$dbh->disconnect();

exit(0);

sub processDNARecord {
    my $seqname = shift;
    my $sth = shift;

    print "DNA : $seqname\n";

    $sth->execute($seqname);

    my ($seqlen, $sequence) = $sth->fetchrow_array();

    return unless (defined($seqlen) && defined($sequence));

    my @lines = ();

    while (my $line = <STDIN>) {
	last if ($line =~ /^\s*$/);
	chop($line);
	push @lines, $line;
    }

    my $cafseq = join('', @lines);
    my $cafseqlen = length($cafseq);

    die "Mismatch in sequence length for $seqname: $seqlen in database but $cafseqlen in file"
	if ($seqlen != length($cafseq));

    $sequence = uncompress($sequence);

    while (length($sequence) > 0) {
	print substr($sequence, 0, 60), "\n";
	$sequence = substr($sequence, 60);
    }

    print "\n";
}

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -instance\t\tName of instance\n";
    print STDERR "    -organism\t\tName of organism\n";
}
