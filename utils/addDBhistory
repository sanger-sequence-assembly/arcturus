#!/usr/local/bin/perl
#
# addDBhistory
#
# This script adds a HISTORY table to an existing database and
# populates it using the metadata for each of the tables.

use DBI;
use Term::ReadKey;

$user = $ENV{'USER'};
die "Username not defined" unless defined($user);

$verbose = 0;
@dblist = ();

while ($nextword = shift @ARGV) {
    $host = shift @ARGV if ($nextword eq '-host');

    $port = shift @ARGV if ($nextword eq '-port');

    $mysqluser = shift @ARGV if ($nextword eq '-user');

    $mysqlpass = shift @ARGV if ($nextword eq '-pass');

    $asuser = shift @ARGV if ($nextword eq '-asuser');

    if ($nextword eq '-databases') {
	while (@ARGV && ! ($ARGV[0] =~ /^-/)) {
	    push @dblist, shift @ARGV;
	}
    }

    $verbose = 1 if ($nextword eq '-verbose');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($host) &&
	defined($port) &&
	defined($user) &&
	scalar(@dblist) > 0) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

$asuser = $user unless defined($asuser);

$dbname = $dblist[0];

$dsn = 'DBI:mysql:' . $dbname . ';host=' . $host . ';port=' . $port;

unless (defined($mysqlpass)) {
    print STDERR "Enter MySQL password for $mysqluser\n";
    ReadMode 'noecho';
    $mysqlpass = ReadLine 0;
    ReadMode 'normal';
    chop $mysqlpass;
}

$dbh = DBI->connect($dsn, $mysqluser, $mysqlpass,
		    {PrintError => 1, RaiseError => 1});

foreach $dbname (@dblist) {
    $query = "USE $dbname";
    print STDERR "Switching to database $dbname\n";
    print STDERR "\n$query\n" if $verbose;
    $dbh->do($query);
    &db_die("$query failed");
    print STDERR "\n" if $verbose;

    $query = qq/CREATE TABLE `HISTORY` (`tablename` varchar(20) not null,
					`date` datetime not null,
					`user` varchar(20) not null,
					`action` varchar(20) not null,
					`command` text not null
					) TYPE=MyISAM/;

    print STDERR "Creating HISTORY table\n";
    print STDERR "\n$query\n" if $verbose;
    $dbh->do($query);
    &db_die("$query failed");
    print STDERR "\n" if $verbose;

    $query = "SHOW TABLES";

    $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed on $dsn");

    $sth->execute();
    &db_die("execute($query) failed on $dsn");

    @alltables = ();

    while(@ary = $sth->fetchrow_array()) {
	$tablename = $ary[0];
	push @alltables, $tablename;
    }

    $sth->finish();

    foreach $tablename (@alltables) {
	$query = "SHOW CREATE TABLE $tablename";

	$sth = $dbh->prepare($query);
	&db_die("prepare($query) failed on $dsna");

	$sth->execute();
	&db_die("execute($query) failed on $dsna");

	@ary = $sth->fetchrow_array();

	$create{$ary[0]} = $ary[1];
	
	$sth->finish();

	$metadata = &getTableMetadata($dbh, $tablename);

	$createtime{$tablename} = $metadata->{'Create_time'};
    }


    $query = "INSERT INTO HISTORY(tablename, date, user, action, command)" .
	" VALUES(?, ?, ?, 'CREATE', ?)";
    $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    foreach $tablename (sort keys %create) {
	$query = $create{$tablename};
	$timestamp = $createtime{$tablename};
	$creator = ($tablename eq 'HISTORY') ? $user : $asuser;
	$sth->execute($tablename, $timestamp, $creator, $query);
	&db_die("Update of HISTORY failed");
    }

    print STDERR "\n" if $verbose;
}

$dbh->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -host\t\tHostname of server\n";
    print STDERR "    -port\t\tPort number of server\n";
    print STDERR "    -user\t\tMySQL username\n";
    print STDERR "    -databases\t\tOne or more databases to be modified\n";
    print STDERR "\nOPTIONAL PARAMETERS:\n";
    print STDERR "    -pass\t\tMySQL password (you will be prompted for one if absent)\n";
    print STDERR "    -verbose\t\tShow all MySQL statements\n";
    print STDERR "    -asuser\t\tThe user who should be recorded as the creator\n";
}

sub getTableMetadata {
    my ($dbh, $table, $junk) = @_;

    my $metadata = {};

    my $query = "SHOW TABLE STATUS LIKE '$table'";

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    $sth->execute();
    &db_die("execute($query) failed");

    my @values = $sth->fetchrow_array();

    my @colnames = @{$sth->{NAME}};

    while (my $colname = shift @colnames) {
	my $colvalue = shift @values;
	$metadata->{$colname} = $colvalue;
    }

    $sth->finish();

    return $metadata;
}

