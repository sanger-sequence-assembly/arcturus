package uk.ac.sanger.arcturus.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import uk.ac.sanger.arcturus.database.ArcturusDatabase;

public abstract class ArcturusDatabaseClient {
	protected ArcturusDatabase adb;
	protected Connection conn;
	private boolean savedAutoCommit;
	
	private Set<PreparedStatement> statements = new HashSet<PreparedStatement>();
	
	protected ArcturusDatabaseClient(ArcturusDatabase adb) {
		this.adb = adb;
	}
	
	protected abstract void prepareConnection() throws SQLException;
	
	protected PreparedStatement prepareStatement(String query) throws SQLException {
		return prepareStatement(query, Statement.NO_GENERATED_KEYS);
	}
	
	protected PreparedStatement prepareStatement(String query, int autoGeneratedKeys) throws SQLException {
		if (conn == null)
			throw new SQLException("Cannot prepare a statement on a null connection");
		
		try {
			PreparedStatement pstmt = conn.prepareStatement(query, autoGeneratedKeys);
			statements.add(pstmt);
			return pstmt;
		}
		catch (SQLException e) {
			throw new SQLException("Failed to prepare statement \"" + query + "\"", e);
		}
	}

	protected PreparedStatement prepareStatement(String query, int  resultSetType, int resultSetConcurrency) throws SQLException {
		if (conn == null)
			throw new SQLException("Cannot prepare a statement on a null connection");
		
		try {
			PreparedStatement pstmt =  conn.prepareStatement(query, resultSetType, resultSetConcurrency);
			statements.add(pstmt);
			return pstmt;
		}
		catch (SQLException e) {
			throw new SQLException("Failed to prepare statement \"" + query + "\"", e);
		}
	}
	protected void setConnection(Connection conn) throws SQLException {
		this.conn = conn;		
		prepareConnection();
	}
	
	protected Connection getConnection() {
		return conn;
	}
	
	public void close() throws SQLException {
		if (conn != null) {
			for (PreparedStatement p : statements)
				p.close();
			
			conn.close();
		}
		
		conn = null;		
	}
	
	protected void beginTransaction() throws SQLException {
		savedAutoCommit = conn.getAutoCommit();
		conn.setAutoCommit(false);
	}
	
	protected void commitTransaction() throws SQLException {
		conn.commit();
		conn.setAutoCommit(savedAutoCommit);
	}
	
	protected void rollbackTransaction() throws SQLException {
		conn.rollback();
		conn.setAutoCommit(savedAutoCommit);
	}

}
