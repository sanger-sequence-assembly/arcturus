<?xml version="1.0"?>

<!-- build.xml - a simple Ant buildfile -->
<project name="Arcturus" default="jar" basedir=".">
	<property name="project.name" value="arcturus"/>
	<property name="package.prefix" value="uk.ac.sanger"/>
	<property name="jar.file" value="${project.name}.jar" />
	<property name="zip.file" value="${project.name}.zip" />

	<!-- The directory containing source code -->
	<property name="src.dir" value="src"/>

	<!-- The directory containing classpath JAR files -->
	<property name="lib.dir" value="lib"/>

	<!-- Classpath for compilation -->
	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
	  <pathelement location="./lib/junit.jar" />
	  <pathelement location="./lib/mockito-all-1.8.4.jar" />
	  <pathelement location="./build/classes" />
	</path>

	<!-- The directory containing the test classes -->
	<property name="testsrc.dir" value="test"/>

	<!-- Temporary build directories -->
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>

	<!-- Documents directory -->
	<property name="javadoc.dir" value="${build.dir}/docs"/>

	<!-- Resources directory -->
	<property name="resources.dir" value="${src.dir}/resources" />

	<!-- Target version of Java -->
	<property name="build.target" value="1.6" />

	<!-- Build properties -->
	<property name="build.props.file" value="${resources.dir}/build.props" />
	
	<target name="setBuildVersion">
		<exec executable="svnversion" dir="${basedir}" outputproperty="build.version" error="/dev/tty" />
		<exec executable="hostname" outputproperty="build.host" error="/dev/tty" />
		<echo file="${build.props.file}">build.date=${build.time}${line.separator}</echo>
		<echo file="${build.props.file}" append="true">build.version=${build.version}${line.separator}</echo>
		<echo file="${build.props.file}" append="true">build.by=${user.name}${line.separator}</echo>
		<echo file="${build.props.file}" append="true">build.host=${build.host}${line.separator}</echo>
	</target>

	<!-- Target to create the build directories prior to the -->
	<!-- compile target. -->
	<target name="prepare" depends="">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${javadoc.dir}"/>
	</target>

	<target name="clean" description="Remove all generated files.">
		<delete dir="${build.dir}"/>
	</target>

	<target name="compile" depends="prepare"
          description="Compiles all source code.">
		<javac srcdir="${src.dir}" destdir="${build.classes}" 
           source="${build.target}"
           target="${build.target}"
	   classpathref="build.classpath"
	   debug="true"/>
	</target>

	<tstamp>
		<format property="build.time" pattern="yyyy MMM dd HH:mm" locale="en,UK"/>
	</tstamp>

	<target name="jar" depends="compile, setBuildVersion"
          description="Generates the JAR file for Arcturus">
		<echo file="${src.dir}/resources/buildtime.props">BuildTime=${build.time}${line.separator}</echo>

		<delete file="${jar.file}" quiet="true" failonerror="false" />

		<jar jarfile="${jar.file}"
         manifest="${src.dir}/MANIFEST.MF">
			<fileset dir="${build.classes}" includes="uk/**" />
			<fileset dir="${src.dir}" includes="resources/icons/*.*,resources/images/*.*,resources/xml/*.*,resources/*.props"/>
		</jar>
	</target>

	<target name="zip" depends="jar"
          description="Generates a ZIP archive of Arcturus">
		<zip destfile="${zip.file}" compress="false">
			<fileset dir="." includes="${jar.file}" />
			<zipfileset dir="${lib.dir}" includes="*.jar" prefix="lib" />
		</zip>
	</target>

	<!-- Properties related to the JAR file runner -->
	<property name="webapp.name" value="minerva" />
	<property name="webapp.jar" value="${webapp.name}.jar" />
	<property name="webapp.zip" value="${webapp.name}.zip" />

	<property name="webapp.path" value="uk/ac/sanger/arcturus/remotejarrunner" />
	<property name="webapp.utils.path" value="uk/ac/sanger/arcturus/utils" />

	<property name="webapp.src" value="${src.dir}/${webapp.path}" />

	<property name="webapp.webdir" value="/nfs/WWWdev/INTWEB_docs/htdocs/Software/Arcturus" />

	<target name="web" depends="compile"
		  description="Generates a JAR file for the Minerva web runner">
		<jar jarfile="${webapp.jar}"
  		 manifest="${webapp.src}/MANIFEST.MF" >
			<fileset dir="${build.classes}" includes="${webapp.path}/*.class"/>
			<fileset dir="${src.dir}" includes="resources/remotejarrunner.props" />
		</jar>
	</target>

	<target name="webzip" depends="web"
			  description="Generates a Zip file for the Minerva web runner">
		<zip destfile="${webapp.zip}" compress="false">
			<fileset dir="." includes="${webapp.jar}" />
			<zipfileset dir="${lib.dir}" includes="*.jar" prefix="lib" />
		</zip>
	</target>

	<target name="deploy" depends="jar,webzip"
      description="Deploy the web application to the internal web site" >
		<echo message="Copying ${webapp.zip} to ${webapp.webdir}" />
		<copy file="${webapp.zip}" todir="${webapp.webdir}" />

		<echo message="Copying ${jar.file} to ${webapp.webdir}" />
		<copy file="${jar.file}" todir="${webapp.webdir}" />

		<echo message="Running webpublish on ${webapp.zip} and ${jar.file}" />
		<exec dir="${webapp.webdir}" executable="webpublish" >
			<arg value="${webapp.zip}" />
			<arg value="${jar.file}" />
		</exec>
	</target>

	<target name="all" depends="clean,jar,webzip"
          description="Cleans, compiles, then builds the JAR file."/>

	<target name="docs" depends="prepare"
          description="Generates Javadoc documentation">
		<javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}"
             author="yes"
	     version="yes"
	     public="yes"
	     private="no"
	     protected="no"
	     package="no"
             packagenames="${package.prefix}.${project.name}.*,${package.prefix}.${project.name}.*.*"/>
	</target>

	<target name="test" depends="compile"
	  description="Run the unit tests">
	  <javac srcdir="test" destdir="${build.classes}" debug="true" deprecation="true">
		   <classpath refid="test.classpath" />
	  </javac>
	
          <mkdir dir="tmp"/>

	  <junit>
             <sysproperty key="test.repository.instance" value="test"/>
             <sysproperty key="test.repository.organism" value="SHISTO"/>
             <sysproperty key="testing" value="true"/>

	     <formatter type="xml"  />

	     <batchtest todir="tmp">
                <fileset dir="${build.classes}">
                   <include name="test/**/Test*.class" />
		   <exclude name="test/**/Test*$*.class" />
                </fileset>
             </batchtest>

	     <classpath>
		    <fileset dir="${lib.dir}">
			<include name="*.jar" />
		    </fileset>
		    <fileset dir="." >
			<include name="${jar.file}" />
		    </fileset>
		    <pathelement location="${build.classes}" />
		    <pathelement path="${java.class.path}"/>
             </classpath >
	  </junit>
	</target>
</project>
