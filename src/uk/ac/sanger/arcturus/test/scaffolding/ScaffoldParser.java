package scaffolding;

import javax.swing.*;

import java.io.*;
import java.util.*;
import java.lang.reflect.Constructor;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class ScaffoldParser {
    public static void main(String[] args) {
	String xmlfile = null;
	String displayclassname = null;

	for (int i = 0; i < args.length; i++) {
	    if (args[i].equalsIgnoreCase("-in"))
		xmlfile = args[++i];

	    if (args[i].equalsIgnoreCase("-class"))
		displayclassname = args[++i];
	}

	if (xmlfile == null) {
	    showUsage(System.err);
	    System.exit(1);
	}

	if (displayclassname == null)
	    displayclassname = "scaffolding.ScaffoldTable";

	Constructor displayconstructor = null;

	try {
	    Class displayclass = Class.forName(displayclassname);

	    Class[] constructorargtypes = { Assembly.class };

	    displayconstructor = displayclass.getConstructor(constructorargtypes);
	}
	catch (Exception e) {
	    e.printStackTrace();
	    System.exit(1);
	}

        XmlToTree handler = new XmlToTree();
        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setValidating(true);

	try {
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse( new File(xmlfile), handler);
        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.err.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.err.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();
        }

	Assembly assembly = handler.getAssembly();

	Object[] constructorargs = { assembly };

	try {
	    final JComponent display = (JComponent)displayconstructor.newInstance(constructorargs);

	    javax.swing.SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
			createAndShowGUI(display);
		    }
		});
	}
	catch (Exception e) {
	    e.printStackTrace();
	    System.exit(1);
	}
    }

    private static void createAndShowGUI(JComponent display) {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("ScaffoldTree");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Set up the content pane.
        display.setOpaque(true); //content panes must be opaque
        frame.setContentPane(display);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    private static void showUsage(PrintStream ps) {
	ps.println("MANDATORY PARAMETERS:");
	ps.println("\t-in\tName of input XML file");
	ps.println();
	ps.println("OPTIONAL PARAMETERS:");
	ps.println("\t-class\tName of class of display component [default: ScaffoldTree]");
    }
}
