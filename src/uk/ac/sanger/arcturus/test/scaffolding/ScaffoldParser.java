package scaffolding;

import javax.swing.*;

import java.io.*;
import java.util.*;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class ScaffoldParser {
    public static void main(String[] args) {
	if (args.length < 1) {
	    System.err.println("You must provide an XML file name");
	    System.exit(1);
	}

        XmlToTree handler = new XmlToTree();
        SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setValidating(true);

	try {
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse( new File(args[0]), handler);
        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.err.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.err.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();
        }

	final Assembly assembly = handler.getAssembly();
	
	//assembly.displayIndented("    ", 0, System.out);

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI(assembly);
            }
        });
    }

    private static void createAndShowGUI(Assembly assembly) {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("ScaffoldTree");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        ScaffoldTree newContentPane = new ScaffoldTree(assembly);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
}
