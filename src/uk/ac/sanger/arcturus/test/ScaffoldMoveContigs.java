package uk.ac.sanger.arcturus.test;

import java.io.*;
import java.util.*;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class ScaffoldMoveContigs {
	public static void main(String[] args) {
		ScaffoldMoveContigs stats = new ScaffoldMoveContigs();

		stats.run(args);
	}

	public void run(String[] args) {
		String xmlfile = null;
		int bin = 0;

		for (int i = 0; i < args.length; i++) {
			if (args[i].equalsIgnoreCase("-in"))
				xmlfile = args[++i];

			if (args[i].equalsIgnoreCase("-bin"))
				bin = Integer.parseInt(args[++i]);
		}

		if (xmlfile == null) {
			System.err
					.println("You must supply an XML file name with the -in prameter");
			System.exit(1);
		}

		MyHandler handler = new MyHandler(bin);
		SAXParserFactory factory = SAXParserFactory.newInstance();
		factory.setValidating(true);

		try {
			SAXParser saxParser = factory.newSAXParser();
			saxParser.parse(new File(xmlfile), handler);
		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.err.println("\n** Parsing error" + ", line "
					+ spe.getLineNumber() + ", uri " + spe.getSystemId());
			System.err.println("   " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();

		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();

		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}
	}

	class MyHandler extends DefaultHandler {
		private static final int MAXPROJECTS = 100;

		public static final int ASSEMBLY = 1;
		public static final int SUPERSCAFFOLD = 2;
		public static final int SCAFFOLD = 3;
		public static final int CONTIG = 4;
		public static final int GAP = 5;
		public static final int BRIDGE = 6;
		public static final int SUPERBRIDGE = 7;
		public static final int LINK = 8;

		protected Set[] projects = new Set[MAXPROJECTS];
		protected int bin;
		protected int scaffoldID;

		public MyHandler(int bin) {
			super();
			this.bin = bin;
			for (int i = 0; i < projects.length; i++)
				projects[i] = new HashSet();
		}

		public void startDocument() throws SAXException {
		}

		public void endDocument() throws SAXException {
		}

		private int getTypeCode(String lName, String qName) {
			if (lName != null && lName.length() > 0)
				return getTypeCode(lName);
			else if (qName != null && qName.length() > 0)
				return getTypeCode(qName);
			else
				return -1;
		}

		private int getTypeCode(String name) {
			if (name.equals("contig"))
				return CONTIG;

			if (name.equals("gap"))
				return GAP;

			if (name.equals("bridge"))
				return BRIDGE;

			if (name.equals("link"))
				return LINK;

			if (name.equals("scaffold"))
				return SCAFFOLD;

			if (name.equals("superscaffold"))
				return SUPERSCAFFOLD;

			if (name.equals("superbridge"))
				return SUPERBRIDGE;

			if (name.equals("assembly"))
				return ASSEMBLY;

			return -1;
		}

		private void resetProjects() {
			for (int i = 0; i < projects.length; i++)
				projects[i].clear();
		}

		private void analyseScaffold() {
			int sumlength[] = new int[MAXPROJECTS];

			for (int i = 0; i < projects.length; i++)
				sumlength[i] = sumLength(projects[i]);

			int biggest = -1;
			int maxsum = 0;

			for (int i = 0; i < projects.length; i++) {
				if (i != bin && sumlength[i] > maxsum) {
					biggest = i;
					maxsum = sumlength[i];
				}
			}

			if (biggest < 0)
				return;

			System.out.println("### SCAFFOLD " + scaffoldID + "\n# Biggest is "
					+ biggest + " with " + maxsum + "bp");

			for (int i = 0; i < projects.length; i++) {
				if (i != biggest && sumlength[i] > 0) {
					System.out.println("# Project " + i + " : "
							+ projects[i].size() + " contigs " + sumlength[i]
							+ " bp");
					for (Iterator iterator = projects[i].iterator(); iterator
							.hasNext();) {
						Contig contig = (Contig) iterator.next();
						System.out.println(contig.getID() + " " + i + " "
								+ biggest + " " + contig.getSize());
					}
				}
			}
		}

		private int sumLength(Set contigs) {
			int sum = 0;

			for (Iterator iterator = contigs.iterator(); iterator.hasNext();) {
				Contig contig = (Contig) iterator.next();
				sum += contig.getSize();
			}

			return sum;
		}

		public void startElement(String namespaceURI, String lName, // local
																	// name
				String qName, // qualified name
				Attributes attrs) throws SAXException {
			int type = getTypeCode(lName, qName);

			switch (type) {
				case ASSEMBLY:
					break;

				case SUPERSCAFFOLD:
					break;

				case SCAFFOLD:
					scaffoldID = getIntegerAttribute(attrs, "id", 0);
					resetProjects();
					break;

				case CONTIG:
					int id = getIntegerAttribute(attrs, "id", 0);
					int size = getIntegerAttribute(attrs, "size", 0);
					int project = getIntegerAttribute(attrs, "project", -1);

					if (project > 0)
						projects[project].add(new Contig(id, size));
					break;

				case GAP:
					break;

				case BRIDGE:
					break;

				case SUPERBRIDGE:
					break;

				case LINK:
					break;
			}
		}

		public void endElement(String namespaceURI, String lName, // local
																	// name
				String qName // qualified name
		) throws SAXException {
			int type = getTypeCode(lName, qName);

			switch (type) {
				case ASSEMBLY:
					break;

				case SUPERSCAFFOLD:
					break;

				case SCAFFOLD:
					analyseScaffold();
					break;

				case CONTIG:
					break;

				case GAP:
					break;

				case BRIDGE:
					break;

				case SUPERBRIDGE:
					break;

				case LINK:
					break;
			}
		}

		public void error(SAXParseException e) throws SAXParseException {
			throw e;
		}

		public void warning(SAXParseException err) throws SAXParseException {
			System.out.println("** Warning" + ", line " + err.getLineNumber()
					+ ", uri " + err.getSystemId());
			System.out.println("   " + err.getMessage());
		}

		private int getIntegerAttribute(Attributes attrs, String key,
				int defaultvalue) {
			String s = attrs.getValue(key);

			if (s == null)
				return defaultvalue;
			else
				return Integer.parseInt(s);
		}

	}

	class Contig {
		protected int id;
		protected int size;

		public Contig(int id, int size) {
			this.id = id;
			this.size = size;
		}

		public int getID() {
			return id;
		}

		public int getSize() {
			return size;
		}
	}
}
