#!/usr/local/bin/perl -w

#############################################################################
# Upload Contigs into ARCTURUS database
#############################################################################

use strict; # Constraint variables declaration before using them

use DBI; # Perl DB Interface module
use ConfigReader::MyCgi;   
use ConfigReader::Simpleton; # Module for managing configuration information
use Scripts::MyHTML;
use TableReader::DbaseTable;
use TableReader::ArcturusTable;
use TableReader::ReadsReader;
use TableReader::ContigBuilder;
use TableReader::ReadMapper;
# use TableReader::ReadsReader;

# use Compress::Compress;

##############################################################################
# unbuffered output
##############################################################################

open(STDERR,">&STDOUT") || die "Can't dump to STDOUT: $!\n";
select(STDERR); $| = 1; # Make unbuffered.
select(STDOUT); $| = 1; # Make unbuffered.

# print "content-type: text/html\n\n";

##############################################################################
# Loading Configuration Parameters
##############################################################################

# Get configuration parameters using Configuration File ".arc_common.cnf"

my $CONFIG_DIR = '/nfs/team81/ejz/arcturus/scripts/ConfigReader';
my $config = ConfigReader::Simpleton->new ("$CONFIG_DIR/.arc_common.cnf") ||
            die "No such file or directory: $CONFIG_DIR/.arc_common.cnf";
$config->parse ();

##############################################################################
# how is this script invoked?
##############################################################################

my $origin = 1; # default CGI
$origin = 0 if (!$ENV{PATH_INFO}); # from command line
my @brtag = ('\n','<br>'); 

##############################################################################
# open MySQL Reads Database
##############################################################################

my $driver      = $config->get("db_driver");
my $db_name     = $config->get("mysql_database");
my $host        = $config->get("mysql_hostname");
my $username    = $config->get("mysql_username");
my $password    = $config->get("mysql_password");

my $USERSUPPORT = $config->get("USERSUPPORT");
my $db_manager  = $config->get("db_manager");      

# check whether this driver is available

my @drivers = DBI->available_drivers;
#print "\nDrivers : @drivers\n\n";

my $lg = @drivers + 0;
my $i = 0;
while (($i < $lg) && ($driver ne $drivers[$i])) {
  $i ++;
}
if ($i >= $lg) {
  print STDERR "Driver syntax incorrect or Driver, $driver,  non available - install it before ...\n";
  exit 1;
}

# data source name

my $dsn = "DBI:".$driver.":".$db_name.":".$host;

print "\n\nHERE WE GO (dsn: $dsn)\n\n" if !$origin;

print "Trying to open database $db_name ..." if !$origin;
my $dbh = DBI->connect($dsn, $username, $password, {RaiseError => 1 }) 
        or die "! Failed to access $db_name again: $DBI::errstr";
print "... DONE\n\n" if !$origin;

##############################################################################
# Some local parameters and variables
##############################################################################

my %config;
$config{CDD} = $config->get('ROOTDIR');  # root data dir for caf files
$config{CFN} = 'MAL<m>.<n>.caf';         # name of individual caf file
$config{CNF} = '';                       # name filter
$config{CGN} = '';                       # generation number
$config{CPR} = 1000;                     # default maximum nr. contigs to load

my $arc_cgi_dir  = $config->get('ARC_CGI_DIR');
my $arc_log_dir  = $config->get('ARC_LOG_DIR');

$config{CLF} = "$arc_log_dir/cloader.DATABASE.log"; # default logfile

my ($userid, $database, $caffile, $cgi, $page);
my ($left, $list, $exactmatch, $limit);
my ($TEST, $logON, $reload, $update);
my ($CDD, $CFN, $CNF, $CGN, $CPR, $CLF);
my ($assembly, $assemblyname, $assemblynmbr);
my ($projects, $projectname, $projectnmbr);

my $return    = "$arc_cgi_dir/update/arcturus/getmenu";

my ($brtag, $gfont, $yfont, $ofont, $rfont, $efont);

###############################################################################

my $organisms = TableReader::ArcturusTable->new($dbh,'ORGANISMS','arcturus',1);
my $users = $organisms->new($dbh,'USERS','arcturus',1);

if (!$origin) {
    $brtag = "\n";
###############################################################################
# test user
###############################################################################
    $userid = $ENV{USER};
    if ($userid ne 'ejz' && $userid ne 'adh') {
# test against the priviledges for this user
        die "User $userid does not have priviledge to run 'cmapper' from".
            "the command line.\nTry the web-based version";
    }
###############################################################################
# Test command line parameters
###############################################################################
# input: ARGV[0]: database name

    if (@ARGV < 1) {
        print STDERR "! specify a database [TEST]\n";
        $dbh->disconnect;
        exit 1;
    }

# get file name filter and global (directory) filter 

    $database = $ARGV[0];
    my $onumber = $organisms->associate('number',$database,'dbasename');
    die "Organism database $database does not exist\n" if !$onumber;

    $TEST = $ARGV[1];
    $TEST = 1 if !defined($TEST); # default

    $limit = $ARGV[2];
    $limit = 10 if !defined($limit);
}

else {
# invoked as CGI scripts
    die 'Not yet prepared for CGI version';
    $brtag = "<br>";
    $gfont = "<FONT COLOR=lightgreen>";
    $yfont = "<FONT COLOR=yellow>";
    $ofont = "<FONT COLOR=orange>";
    $rfont = "<FONT COLOR=red>";
    $efont = "</FONT>";

   (my $void,$database,my $option) = split ('/',$ENV{PATH_INFO});

    $cgi = ConfigReader::MyCgi->new(); # parse CGI
    $cgi->PrintHeader(1); # print the magic words 

    $option = 'process' if ($option eq 'specify' && $cgi->parameter('process',0));

    $page = Scripts::MyHTML->new('ARCTURUS CONTIGs loader');    
    $page->address('ejz@sanger.ac.uk','Ed Zuiderwijk',2);
    $page->frameborder(100,15,'white',10);
    $page->center(1);

    undef my $error;
    if ($option eq 'getform') {
# 
        $page->form("$arc_cgi_dir/cloader/arcturus/specify");
        $page->partition(2);
        $page->sectionheader("ARCTURUS assembly database: CONTIGs loader specifications",3,0);
        $page->partition(1);
        my $count = $organisms->count();
        $page->sectionheader("There are $count Organism databases",3,0);
        $page->add($organisms->htmlTable('0110000011100000')); # list them
        my $select =  $organisms->htmlOptions('dbasename','database',20);
        $page->sectionheader("Select a Database : $select",4,0);
        $page->sectionheader("Provide your User Identification and Submit",4,0);
        $page->identify('10',8,1);
        $page->partition(5);
        $page->center(1);
        $page->submitbuttonbar("$arc_cgi_dir/update/arcturus/getmenu",0,0,'MAIN MENU');
        $page->form(0);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }

    elsif ($option eq 'specify') {
# list all assemblies
        $database  = $cgi->parameter('database'); # compulsory
        my $userid = $cgi->parameter('identify'); # compulsory
        my $passwd = $cgi->parameter('password'); # compulsory
        my $asname = $cgi->parameter('assemblyname',0); # no test
        $asname = 0 if !$asname; # to have it explicitly defined

        $page->form("$arc_cgi_dir/cloader/arcturus/specify");
        $page->partition(2);
        $page->sectionheader("ARCTURUS assembly database '$database': CONTIGs loader specifications",3,0);
        $page->partition(1);

        if ($cgi->{und_error} || !$database) {
            $page->errorbox("Please define all form entries");
            $page->add($cgi->PrintVariables());
        }
        else {
    # open assembly database; abort if no assemblies defined
            $assembly  = TableReader::ArcturusTable->new($dbh,'ASSEMBLY',$database,1);
            if ($assembly && $assembly->count() > 0) {
            # get the default assembly name if no assemblyname in CGI input; first try attributes
                my $attributes = $organisms->unpackAttributes($database,'dbasename');
                $asname = $attributes->{anlast} if (!$asname && $attributes->{anlast});
            # if still undefined, just take the first one
                $asname = $assembly->{hashrefs}->[0]->{assemblyname} if (!$asname);
            # substitute (possible) database placeholder
                $config{CLF} =~ s/DATABASE/$database/; # log file
            # overwrite the preset configuration data with those in ORGANISM attributes if any
                foreach my $key (keys %config) {
                    $config{$key} = $attributes->{$key} if defined($attributes->{$key});
# print "ORGANISM attribute $key  = $config{$key}<br>" if defined($attributes->{$key});
                }
            # overwrite the preset configuration data with those in ASSEMBLY attributes if any
                $attributes = $assembly->unpackAttributes($asname,'assemblyname');
                foreach my $key (keys %config) {
                    $config{$key} = $attributes->{$key} if defined($attributes->{$key});
# print "ASSEMBLY attribute $key  = $config{$key}<br>" if defined($attributes->{$key});
                }
            # update the caf file name if it contains a place holder
                $config{CFN} =~ s/^\S+?(\<m\>|\d+)/$asname/;
            # open the form and replace the placeholders
                my $form = form();
                $form =~ s/DATABASE/$database/g;
            # build the select list and add to form
                my $selectlist = $assembly->htmlOptions('assemblyname','assemblyname',100,0,$asname);
                $form =~ s/SELECTTAG/$selectlist/ if ($selectlist); # substitute the HTML selectlist
                $page->add($form,0,1); # add the form to the page and preload
            # preload the remaining placeholders with data in %config 
                foreach my $key (keys %config) {
                    $page->preload($key,$config{$key},1) if defined($config{$key});
                }
            # but overwrite with values in CGI input 
                $page->preload('cgi_input',$cgi,1);
            # and add hidden fields  
                $page->ingestCGI($cgi);

            # add a three-way button bar and a return link 

                my $text = "Repeat to update this form for a newly chosen assembly, or<br>";
                $text   .= "Continue to start loading CONTIGS with these specified values, or<br>";
                $text   .= "Click on the return link to the main UPDATE menu<br>";
                $page->sectionheader($text,4,0);
                my @buttons = ('type=submit value=" Repeat "',
                               'type=submit value="Continue" name="process"',
                               'type=reset  value=" Reset "');
                $page->buttonbartemplate(3,0,\@buttons);                 
                $page->linkbutton('RETURN',$return,0);
            }
            else {
                $page->errorbox("There are no assemblies defined for $database",0,0,'yellow');
                $page->messagebox("Please contact $db_manager or your project manager",$return);
            }
        }
    # close form
        $page->form(0);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }

    elsif ($option eq 'process') {
    # get assembly 
        $database = $cgi->parameter('database'); # redefine database
        $assembly = $organisms->new($dbh,'ASSEMBLY',$database,1);
        $assemblyname = $cgi->parameter('assemblyname'); # translate into number
        $assemblynmbr = $assembly->associate('assembly',$assemblyname,'assemblyname');

        $projects = $organisms->new($dbh,"PROJECTS",$database,1);

        $CPR = $cgi->parameter('CPR');
    # test mode
        $TEST   = 1 if $cgi->parameter('testrun',0);
        $logON  = 1 if $cgi->parameter('logON'  ,0);
        $reload = 1 if $cgi->parameter('reload' ,0);
        $update = 1 if $cgi->parameter('update', 0);
    # identity check
        $userid = $cgi->parameter('identify');
        my $passwd = $cgi->parameter('password');
      
        if ($cgi->{und_error}) {
            $error = "Please define every input field $cgi->{und_error} ";
        }
        elsif (my $users = $organisms->new($dbh,'USERS','arcturus',1)) {
    # authorisation level 100 required (temp)
            if (my $status = $users->authorize($userid,$passwd,100)) {
                $error = $status; # authorisation failed
            }
    # okay, now get specifications
            else {
                $CDD = $cgi->parameter('CDD');
                $CFN = $cgi->parameter('CFN');
                $CNF = $cgi->parameter('CNF');
                $CGN = $cgi->parameter('CGN');
                $CPR = $cgi->parameter('CPR');
                $CLF = $cgi->parameter('CLF');
            }
#            $arc_logfile = $cgi->parameter('LGF') if ($logON);
        }
        else {
            $error = "Can't access the USERS table in ARCTURUS database";
        }
    }
    else {
        $error = "Invalid option $option for cloader";
    }

# abort on any error, else continue with the main script

    if ($error) {
        $page->partition(2);
        $page->sectionheader("ARCTURUS CONTIGs loader specifications",3,0);
        $page->partition(1);
        $page->sectionheader("Sorry, an error status aborts this loader session",3,1);
        $page->errorbox($error,$return);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }
#    $page->add($cgi->PrintVariables());
}

###############################################################################
# open all database tables required
###############################################################################

my $rrtocc   = $organisms->new($dbh,"READS2CONTIG",$database,0);
my $cctopp   = $organisms->new($dbh,"CONTIGS2SCAFFOLD",$database,0);
my $cltocc   = $organisms->new($dbh,"CLONES2CONTIG",$database,0);
my $cltopp   = $organisms->new($dbh,"CLONES2PROJECT",$database,0);

my $query = "use $database";
$organisms->query($query,0,0);

# get all current contigs

my $contigs = $cctopp->associate('contig_id','C','astatus'); # current
if (ref($contigs) ne 'ARRAY') {
    my @contigs;
    $contigs[0] = $contigs;
    $contigs = \@contigs;
}

# go through all contigs and collect the clones

foreach my $contig (@$contigs) {
# get the reads for this contig as hashes
    my $query = "contig_id = $contig and label >= 20";
    my $maps = $rrtocc->associate('hashrefs','where',$query,-1);
    if (ref($maps) ne 'ARRAY') {
        undef my @maps;
        $maps[0] = $maps;
        $maps = \@maps;
    }
    my $nmap = @$maps;
# get the clones
    undef my %clones;
    foreach my $hash (@$maps) {
        $clones{$hash->{clone}}++;
    }
    my $nclone = keys %clones;
    print "Contig $contig: $nclone clones found in $nmap read maps\n" if $nmap;
# for each clone, get the reads and determine the range
    foreach my $clone (keys %clones) {
# determine the covering range of reads on the contig
        undef my ($nrds, $rlgt, $ccs, $ccf);
        foreach my $hash (@$maps) {
            if ($hash->{clone} eq $clone) {
                my $rs = $hash->{prstart};
                my $rf = $hash->{prfinal};
                my $cs = $hash->{pcstart};
                my $cf = $hash->{pcfinal};
                my $or = $hash->{label};
            # test ordering
                if (($or%2) && $cf > $cs) {
                    print "contig $contig: ordering error ";
                    print "(label $or  contig range $cs-$cf  read: $rs-$rf)\n"; 
                } 
                elsif (!($or%2) && $cs > $cf) {
                    print "contig $contig: ordering error ";
                    print "(label $or  contig range $cs-$cf  read: $rs-$rf)\n"; 
                }
                else {
#                    print "contig $contig: ordering okay\n";
# update begin and end of contig region
                    $nrds++; # number of reads
                    $rlgt += ($rf-$rs+1); # total read length covered
                    if ($or%2) {
                        $ccs = $cf if (!$ccs || $cf < $ccs); # counter aligned
                        $ccf = $cs if (!$ccf || $cs > $ccf);
                    }
                    else {
                        $ccs = $cs if (!$ccs || $cs < $ccs); # aligned
                        $ccf = $cf if (!$ccf || $cf > $ccf);
                    }
                }
            }
        }
# results
        my $cover = $rlgt/(abs($ccf-$ccs)+1);
        print "  clone $clone nreads=$nrds $rlgt contig $ccs-$ccf (cover=$cover)\n";
        my $status = 1;
        if (!$TEST && $cltocc->newrow('clone_id',$clone,'contig_id',$contig)) {
            $status = 0 if ($status && !$cltocc->update('ocp_start',$ccs));
            $status = 0 if ($status && !$cltocc->update('ocp_final',$ccf));
            $status = 0 if ($status && !$cltocc->update('reads',$nrds));
            $status = 0 if ($status && !$cltocc->update('cover',$cover));
        }
        elsif (!$TEST) {
            print "  Insert new row failed\n";
        }
    }
}


###############################################################################

##############################################################################
# closing down
##############################################################################

print STDOUT "${brtag}Time stamping modified tables$brtag";
if ($organisms->historyUpdate($userid)) { # history update 
print "SIGNATURE on ORGANISMS for $database\n";
    $organisms->signature($userid,'dbasename',$database);
}
print STDOUT "${brtag}Closing database$brtag$brtag";
$dbh->disconnect;
exit 0;


##############################################################################
# subroutines
##############################################################################

sub form {
    my $source = shift;

    my $form;

    $form  = "<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=2 WIDTH 100%>";
    $form .= "</TABLE>";

    return $form;
}

