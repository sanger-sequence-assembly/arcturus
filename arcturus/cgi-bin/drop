#!/usr/local/bin/perl -w

#############################################################################
#
# Drop a selected arcturus database
#
#############################################################################

use strict;

use GateKeeper; 

##############################################################################
# get configuration data, open MySQL Database
##############################################################################

my $GateKeeper = new GateKeeper('mysql',{insistOnCGI => 1, writeAccess => 1});

my $database   = $GateKeeper->lookup('database',1) || 'arcturus';

my ($void, $action) = split '/',$GateKeeper->currentOptions;

my $organisms  = $GateKeeper->dbHandle($database,{returnTableHandle => 1});

my $thisScript = $GateKeeper->currentScript;

my $thisServer = $GateKeeper->currentServer;

##############################################################################
# MAIN
##############################################################################

my $harmonize = 0;

my $arc_tmp_dir = $GateKeeper->lookup('ARC_TMP_DIR');

$GateKeeper->focus(useDatabase => 'arcturus'); # just in case

my $page = $GateKeeper->GUI("ARCTURUS database maintenance and updates");
        
$page->space(2);

# 3 stages: inquiry which ; confirmation ; and execution
# a database can only be dropped if it is empty or its status is 'copied'

if ($action eq 'getform') {
# get a list from the ORGANISMS table with databases which could be copied
    my @server = split '\.|\:',$thisServer;
    my $where = "residence like '$server[0]%' and residence like '%$server[$#server]%'"; # print "where $where";
    my $choices = $organisms->htmlTableColumn('dbasename',{noHeader=>1},$where,'where');
    my $options = $organisms->htmlMaskedOptions('dbasename','where',$where,'dbasename');
    $options =~ s/dbasename/database/g;
    $page->form("$thisScript/process");
    $page->sectionheader("ARCTURUS contents manager");
    $page->sectionheader("Drop an arcturus database",3,0);

    $page->space(1);
    $page->add("This function needs database manager access privilege",0,0,'size=+1 color="blue"');
    $page->space(2);
    $page->add($choices);

    $page->space(2);
    $page->add("<font size=+1>Select a database and submit:</font> $options");
    
    $page->space(2);
    $page->submitbuttonbar(0);
    $page->ingestCGI(0,'database');
}

elsif ($database eq 'arcturus') {
    $page->space(3);
    $page->errorbox("Please define a database");
#    $page->add($page->PrintVariables(0));
}

elsif ($action eq 'process') {

    my $READS = $organisms->spawn('READS',$database);
    my $count = $READS->count();

    my $status = $organisms->associate('available',$database,'dbasename');

#print "GUI opened";

    $page->form("$thisScript/execute");
    $page->sectionheader("ARCTURUS contents manager");
    $page->sectionheader("Drop arcturus database $database");
    $page->space(1);
    $page->add("This function needs database manager access privilege",0,0,'size=+1 color="blue"');

# test if database is empty (count reads) or available status is 'copied'

    $page->space(1);
    $page->warningbox("Database $database is not empty !",0) if $count;
    $page->add("Database $database is empty",0,0,'size=+1') if !$count;
    $page->space(1);
    $page->warningbox("Database $database has not been saved !",0,0,'size=+1') if ($status ne 'copied');

    $page->space(1);
    $page->add("Database $database will be removed from this server",0,0,'size=+1');
    $page->space(1);
    $page->add("Everything in it will be lost !",0,0,'size=+1');
    $page->space(1);
    $page->message("Be very sure before you continue!",'E2E2FF','size = +1');
    $page->space(2);
    $page->confirmbuttonbar();
    $page->ingestCGI();
}

elsif ($action eq 'execute') {

    $harmonize = 1;
    my %return = (testSession => 0, makeSession => 0, userSession => 0, returnPath => "/execute");
    if ($GateKeeper->authorize({seniority => 6},\%return)) {
        $page->sectionheader("ARCTURUS contents manager");
        $page->sectionheader("Drop arcturus database $database");
        $page->space(1);
        $page->add("Dropping database $database",0,0,'size=+1');
        $page->space(1);
        if ($organisms->query("drop database $database")) {
            $page->message("DONE",'yellow','size = +1');
        }
        else {
            $page->message("FAILED",'orange','size = +1');
            $harmonize = 0;
        }
        $page->space(1);
        $page->add("Deleting descriptors for database $database",0,0,'size=+1');
        $page->space(1);      
        if ($organisms->delete('dbasename',"$database")) {
            $page->message("DONE",'yellow','size = +1');
        }
        else {
            $page->message("FAILED",'orange','size = +1');
            $harmonize = 0;
        }
    }
    else {
        $harmonize = 0;
        $page->space(3);
        $page->errorbox($GateKeeper->{error});
#    $page->add($page->PrintVariables(0));
    }

    if ($harmonize) {
        $page->space(1);
        $page->add("Harmonisation between servers",0,0,'size=+1');
        $page->space(1);
        $page->message("STARTED",'E2E2FF','size = +1');
    }

    my $link = "/cgi-bin/arcturus";
    $link .= $page->postToGet(1,'session');
    $page->space(2);
    $page->linkbutton('BACK TO GUI',$link);
}

$page->form(0);
$page->flush();

if ($harmonize) {
    my $root = $GateKeeper->prepareFork('harmonize');
    $harmonize = "$root/harmonize organisms 0:delete:$database";
    $harmonize .= " >> $arc_tmp_dir/harmonize.log";
    system ($harmonize);
}
