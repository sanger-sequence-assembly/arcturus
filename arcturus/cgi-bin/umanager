#!/usr/local/bin/perl -w

#############################################################################
#
# User Administration Manager (including authorization)
#
#############################################################################

use strict;

use GateKeeper; 

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = new GateKeeper('mysql',{insistOnCGI => 1});

my $config     = $GateKeeper->configHandle();

my $cgi        = $GateKeeper->cgiHandle();

my ($void,$option,$action) = split ('/',$GateKeeper->origin);

my $organisms  = $GateKeeper->dbHandle('arcturus',{returnTableHandle => 1});

my $people     = $organisms->spawn('USERS','arcturus',0,1,'userid');

##############################################################################
# MAIN
##############################################################################

my $USERSUPPORT = $config->get("USERSUPPORT");
my $db_manager  = $config->get("db_manager");
my $arc_scr_dir = $config->get("ARC_TMP_DIR");

my $currentScript = $GateKeeper->currentScript;

$option = 'abort' if !$people;

undef my ($userid, $page, $email, $report, $message, $doCopy, $doDelete);

$page = $GateKeeper->GUI("ARCTURUS user information maintenance and updates", {doTransport => 0});

if ($people->{errors}) {
    my $message = "WARNING: corrupted arcturus common database\n$people->{errors}";
    $page->space(4);
    $page->message($message,'orange',"size = +1",1);
    $page->space(2);
    $message = "Please contact $db_manager";
    $page->message($message,'yellow');
    $page->flush();
    $GateKeeper->disconnect;
    exit 0;
}

###############################################################################
# REGISTRATION
###############################################################################

if ($option eq 'getform') {

    $page->space(1);
    $page->add('ARCTURUS User Registration Form',0,0,'size=+2');
    $page->form("$currentScript/register");

    my $ft = "<font size=4 face='sans-serif'>"; my $eft = "</font>";
    my $text = "<TABLE ALIGN=CENTER WIDTH=80%><tr>";
    $text .= "<td align=left wrap>${ft}You must register as an Arcturus user if you ";
    $text .= "require access to a database with (some level of) priviledge to ";
    $text .= "add to, or modify its contents$eft</td>";
    $text .= "</tr><tr>";
    $text .= "<td align=left wrap>${ft}Please provide a username of up to 8 but at ";
    $text .= "least 3 characters (\"team ..\" or \"yeastpub\" are not accepted!) ";
    $text .= "and a password of up to 8 but at least 4 characters$eft</td>";
    $text .= "</tr><tr>";
    $text .= "<td align=left>${ft}All data fields have to be defined$eft</td>";
    $text .= "</tr></table>";

    $page->add($text,0,1);

    $page->identify('11',8,1); # add fields for ID, password and repeat

    my $table = "<TABLE ALIGN=CENTER><TR>";
    $table .= "<TH ALIGN=CENTER NOWRAP>Last Name</TH>";
    $table .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME='lastname' SIZE=16 MAXSIZE=24 VALUE=''></TD>";
    $table .= "<TD WIDTH=10%>&nbsp</TD><TH ALIGN=CENTER NOWRAP>Affiliation</TH>";
    my $aff = "Genome Research Limited";
    $table .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME='affiliation' SIZE=23 MAXSIZE=32 VALUE='$aff'></TD>";
    $table .= "</TR><TR>";
    $table .= "<TH ALIGN=CENTER NOWRAP>Given Names</TH>";
    $table .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME='givennames' SIZE=16 MAXSIZE=16 VALUE=''></TD>";
    $table .= "<TD>&nbsp</TD><TH ALIGN=CENTER NOWRAP>Division</TH>";
    $table .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME='division'   SIZE=8 MAXSIZE=16 VALUE='Team --'></TD>";
    $table .= "</TR><TR>";
    $table .= "<TH ALIGN=CENTER NOWRAP>Function</TH>";
    my $select = $people->htmlOptions('function','function',36,8);
    $table .= "<TD ALIGN=LEFT NOWRAP>$select</TD>";
    $table .= "<TD>&nbsp</TD><TH ALIGN=CENTER NOWRAP>Email</TH>";
    my $email = "--\@sanger.ac.uk";
    $table .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME='email' SIZE=18 MAXSIZE=32 VALUE='$email'></TD>";
    $table .= "</TR></TABLE>";

    $page->add($table,0,1,'size=-1');

    $page->ingestCGI();

    my @buttons = ('type=submit value="Register"','type=reset value="  Reset  " alt="clear this form"');
    $page->buttonbartemplate(2,0,\@buttons);
}

###############################################################################

elsif ($option eq "register") {
# digest input from registration form and add user to USERS database table
    $cgi->transpose ('identify','userid');
    $userid = $cgi->parameter('userid');
    my $passwd = $cgi->parameter('password');
    my $repeat = $cgi->parameter('pwrepeat');
    $email  = $cgi->parameter('email');

    $page->space(1);
    $page->add('ARCTURUS User Administration',0,1,'size=+2');
    my $font = "size=4 face='sans-serif'";

    if (!$userid) {
    # the user is missing
        $page->errorbox("Missing username");
        $page->add("Please use the \"Back\" button and choose a username",0,1,$font);
    }
    elsif (!$GateKeeper->allowServerAccess($userid)) {
        $page->errorbox($GateKeeper->{error});
        $page->add("Please register as a user on the production server",0,1,$font);
    }
    elsif ($people->associate('hashref',$userid,'userid')) {
# the user allready exists
        $page->errorbox("Username $userid already exists");
        $page->add("Please use the \"Back\" button and choose a different username",0,1,$font);
    }
    elsif ($userid =~ /yeast|group|team|path|myself/i) {
# the userid may not be yeastpub, yeastie, group9 etc
        $page->errorbox("Username $userid is prohibited");
        $page->add("Please use the \"Back\" button and choose a different username",0,1,$font);
    }
    elsif (!defined($passwd) || !defined($repeat) || $passwd ne $repeat) {
        $page->errorbox("You didn't type your password the same both times");
        $page->add("Please use the \"Back\" button and try again",0,1,$font);
    }
    elsif (length($passwd) < 4 || $passwd =~ /\s/) {
        $page->errorbox("Your password should have at least 4 characters and may not contain blanks");
        $page->add("Please use the \"Back\" button and try again",0,1,$font);
    }
    elsif ($email && $email !~ /ejz/ && (my $hash = $people->associate('hashref',$email,'email'))) {
        my $other = $hash->{userid};
        $page->errorbox("User $other has the same email address");
        $page->add("Please use your previously registered username",0,1,$font);
    }
    else {
# check the presence of all items (except authority)
        undef my @useritems;
        undef my $errorstatus;
        my $items = $people->{columns};
        foreach my $item (@$items) {
            next if ($item eq 'user');
            next if ($item eq 'priviledges');
            next if ($item eq 'ustatus');
            next if ($item eq 'seniority');
            next if ($item eq 'attributes');
            next if ($item eq 'projects');
            push @useritems, $item;
            my $input = $cgi->parameter($item);
            if (!defined($input) || !$input || $input =~ /\-\-/ || !($input =~ /\w/)) {
                $errorstatus .= "<br>! " if $errorstatus;
                $errorstatus .= "Item $item is not defined or has invalid characters";
            }
        }
# if no errors detected: enter the new user
        if (defined($errorstatus)) {
            $page->errorbox($errorstatus);
            $page->add("Please use the \"Back\" button and try again",0,1,$font);
        }
        else {
            my $status = 0;
            $passwd = $cgi->ShortEncrypt($passwd,$userid);
            $status++ if (!$people->newrow('userid',$userid,'priviledges',0));
            $status++ if (!$people->update('password',$passwd));
            foreach my $item (@useritems) {
                if ($item ne 'userid' && $item ne 'password') {
                    $status++  if (!$people->update($item, $cgi->parameter($item)));
                }
            }
            if ($status) {
                $page->errorbox("Sorry, couldn't update ARCTURUS database");
                $page->add("<b>Please inform $USERSUPPORT</b>",0,1);
            }
            else {
                $page->add("You have successfully registered as an ARCTURUS user:",0,1);
                $page->add($people->htmlEditRecord($userid,'userid',0,'0111111100'),0,1);
                $page->add("Your user details will be sent to your mail address for reference");
                $doCopy = 1; # signal copy of new user to other server(s)

# compose the mail message to the user

                $message  = "subject : ARCTURUS user administration\n\n";
                $message .= "You have registered successfully as an ARCTURUS user ";
                $message .= "with:\n\n username:  $userid \n\n password:  $repeat\n\n";
                $message .= "Keep this message for future reference\n";

# compose a message to the database manager

                $report  = "subject : confirmation of mail to $email\n\n";
                $report .= "Concerns : new ARCTURUS user $userid has registered\n\n";
            }
        }
    }
}

###############################################################################
# MODIFICATION
###############################################################################

elsif ($option eq "getmenu") {
# display in standard Arcturus GUI
    $page->space(2);
    $page->add('ARCTURUS Update User Data',0,0,'size=+2');

    $page->space(4);

    my $color = "bgcolor='C0C0C0'";
    my $session = $cgi->postToGet(1,'session');
    my $target = "target='userframe'";  
    my $menu = "<TABLE border=0 cellpadding=2><TR>";
    $menu .= "<TD $color><A href=\"$currentScript/getform$session\">NEW USER</A><TD>";
    $menu .= "<TD>&nbsp</TD><TD>Register a new user</TD>";
    $menu .= "</TR><TR>";
    $menu .= "<TD $color><A href=\"$currentScript/modify$session\" $target>UPDATE</A><TD>";
    $menu .= "<TD>&nbsp</TD><TD>Modify user information</TD>"; 
    $menu .= "</TR><TR>";
    $menu .= "<TD $color><A href=\"$currentScript/pwupdate$session\" $target>PASSWORD</A><TD>";
    $menu .= "<TD>&nbsp</TD><TD>Redefine user password</TD>"; 
    $menu .= "</TR><TR>";
    $menu .= "<TD $color><A href=\"$currentScript/authorize$session\" $target>AUTHORIZE</A><TD>";
    $menu .= "<TD>&nbsp</TD><TD>Assign user priviledges</TD>"; 
    $menu .= "</TR><TR>";
    $menu .= "<TD $color><A href=\"$currentScript/delete$session\" $target>DELETE</A><TD>";
    $menu .= "<TD>&nbsp</TD><TD>Delete or Retire a user</TD>";
    $menu .= "</TR></TABLE>";
    my $fnt = "<font size=4 face='sans-serif'>"; my $eft = "</font>";
    $menu =~ s/\>([^\&]+)\</>$fnt$1$eft</g; # add fonts
    $page->add($menu,0,0);
}

###############################################################################

elsif ($option eq "modify") {
# displayed in new window 'userframe' without full GUI
    $page->frameborder(100,15); # overrides GUI

    undef my $error;
    my $link = "$currentScript/modify";
    $link .= $cgi->postToGet(1,'session');

    if (!$action || $action eq 'getform') {
# throw back a form to select userid to modify and own userid + password
        $page->form("$currentScript/modify/getdata");
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Modify User Information",4,1);
# alternative: multi-column table of usernames and preselection of names on e.g first letter
        my $users = $people->htmlTableColumn ('userid',{itemLink => 0, noHeader => 1});
        $page->add($users,0,1);
        my $myself; $myself = 'myself' if $GateKeeper->{USER};
        my $dbusers = $people->htmlOptions('userid','userid',0,0,'myself');
#        $dbusers =~ s/myself/----/g if !$GateKeeper->{USER};
        my $query = "<TABLE><TR><TH>User whose information needs updating:</th>";
        $query .= "<td>$dbusers</td></tr></table>";
        $page->add($query,0,1);
        $page->submitbuttonbar(0,0,0);
        $page->ingestCGI();
    }

    elsif ($action eq 'getdata') {
# get the relevant data from the database and throw back an edit form
        my $userid   = $cgi->parameter('userid');
        my %usercode = (user => $userid, mask => 2);
        my %returnpath = (returnPath => '/modify/getdata', noGUI => 1); 
        if (($userid eq 'myself' && !$GateKeeper->authorize(2, \%returnpath)) 
        or  ($userid ne 'myself' && !$GateKeeper->authorize(\%usercode, \%returnpath))) {
            $error = $GateKeeper->{error};
        }            
        $userid = $GateKeeper->currentUser if ($userid eq 'myself');
        $cgi->replace('userid',$userid); # ensure correct name in CGI field
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Modify User Information for user: $userid",4,1);
# test input and values
        if ($cgi->{'und_error'}) {
            $error = "Please define all input fields";
#            $page->add($cgi->PrintVariables());
        }
        else {
# password checked okay, get list of items to be edited
            $page->form("$currentScript/modify/confirm");
            my $editlist = $people->htmlEditRecord($userid,'userid',0,'0022222020002');
        # get current value of user's function
            my $function = $people->associate('function',$userid,'userid');
            $function =~ s/\s+/\\s\+/; # replace blanks by "space"
            $editlist =~ s/(\>\s*$function)/SELECTED$1/;
            $page->add($editlist,0,1);
            $page->submitbuttonbar($link,0,0);
            $page->ingestCGI();
        }
    }

    elsif ($action eq 'confirm') {
# display proposed changes fro confirmation / or do the changes if confirmed
        my $userid = $cgi->parameter('userid');   # of the data to be modified
        my $confirm = $cgi->parameter('confirm') || 0;

        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Modify User Information for user: $userid",4,1);

        my %usercode = (user => $userid, mask => 2);
        my %returnpath = (returnPath => '/modify/confirm', noGUI => 1); 
        if  (!$GateKeeper->authorize(\%usercode, \%returnpath)) {
            $error = $GateKeeper->{error};
        }            
        elsif (!$confirm || $confirm ne 'CONFIRM') {
# tally the changes and return a list of changes to confirm
            my ($changes,$report) = $people->cgiEditTable($cgi->{cgi_input},0);
            if ($changes > 0) {
                my $action = "$currentScript/modify/confirm";
                $page->promptbox($report,$action,$link); # return button to modify
                $page->ingestCGI();
            }
            else {
                $error = "No changes specified for user $userid";
            }
        } 
        else {
# do the changes and return a list of changes made
            my ($changes,$report) = $people->cgiEditTable($cgi->{cgi_input},1);
            if ($changes > 0) {
                $people->build(1); # rebuild the table to get latest data in $people
                $page->messagebox($report,0,1);
                $page->linkbutton('CONTINUE',$link);
                $doCopy = 1;
            }
            else {
                $error = "No changes made!<BR> $report";
            }
        }
    }
    $page->errorbox($error,$link,'RETURN') if ($error);
}

###############################################################################

elsif ($option eq "pwupdate") {
# displayed in new window 'userframe' without full GUI
    $page->frameborder(100,15) if !$cgi->parameter('GUI',0); # overrides GUI

    undef my $error;
    my $link = "$currentScript/modify";
    $link .= $cgi->postToGet(1,'session');

    if (!$action || $action eq 'getform') {
    # throw back a form to select userid to modify and own userid + password
        $page->form("$currentScript/pwupdate/getdata");
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Modify User Password",4,1);
        my $users = $people->htmlTableColumn ('userid',{itemLink => 0, noHeader => 1});
        $page->add($users,0,1);
        my $myself; $myself = 'myself' if $GateKeeper->{USER};
        my $dbusers = $people->htmlOptions('userid','userid',0,0,$myself);
#print "G user: $GateKeeper->{USER}<br>";
#        $dbusers =~ s/myself/----/g if !$GateKeeper->{USER};
        my $query = "<TABLE><TR><TH>User whose password needs updating:</th>";
        $query .= "<td>$dbusers</td></tr></table>";
        $page->add("$query",0,1);
        $page->submitbuttonbar(0);
        $page->ingestCGI();

    }
    elsif ($action eq 'getdata') {
# get the relevant data from the database and throw back an edit form
        my $userid   = $cgi->parameter('userid');
# authorize (will define GateKeeper->currentUser)
        my $noGui = 1; $noGui = 0 if $cgi->parameter('GUI',0); 
        my %usercodes  = (user => $userid, mask => 6);
        my %returnpath = (returnPath => '/pwupdate/getdata', noGUI => $noGui); 
        if (($userid eq 'myself' && !$GateKeeper->authorize(6, \%returnpath)) 
        or  ($userid ne 'myself' && !$GateKeeper->authorize(\%usercodes, \%returnpath))) {
            $error = $GateKeeper->{error};
        }            
        $userid = $GateKeeper->currentUser if ($userid eq 'myself');
        $cgi->replace('userid',$userid); # ensure correct name in CGI field
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Modify User Password for $userid",4,1);
# test input and values
        if ($cgi->{'und_error'}) {
            $error = "Please define every input field";
        } 
        elsif (!$error) {
# the password is found to be okay, generate form to enter new password for user
            $page->form("$currentScript/pwupdate/confirm");
            $page->sectionheader("Enter new password for user $userid and repeat",4,1);
            $page->identify('01'); $page->hline(); # prompt for password and repeat
            $page->submitbuttonbar(0,0);
            $page->ingestCGI();
        }
    }

    elsif ($action eq 'confirm') {
# read the user data, the new password and its repeat; authorizing user is in $session
        my $userid   = $cgi->parameter('userid');   # the target user
        my $password = $cgi->parameter('PASSWORD'); # the new password for userid
        my $repeat   = $cgi->parameter('pwrepeat'); # its repeat
        my $confirm  = $cgi->parameter('confirm') || 0;

        my $hash = $people->associate('hashref',$userid,'userid'); # data of the target user

        my $font = "size=4 face='sans-serif'";
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->sectionheader("Redefine User Password for $userid",4,1);
# get authorization
        my %usercodes  = (user => $userid, mask => 6);
        my %returnpath = (returnPath => '/pwupdate/confirm', noGUI => 1); 
        if  (!$GateKeeper->authorize(\%usercodes, \%returnpath)) {
            $error = $GateKeeper->{error};
        }            
# test input data
        elsif (!defined($password) || !defined($repeat) || $password ne $repeat) {
            $page->errorbox("You didn't type the password the same both times");
            $page->add("Please use the \"Back\" button and try again",0,1,$font);
        }
        elsif (length($password) < 4 || $password =~ /\s/) {
            $page->errorbox("The password should have at least 4 characters and may not contain blanks");
            $page->add("Please use the \"Back\" button and try again",0,1,$font);
        }
        elsif ($userid eq $GateKeeper->currentUser && $cgi->VerifyEncrypt($password,$hash->{password})) {
            $page->errorbox("Please provide a password different from your previous one");
            $page->add("Please use the \"Back\" button and try again",0,1,$font);
        }
        elsif ($cgi->VerifyEncrypt($password,$hash->{password})) {
            $page->warningbox("The new password is not different from the current one"); 
            $page->add("Please use the \"Back\" button and try again",0,1,$font);
        }
        else {
# okay, encrypt password and enter into database
            $password = $cgi->ShortEncrypt ($password,$userid);
            if (!$people->update('password',$password,'userid',$userid)) {
                $page->errorbox("Sorry!, couldn't update ARCTURUS database");
                $page->sectionheader("Please inform $USERSUPPORT",4,1); 
            } 
            else {
                $page->sectionheader("DONE!",3,1);
                $page->linkbutton("CONTINUE",$link,0);
                $doCopy = 1;
            }
        }
    }
    $page->errorbox($error,$link,'RETURN') if ($error);
}

###############################################################################

elsif ($option eq "delete") {
# displayed in new window 'userframe' without full GUI
    $page->frameborder(100,15); # overrides GUI

    my $bgcolor = 'G0G000';
    undef my $error;
    my $link = "$currentScript/delete";
    $link .= $cgi->postToGet(1,'session');

    if (!$action || $action eq 'getform') {
# throw back a form to select userid to modify and own userid + password
        $page->form("$currentScript/delete/confirm");
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->space(1);
        $page->add("Delete or Retire a user",0,0,'size=+1');
        $page->space(1);
        $page->add("This function requires supervisor access priviledge",0,1,"size=+1 color='lightsteelblue'");
        my $users = $people->htmlTableColumn ('userid',{itemLink => 0, noHeader => 1});
        $users =~ s/ITEMS/Arcturus users/;
        $page->add($users,0,0);
        my $text = "A user can be deleted only if no allocation to a project ";
        $text .= "exists; otherwise the user will be retired. ";
        $text .= "A deleted user will be removed from the database; a retired ";
        $text .= "user's information will be retained.";
        $text = "<table width=72%><tr><td bgcolor='FAFAD2'>$text</td></tr></table>";
        $page->add($text,0,1);
        my $dbusers = $people->htmlOptions('userid','userid',0,0);
        my $query = "<TABLE><TR><TH>User to be deleted:</th>";
        $query .= "<td>$dbusers</td></tr></table>";
        $page->add($query,0,1);
        $page->submitbuttonbar(0);
        $page->ingestCGI();
    }
    elsif ($action eq "confirm") {
# test input user names and priviledges
        my $userid   = $cgi->parameter('userid');
        my $confirm  = $cgi->parameter('confirm',0) || 0; # no check for presence

        $page->form("$currentScript/delete/confirm");
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->space(1);
        $page->add("Delete or Retire a user",0,1,'size=+1');

        my %usercodes  = (user => $userid, mask => 6, notOnSelf => 1);
        my %returnpath = (returnPath => '/delete/confirm', noGUI => 1); 

        if ($cgi->{'und_error'}) {
            $error = "Please define every input field";
        }
        elsif (!$GateKeeper->authorize(\%usercodes,\%returnpath)) {
            $error = $GateKeeper->{error};
            $error =~ s/\<[^\<\>]*\>/delete/;
        }
        else {
# check userid against projects via USERS and USERS2PROJECTS
            my $isAllocated;
            if ($isAllocated = &listUserData($people,$userid)) {
                $isAllocated = "User $userid is allocated to $isAllocated project(s)";
            }
            else {
# to be sure search all databases for a reference to this user; exit on first found
                foreach my $hash (@{$organisms->{hashrefs}}) {
                    my $database = $hash->{dbasename};                     
                    my $ptop = $organisms->spawn('USERS2PROJECTS',$database,0);
                    if ($isAllocated = $ptop->associate('project',$userid,'userid')) {
                        $isAllocated = "User $userid is allocated to project $isAllocated";
                        last;
                    }
                }
	    }

            my $action = "$currentScript";
            my $reject = $action.'/locate'.$cgi->postToGet(0,'userid');
	    if ($isAllocated) {
# the user cannot be deleted
                my $text = "$isAllocated<p>User $userid will be retired"; 
                $page->hidden("userid\&$userid\&ustatus",'retired');
                $page->ingestCGI();
                $action .= "/modify/confirm";      
                $page->promptbox($text,$action,$reject);
            }
            else {
# delete the user
                my $text = "User $userid will be removed from the database";
                if ($confirm eq 'CONFIRM') {
                    if ($people->delete('userid',$userid)) {
                        $text .= " ...... DONE!"; 
                        $doDelete = $userid;
                    } else {
                        $text .= " ...... FAILED!";
                    }
		    $page->messagebox($text,$reject);
                }
                else {
                    $action .= '/delete/confirm';
                    $page->ingestCGI();
                    $page->promptbox($text,$action,$reject);
                }
            }
        }
    }
    else {
        $error = "! Invalid function for \"DELETE\"";
        $page->add($cgi->PrintVariables());
    }
    $page->errorbox($error,$link,'RETURN') if ($error);
}

###############################################################################

elsif ($option eq "authorize") {
# displayed in new window 'userframe' without full GUI
    $page->frameborder(100,15,'white',5); # overrides GUI

    undef my $error;
    my $link = "$currentScript/getmenu";
    $link .= $cgi->postToGet(1,'session','noGUI');

    my %usercode = (mask => 6, notOnSelf => 1);
    $action = 'getform' if !$action;
    my %returnpath = (returnPath => "/$option/$action", noGUI => 1); 

    if ($action eq 'getform') {
# throw back a form to select a user
        $page->form("$currentScript/$option/getdata");
        $page->partition(2);
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->partition(1);
#        $page->space(1);
        $page->add("Access Priviledges Allocation",0,0,'size=+1');
        $page->space(1);
        $page->add("This function requires supervisor access priviledge",0,1,"size=+1 color='lightsteelblue'");
        my $users = $people->htmlTableColumn ('userid',{itemLink => 0, noHeader => 1});
        $users =~ s/ITEMS/Arcturus users/; # replace placeholder
        $page->add($users,0,0);
        my $dbusers = $people->htmlMaskedOptions('userid','where',"seniority < 6",'userid');
        my $query = "<TABLE><TR><TH>Select a User:</th>";
        $query .= "<td>$dbusers</td></tr></table>";
        $page->add($query,0,1);
        $page->submitbuttonbar($link,0,0);
        $page->ingestCGI();
    }

    elsif ($action eq "getdata") {
# get the relevant data from the database and throw back an edit form
        my $userid   = $cgi->parameter('userid') || '';
        $page->partition(2);
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->partition(1);
        $page->add("Access priviledges allocation for user '$userid'",0,0,'size=+1');
        $usercode{user} = $userid;
# test input and values
        if ($cgi->{'und_error'} || !$userid) {
            $error = "Please define all input fields";
        }
# test the authorization for this operation to ensure USER is defined
        elsif (!$GateKeeper->authorize(\%usercode, \%returnpath)) { 
            $error = $GateKeeper->{error};
            $error =~ s/\<do.+\>/change your priviledges/;
        }
# exclude the database owner and the superuser (just in case)
        elsif ($userid eq 'oper' || $userid eq 'arcturus') {
            $error = "User '$userid' has default maximum access priviledges which cannot be altered";
        }

        else {
# password checked out okay, get list of items to be edited
            $page->form("$currentScript/$option/confirm");            
            my $user = $people->associate('hashref',$userid,'userid');
            my $data = $people->unpackAttributes($userid,'userid');
            my $smax = $people->associate('seniority',$GateKeeper->{USER},'userid');
            $smax-- if ($smax);  # maximum allowed seniority
# get current seniority and build seniority select menu (if a choice is available)
            my @seniority;
            for (my $i=0 ; $i <= $smax ; $i++) {
                    push @seniority, $i;
            }
            $page->center(0); # revert to left justified

            my $seniority = $cgi->parameter('seniority');
            $user->{seniority} = $seniority if defined($seniority); # preset, if any
            my $select = $page->choicelist('seniority',\@seniority,0,-1,$user->{seniority});
            $seniority = "<table><tr><td><font size=+1> Seniority for user \"$userid\" :</font></td>";
            $seniority .= "<td bgcolor='white' width=20 align=center>$select</td>";
            $seniority .= "<td> ($user->{seniority}) </td></tr></table>";
            $seniority =~ s/white/CCCCCC/ if ($seniority !~ /select/i);
            $page->add($seniority,0,0);
# the current access priviledge
            my $access = $cgi->parameter('access');
            $user->{priviledges} = $access if defined($access); # preset
            $page->add("Select priviledges (current code $user->{priviledges}) :",0,0,'size=+1');
            $page->space(1);
            $page->add(&listPriviledges($user->{priviledges},1)); # including tick boxes
# current restrictions on database
            $data->{databases} = 'NONE' if !$data->{databases};
            $data->{databases} =~ s/\:|\\\&/ /g; 
            my $databases = "<table><tr><td nowrap><font size = +1> Database restrictions :</font></td>";
            $databases .= "<td><input type=text name=dbrange value='$data->{databases}' size=30 maxlength=256>";
            $databases .= "</td></tr>";
            $page->add($databases,0,0);
# current restrictions on tables
            $data->{tablename} = 'NONE' if !$data->{tablename};
            $data->{tablename} =~ s/\:|\\\&/ /g; 
            my $tablename = "<tr><td><font size = +1 nowrap> Database Table restrictions :</font></td>";
            $tablename .= "<td><input type=text name=tbrange value='$data->{tablename}' size=30 maxlength=256>";
            $tablename .= "</td></tr></table>";
            $page->add($tablename,0,0);
            $page->center(1); # restore centering
            $page->submitbuttonbar($link,0,0);
            $page->ingestCGI();
        }
        $page->add($error,0,0,'size=+1') if $error;
    }

    elsif ($action eq "confirm") {
# get the relevant data from the database and throw back a confirm form
        my $userid    = $cgi->parameter('userid') || '';
        my $confirm   = $cgi->parameter('confirm',0) || 0; # no check for presence
        my $seniority = $cgi->parameter('seniority',0);   # no check for presence
        my $access    = $cgi->parameter('access',0) || 0;
        my $dbrange   = $cgi->parameter('dbrange',0) || 'NONE';
        my $tbrange   = $cgi->parameter('tbrange',0) || 'NONE';
        $page->partition(2);
        $page->sectionheader("ARCTURUS user administration",3,0);
        $page->partition(1);
        my $user = $people->associate('hashref',$userid,'userid');
        $page->add("Access priviledges allocation for user $userid",0,0,'size=+1');
        $usercode{user} = $userid;
# test database restrictions
        undef my $dbaccess;
        my %htcoptions = (maxColumns => 5, noHeader => 1, cellWidth => 120);
        if ($dbrange && $dbrange ne 'NONE') {
            $dbrange =~ s/\s*$//; # chop trailing blanks
            my @databases = split /\s*[\,\;\|\&]\s*/,$dbrange;
            my $list = $organisms->htmlTableColumn('dbasename',\%htcoptions);
            my $problem = 0;
            foreach my $database (@databases) {
                $dbaccess .= $database.' ';
                if (!$organisms->associate('number',$database,'dbasename')) {
                    $error .= "Unknown database '$database'<p>";
                    $problem = 1;
                }
            }
            $error .= "Valid databases are: $list <p>" if $problem;
        }
# test database table restrictions
        undef my $dtaccess;
        if ($tbrange && $tbrange ne 'NONE') {
            $tbrange =~ s/\s*$//; # chop trailing blanks
            my @tables = split /\s*[\,\;\|\&]\s*/,$tbrange;
            my $inventory = $organisms->spawn('INVENTORY','arcturus',0,1);
            my $list = $inventory->htmlTableColumn('tablename',\%htcoptions,'domain','o');
            my $problem = 0;
            foreach my $table (@tables) {
                $dtaccess .= $table.' ';
                my $where = "tablename = '$table' and domain = 'o'";
                if (!$inventory->associate('domain','where',$where)) {
                    $error .= "Invalid database tablename '$table' <p>";
                    $problem = 1;
                }
            }
            $error .= "Valid tablenames are: $list <p>" if $problem;
        }
       
# test input and values
        if ($cgi->{'und_error'} || !$userid) {
            $error .= "Please define all input fields";
        }
# test the authorization for this operation to ensure USER is defined
        elsif (!$GateKeeper->authorize(\%usercode, \%returnpath)) { 
            $error = $GateKeeper->{error};
            $error =~ s/\<do.+\>/change your priviledges/;
        }
# test if database restrictions are valid
        elsif (!$error) {
# compare with current setting : seniority
            $page->center(0);
            $page->space(3);
            if (!defined($seniority) || $seniority == $user->{seniority}) {
                $page->add("Seniority ($user->{seniority}) for $userid not changed",0,0,'size=+1'); 
            }
            else {
                $page->add("Current seniority $user->{seniority} for $userid to be changed to : $seniority",0,0); 
            }
# access code
            if ($access) {
                my @access = split /\0|\s\&\s/,$access;
                $access = 0;
                foreach my $bit (@access) {
                    $access = $access | (1 << $bit);
	        }
            }
            $page->space(1);
            $page->add("Enable these priviledges (code $access) for user $userid:",0,0,'size=+1');
            $page->add(&listPriviledges($access));
# restrictions to database or table access
            $page->space(1);
            $page->add("Access restricted to database(s): $dbaccess",0,0,'size=+1') if $dbaccess;
            $page->add("No restriction on access to database(s)",0,0,'size=+1') if !$dbaccess;
            $page->space(1);
            $page->add("Access restricted to database table(s): $dtaccess",0,0,'size=+1') if $dtaccess;
            $page->add("No restriction on access to database table(s)",0,0,'size=+1') if !$dtaccess;
	    $page->center(1);
# decision time
            if (!$confirm || $confirm ne 'CONFIRM') {
                $page->form("$currentScript/$option/confirm");            
                $page->promptbox($report,$action,$link); # return button to modify
                $page->ingestCGI(); # (0,'default');
            }
            else {
                $people->update('priviledges',$access,'userid',$userid);
                $people->update('seniority',$seniority,'userid',$userid);
                $people->packAttribute($userid,'userid','attributes','databases',$dbaccess) if $dbaccess;
                $people->packAttribute($userid,'userid','attributes','tablename',$dtaccess) if $dtaccess;
                $people->update('ustatus','active','userid',$userid);
                $page->space(2);
                $page->add("DONE",0,0,'size=+1');
                $doCopy = 1;
            }
        }

        if ($error) {
            $page->center(0);
            $page->add($error,0,0,'size=+1');
        }
    }
}

###############################################################################
# QUERY
###############################################################################

elsif ($option eq "locate") {
# find a user from a bit of information
    $page->frameborder(100,15); # overrides GUI

    my $userid;
    $page->sectionheader("ARCTURUS user administration",3,0);
    if (!$action || $action eq 'getform') {
    # generate query form
        $page->form("$currentScript/locate/search");
        $page->sectionheader("Find a user: formulate your query",4,1);
    # get the query form
        $page->add($people->htmlEditRecord(0,0,0,'02222220000','any'),0,1);
        my $match = "<TABLE><TR><TH>matching method:</TH>";
        $match .= "<TD><INPUT TYPE=radio NAME=match VALUE=0></TD>";
        $match .= "<TD>Exact</TD><TD>&nbsp</TD>";
        $match .= "<TD><INPUT TYPE=radio NAME=match VALUE=1></TD>";
        $match .= "<TD>Substring</TD><TD>&nbsp</TD>";
        $match .= "<TD><INPUT TYPE=radio NAME=match VALUE=2 checked></TD>";
        $match .= "<TD>Substring NC</TD><TD>&nbsp</TD>";
        $match .= "</TR></TABLE>";
        $page->add($match,0,1);
        $page->submitbuttonbar(1);     
    }
    elsif ($action eq 'search') {
# do the query, list the results
        $page->sectionheader("Find a user: results",4,1);
        my $input = $cgi->{'cgi_input'}; # the hash with item-value pairs
        my $match = $cgi->parameter('match');
        if (my $users = $people->find($input,'*',$match)) {
            if (@$users == 1) {
                $userid = $users->[0]->{'userid'};
                &listUserData($people,$userid);
            }
            else {
                my $table = "<TABLE>";
                foreach my $hash (@$users) {
                    $userid = $hash->{'userid'};
                    my $anchor = "<a href=\"$currentScript/locate/user\?userid=$userid\">";
                    $anchor .= "$userid</A>";
                    $table .= "<TR><TD>$anchor</TD><TD>&nbsp</TD><TD>$hash->{'lastname'}</TD>";
                    $table .= "<TD>&nbsp</TD><TD>$hash->{'givennames'}</TD>";
                    $table .= "<TD>&nbsp</TD><TD>$hash->{'function'}</TD>";
                    $table .= "<TD>&nbsp</TD><TD>$hash->{'email'}</TD></TR>";
                }
                $table .= "</TABLE>";
                $page->add($table,0,1);
            }
        }
        else {
            $page->errorbox("No users found",0);
	    $page->sectionheader("Please go back and change the search parameters",4);
        }
    }
    elsif ($action eq 'user' && ($userid = $cgi->parameter('userid'))) {

        &listUserData ($people,$userid);

    }
    else {
        $page->errorbox("Invalid input for umanager/$option/$action");
        $page->add($cgi->PrintVariables());
    }
}

###############################################################################

else {
# error status
    $page = $GateKeeper->GUI("ARCTURUS user information maintenance and updates");
    $page->errorbox("Invalid option '$option' for 'umanager' script");
    $page->add($cgi->PrintVariables());
    $page->form(0);
}

###############################################################################
# CLOSE
###############################################################################

$page->address('ejz@sanger.ac.uk','Ed Zuiderwijk',2) if ($option =~ /mod|pwu|del|aut|loc/);
$page->form(0);
$page->flush();

# print "history update ... \n";
$organisms->historyUpdate($userid,0,0);

$GateKeeper->disconnect;

&mailnotice ($email,$message,$arc_scr_dir) if ($message && $email);
&mailnotice ($db_manager,$report,$arc_scr_dir) if ($report);

# finally harmonize the USERS tables of all instances instances

if ($doCopy || $doDelete) {
    my $temp = $config->get('ARC_TMP_DIR');
    my $action = "copy:";
    $action .= "delete:$doDelete" if $doDelete;
    my $root = $GateKeeper->prepareFork('harmonize');
    system ("$root/harmonize users $action >> $temp/harmonize.log");
}

exit 0;

#******************************************************************************
# subroutines
#******************************************************************************

sub mailnotice {

    my ($address,$message,$scratch_dir) = @_;

# Write content to the temporary mail file

print "mailnotice to $address <br><br>$message<br><br>dir: $scratch_dir<br><br>";

    my $user;
   ($user = $address) =~ s/(.*)\@\S*/$1/;
    my $mailfile = "$scratch_dir/$user";

    unlink($mailfile) if (-e $mailfile);

    open (MAILFILE,">$mailfile");
    print MAILFILE $message;
    close (MAILFILE);

    system("mail $address < $mailfile");

    unlink($mailfile);

    return 0;
}


sub listUserData {
    my ($people, $userid) = @_;

    my $isAllocated = 0;
    $page->sectionheader("Arcturus user $userid",4,0);
    if (my $list = $people->htmlEditRecord($userid,'userid',0,'011111110')) {
        $page->add($list,0,0);
        my %stype = (D => 'Development', P => 'Production');
        my $attributes = $people->unpackAttributes($userid,'userid');
        my $table = "<table cellpadding=2 border=2>";
        $table .= "<tr><th>Project</th><th>Assembly</th><th>server</th></tr>";
        foreach my $key (sort keys %$attributes) {
            if ($key =~ /-/) {
                my ($project,$assembly) = split '-',$key;
                $table .= "<tr><td>$assembly</td><td>$project</td>";
                $table .= "<td>$stype{$attributes->{$key}}</td></tr>";
                $isAllocated++;
            }
        }
        $table .= "</table>";
        $page->space(1);
        if ($isAllocated) {
            $page->sectionheader("Projects of user $userid",4,0);            
            $page->add($table,0,0);
        }
        else {
            my $text = "User $userid is not allocated to any project";
            $page->sectionheader($text,4,0);
        }
    } 
    else {
        $page->errorbox("No such user: $userid");
    }

    return $isAllocated;
}


sub listPriviledges {
# return a listing of the priviledges set for a user as HTML formatted table
    my $code = shift;
    my $tick = shift; # if true, return a form with check boxes

    return "<table><tr><td bgcolor='CCCCCC'>No priviledges enabled</td></tr></table>" if (!$code && !$tick);

    my @description = (
       'Create a new ARCTURUS database',          # bit 15 (includes drop and backup)
       'Modify database description',             # bit 14 (always if creator)
       'Re-initialize tables or change format',   # bit 13 (could be destructive rebuild)
       'Rebuild table contents ',                 # bit 12 (non-destructive with arcturus scripts)
       'Re-initialize common database tables',    # bit 11
       'Enter new reads',                         # bit 10
       'Do reads-related maintenance',            # bit  9
       'Process a new assembly (i.e. contigs)',   # bit  8
       'Do assembly-related maintenance',         # bit  7
       'Enter or modify tags',                    # bit  6
       'Define new assemblies and projects',      # bit  5 (includes delete)
       'Make assembly & project allocations',     # bit  4 (subject to seniority)
       'Modify assembly & project descriptions',  # bit  3 (always for creator itself)
       'Define user priviledges',                 # bit  2 (only seniority >= 5)
       'Change user data',                        # bit  1 (subject to seniority; always own info)
       'Has additional restrictions');            # bit  0 

    my $font = "<font size=4 face='sans-serif'>";
    my $list = "<table cellpadding=0 cellspacing=0 border=0>";
    for (my $i = 0 ; $i < 15 ; $i++) {
        my $bit = 15 - $i;
        my $checked = ''; $checked = 'checked' if ($code & (1 << $bit));
        $list .= "<tr>";
        $list .= "<td> - </td>" if (!$tick && $code & (1 << $bit));
        $list .= "<td><input type=checkbox name=access value=\"$bit\" $checked>&nbsp</td>" if $tick;
        $list .= "<td> $font $description[$i]</font> </td>" if ($tick || $code & (1 << $bit)); 
        $list .= "</tr>";
    } 
    $list .= "</table>";

    return $list;
}
