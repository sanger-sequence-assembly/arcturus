#!/usr/local/bin/perl -w

#############################################################################
# Housekeeping script to equalize contents of ORGANISMS, USERS and VECTORS
#
# This script can be run under backticks after an update on ane of the
# servers. Should also be run of the GUI
#############################################################################

use strict; # Constraint variables declaration before using them

use GateKeeper; 
use ArcturusTable;

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = GateKeeper->new('mysql');

# this script may be run:
# (1) from the arcturus GUI under CGI
# (2) spawned from a script running under CGI
# (3) from the command line (at the moment no id check)

my $subject = '';
my $action  = '';

my $origin = $GateKeeper->origin(2,1) || ''; # print "origin:  $origin \n";

(my $void, $subject, $action) = split '/',$origin if $origin;
   
$GateKeeper->cgiHeader(1) if !@ARGV; # return string plain

##############################################################################
# PREPARATIONS
##############################################################################

my $instances  = $GateKeeper->lookup('mysql_ports');
my $port_maps  = $GateKeeper->lookup('port_maps');
undef my %maps;
foreach my $map (@$port_maps) {
    my @parts = split /\W/,$map;
    $maps{$parts[1]} = $parts[2];
}

##############################################################################
# connect to all instances 
##############################################################################

undef my %handles;

my $currentPort = $GateKeeper->currentPort;
my $currentHost = $GateKeeper->currentHost;

my $report;
foreach my $instance (@$instances) {
# print "instance  $instance \n";
    $instance =~ s/\.sanger\.ac\.uk//;
    my ($host,$port) = split ':',$instance;
#    next if ($maps{$port} != $currentPort && (!$subject || $subject !~ /\bvectors|chemtypes\b/));
    next if ($maps{$port} != $currentPort && (!$subject || $subject !~ /\bchemtypes\b/));
    $report .= "Opening $instance ... ";
    if ($GateKeeper->ping_MySQL($host,$port)) {
        my %options = (dieOnError => 0, writeAccess => 1);
        my $handle  = $GateKeeper->opendb_MySQL_unchecked($instance,\%options);
        $report .= "MySQL instance $instance cannot be opened\n" if !$handle;
        $instance =~ s/$port/$maps{$port}/; # replace TCP port by apache port
        $handles{$instance} = $handle if $handle;
        $report .= "($instance) ... handle $handle ... done \n";
    }
    else {
        $report .= "MySQL instance $instance is not available\n";
    }
}

##############################################################################
# MAIN
##############################################################################

my %options = (doCopy => 0, doDelete => 0); # defaults

# compose the options according to the value of $action
if ($action) {
    my @actions = split ':',$action; 
    $options{doCopy} = 1   if ($actions[0] && $actions[0] =~ /\bcopy\b/i);
    $options{doDelete} = 1 if ($actions[1] && $actions[1] =~ /\bdelete\b/i);
    $options{delTarget} = $actions[2] if ($options{doDelete} && $actions[2]);
}

if ($subject && $subject =~ /\borganisms\b/i) {

    undef my %organisms;
    foreach my $instance (keys %handles) {
        my $handle = $handles{$instance};
        my $organism = ArcturusTable->new($handle,'ORGANISMS','arcturus',1);
        $organisms{$instance} = $organism if $organism;
    }

    undef my %servers;
    foreach my $instance (keys %organisms) {
        my $organism = $organisms{$instance};
        $report .= "\n\n$instance ($organism)\n";
        $report .= $organism->list('1111111111111111110');
        my $hashrefs = $organism->associate('hashrefs');
        foreach my $hash (@$hashrefs) {
            my $residence = $hash->{residence};
            $residence =~ s/\.sanger\.ac\.uk//;
            $residence =~ s/\:\w+\:/:/; # temporary fix
            $servers{$residence}++;
        }
    }
    $report .= "\nHarmonizing ORGANISMS data ..... \n\n";

    my @columns = ('attributes','last-backup');
    foreach my $oresidence (keys %servers) {
        my ($ohost, $oport) = split ':',$oresidence;
        foreach my $nresidence (keys %organisms) {
            my ($nhost, $nport) = split ':',$nresidence;
            if ($ohost ne $nhost  && $oport eq $nport) {
# copy from instance ohost:oport to instance nhost:nport, those data where residence = ohost:oport
                $report .= "copy from instance $ohost:$oport to instance $nhost:$nport, ";
                $report .= "data where residence = $ohost:$oport\n\n";
                my $othandle = $organisms{$oresidence};
                my $nthandle = $organisms{$nresidence};
                my $where = "residence like '$ohost%$oport'";
                $report .= $othandle->copy($nthandle,'where',$where,\%options) if ($othandle && $nthandle); 
            }
        }    
    }
}

elsif ($subject && $subject =~ /\busers\b/i) {

    undef my %userdata;
    foreach my $instance (keys %handles) {
        my $handle = $handles{$instance};
        my $users = ArcturusTable->new($handle,'USERS','arcturus',1);
        $userdata{$instance} = $users if $users;
    }

# copy the data from the user table on the current server to all others

    my $whereAmI = "$currentHost:$currentPort";
    
    foreach my $server (keys %userdata) {
        my $ouhandle = $userdata{$whereAmI};
        if ($server ne $whereAmI) {
            my $nuhandle = $userdata{$server};
	    print "copy from $whereAmI to $server: $ouhandle to $nuhandle\n";
            $report .= $ouhandle->copy($nuhandle,'where',1,\%options) if ($ouhandle && $nuhandle); 
        }   
    }
}

elsif ($subject && $subject =~ /\bvectors\b/i) {

    undef my %vectordata;
    foreach my $instance (keys %handles) {
        my $handle = $handles{$instance};
        my $vectors = ArcturusTable->new($handle,'VECTORS','arcturus',1);
        $vectordata{$instance} = $vectors if $vectors;
    }

# copy the data from the user table on the current server to all others

    my $whereAmI = "$currentHost:$currentPort";
    
    foreach my $server (keys %vectordata) {
        my $ovhandle = $vectordata{$whereAmI};
        if ($server ne $whereAmI) {
            my $nvhandle = $vectordata{$server};
	    print "copy from $whereAmI to $server: $ovhandle to $nvhandle\n";
            $options{keyColumn} = 'template';
            $report .= $ovhandle->copy($nvhandle,'where',1,\%options) if ($ovhandle && $nvhandle); 
        }
    }
}

elsif ($subject && $subject =~ /\bchemtypes\b/i) {

    undef my %chemdata;
    foreach my $instance (keys %handles) {
        my $handle = $handles{$instance};
        my $chemtypes = ArcturusTable->new($handle,'CHEMTYPES','arcturus',1);
        $chemdata{$instance} = $chemtypes if $chemtypes;
    }

# copy the data from the user table on the current server to all others

    my $whereAmI = "$currentHost:$currentPort";
    
    foreach my $server (keys %chemdata) {
        my $ochandle = $chemdata{$whereAmI};
        if ($server ne $whereAmI) {
            my $nchandle = $chemdata{$server};
	    print "copy from $whereAmI to $server: $ochandle to $nchandle\n";
            $options{keyColumn} = 'chemtype';
            $report .= $ochandle->copy($nchandle,'where',1,\%options) if ($ochandle && $nchandle); 
        }
    }
}

else {
    my $script = $GateKeeper->currentScript;
    $report .= "! Invalid subject '$subject' for script $script\n";
}

print "$report\n";

##############################################################################
# EXIT
##############################################################################

print "\n.... Closing down\n";

foreach my $instance (keys %handles) {
    $handles{$instance}->disconnect();
}

print "\nFinished\n";

