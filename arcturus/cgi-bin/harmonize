#!/usr/local/bin/perl -w

#############################################################################
# get assembly data for  Cyclops from ARCTURUS database
#############################################################################

use strict; # Constraint variables declaration before using them

use GateKeeper; 
use ArcturusTable;

##############################################################################
# unbuffered output
##############################################################################

open(STDERR,">&STDOUT") || die "Can't dump to STDOUT: $!\n";
select(STDERR); $| = 1; # Make unbuffered.
select(STDOUT); $| = 1; # Make unbuffered.

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = GateKeeper->new('mysql');

my $config     = $GateKeeper->configHandle();

my $cgi        = $GateKeeper->cgiHandle();

$GateKeeper->cgiHeader(1); # return string plain

my $instances  = $config->get('mysql_ports');
my $port_maps  = $config->get('port_maps');
undef my %maps;
foreach my $map (@$port_maps) {
    my @parts = split /\W/,$map;
    $maps{$parts[1]} = $parts[2];
}

##############################################################################
# connect to all instances 
##############################################################################

undef my %handles;

my $report;
foreach my $instance (@$instances) {

    $instance =~ s/\.sanger\.ac\.uk//;
    $report .= "Opening $instance ...";
    my ($host,$port) = split ':',$instance;
next if ($maps{$port} == 18080);
    if ($GateKeeper->ping_MySQL($host,$port)) {
        my $handle   = $GateKeeper->opendb_MySQL_unchecked($instance,{dieOnError => 0});
        print "MySQL instance $instance cannot be opened\n" if !$handle;
        $instance =~ s/$port/$maps{$port}/; # replace TCP port by apache port
        $handles{$instance} = $handle if $handle;
    }
    else {
        print "MySQL instance $instance is not available\n";
    }
    $report .= "... done \n";
}

$report = $GateKeeper->whereAmI();
print $report;

##############################################################################
# MAIN
##############################################################################

undef my %organisms;
foreach my $instance (keys %handles) {
    my $handle = $handles{$instance};
    my $organism = ArcturusTable->new($handle,'ORGANISMS','arcturus',1);
    $organisms{$instance} = $organism if $organism;
}

undef my %servers;
foreach my $instance (keys %organisms) {
    my $organism = $organisms{$instance};
    print "\n\n$instance \n";
    my $list = $organism->list('1111111111111111110');
    print $list;
    my $hashrefs = $organism->associate('hashrefs');
    foreach my $hash (@$hashrefs) {
        my $residence = $hash->{residence};
        $residence =~ s/\.sanger\.ac\.uk//;
        $servers{$residence}++;
    }
}

my @columns = ('attributes','last-backup');
foreach my $oresidence (keys %servers) {
    my ($ohost, $oport) = split ':',$oresidence;
print "residence $ohost : $oport \n";
    foreach my $nresidence (keys %servers) {
        my ($nhost, $nport) = split ':',$nresidence;
print "   residence $nhost : $nport \n";
        if ($ohost ne $nhost  && $oport eq $nport) {
# copy from instance ohost:oport to instance nhost:nport, those data where residence = ohost:oport
print "copy from instance $ohost:$oport to instance $nhost:$nport, those data where residence = $ohost:$oport\n\n";
            my $othandle = $organisms{$oresidence};
            my $nthandle = $organisms{$nresidence};
            my $where = "residence like '$ohost%$oport'";
            $othandle->copy($nthandle,'where',$where) if ($othandle && $nthandle); 
        }
    }    
}

##############################################################################
# EXIT
##############################################################################

print "closing down\n";

foreach my $instance (keys %handles) {
    $handles{$instance}->disconnect();
}





