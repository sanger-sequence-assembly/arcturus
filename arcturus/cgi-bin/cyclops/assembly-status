#!/usr/local/bin/perl -w

#############################################################################
# get assembly data for  Cyclops from ARCTURUS database
#############################################################################

use strict; # Constraint variables declaration before using them

# use lib "/nfs/pathsoft/arcturus/dev/lib";

use GateKeeper; 
use ArcturusTable;

##############################################################################
# unbuffered output
##############################################################################

open(STDERR,">&STDOUT") || die "Can't dump to STDOUT: $!\n";
select(STDERR); $| = 1; # Make unbuffered.
select(STDOUT); $| = 1; # Make unbuffered.

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################
    
my $GateKeeper = GateKeeper->new('mysql',0);

my $config = $GateKeeper->configHandle();

my ($cgi, $database, $chromosome);
if ($cgi = $GateKeeper->cgiHandle()) {
    $database   = $cgi->parameter('organism',1);
    $chromosome = $cgi->parameter('chromosome',1);
}
else {
    $database   = shift @ARGV;
    $chromosome = shift @ARGV;
}

my $dbh = $GateKeeper->dbHandle($database);

$GateKeeper->cgiHeader(1); # return string plain

##############################################################################
# MAIN
##############################################################################

my $organisms = ArcturusTable->new($dbh,'ORGANISMS','arcturus',1);
my $contigs   = $organisms->new($dbh,'CONTIGS',$database,0);
my $assembly  = $organisms->new($dbh,'ASSEMBLY',$database,0);
my $scaffold  = $organisms->new($dbh,'CONTIGS2SCAFFOLD',$database,0);

my $assembly_hash = $assembly->associate('hashref',$chromosome,'chromosome');
$GateKeeper->dropDead("Sorry, no data for chromosome $chromosome") if !$assembly_hash;
my $assemblynmbr  = $assembly_hash->{assembly};
my $last_assembly = $assembly_hash->{updated};
my $nreads        = $assembly_hash->{reads};
my $ncontig       = $assembly_hash->{contigs};

print STDOUT "Assembly data for $database, chromosome $chromosome\n";
print STDOUT "Date and time of last assembly        : $last_assembly\n";
print STDOUT "Number of reads                       : $nreads\n";
print STDOUT "Number of contigs                     : $ncontig\n";

my $query = "use $database";
$organisms->query($query);

$query = "select count(CONTIGS.contig_id) AS ccount, sum(CONTIGS.length) as lsum from ";
$query .= "CONTIGS,CONTIGS2SCAFFOLD where ";
$query .= "CONTIGS.contig_id=CONTIGS2SCAFFOLD.contig_id and ";
$query .= "CONTIGS.length >= 2000 and ";
$query .= "CONTIGS2SCAFFOLD.assembly=$assemblynmbr and ";
$query .= "CONTIGS2SCAFFOLD.astatus in ('N','C')";
my $hash = $contigs->query($query); # print "$query\n";
$hash->[0]->{lsum} = 0 if !$hash->[0]->{lsum};
print STDOUT "Number of contigs of length >= 2kb    : $hash->[0]->{ccount}, total length: $hash->[0]->{lsum}\n";

$query =~ s/2000/5000/;
$hash = $contigs->query($query);
$hash->[0]->{lsum} = 0 if !$hash->[0]->{lsum};
print STDOUT "Number of contigs of length >= 5kb    : $hash->[0]->{ccount}, total length: $hash->[0]->{lsum}\n";

$query =~ s/5000/10000/;
$hash = $contigs->query($query);
$hash->[0]->{lsum} = 0 if !$hash->[0]->{lsum};
print STDOUT "Number of contigs of length >= 10kb   : $hash->[0]->{ccount}, total length: $hash->[0]->{lsum}\n";

$query = "select count(CONTIGS.contig_id) AS ccount, sum(CONTIGS.length) as lsum from ";
$query .= "CONTIGS,CONTIGS2SCAFFOLD where ";
$query .= "CONTIGS.contig_id=CONTIGS2SCAFFOLD.contig_id and ";
$query .= "CONTIGS2SCAFFOLD.assembly=$assemblynmbr and ";
$query .= "CONTIGS2SCAFFOLD.astatus='N'";
$hash = $contigs->query($query);
$hash->[0]->{lsum} = 0 if !$hash->[0]->{lsum};
print STDOUT "Number of newly created contigs       : $hash->[0]->{ccount}, total length: $hash->[0]->{lsum}\n";


##############################################################################
# Some local parameters and variables
##############################################################################

$dbh->disconnect();















