#!/usr/local/bin/perl -w

#############################################################################
#
# auxilliary script to update selected tables
#
#############################################################################

use strict; # Constraint variables declaration before using them

use GateKeeper; 

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = new GateKeeper('mysql',{insistOnCGI => 1, writeAccess => 1});

my $cgi        = $GateKeeper->cgiHandle();

my ($void, $database, $option, $action) = split '/',$GateKeeper->currentOptions;

my $organisms  = $GateKeeper->dbHandle($database,{returnTableHandle => 1});

my $thisScript = $GateKeeper->currentScript;

##############################################################################
# MAIN
##############################################################################

# select the common database as default
# test the presence of the INVENTORY table in the common database "arcturus"
# - if not present, force its installation via the "create" script
# - if present, test the presence of all other tables in the common database
#   against the data specified in the INVENTORY

my $page = $GateKeeper->GUI("ARCTURUS database maintenance and updates");
# $page->address('ejz@sanger.ac.uk','Ed Zuiderwijk',2);

my $getMenu  = "$thisScript/arcturus/getmenu";

my $open = $organisms->do("use arcturus"); # select the default common database
$database = 'inaccessible' if (!$open); # results in error status and exit

###############################################################################
# actions on the sequence and cloning vector tables
###############################################################################

if ($database eq 'arcturus' && $option eq 'vectors') {

# generate a choicebox

    my $bgcolor = "bgcolor='lightblue'";
    $page->form("$thisScript/arcturus/vectortable");
    $page->sectionheader("ARCTURUS contents manager");
    $page->sectionheader("Sequence and Cloning Vector data update",3,1);
    $page->add("<TABLE CELLPADDING=5>");
    $page->add("<tr><td><INPUT type='radio' name='voption' value='update'></td>");
    $page->add("<td $bgcolor>CHECK</td><td> Do a cross-check of all "); 
    $page->add("vector data tables</td></tr>");
    $page->add("<tr><td><INPUT type='radio' name='voption' value='vtedit' checked></td>");
    $page->add("<td $bgcolor>MASTER</td><td> Edit the master table </td></tr>");
    $page->add("</TD></TR></TABLE>",0,1);
    $page->identify('10',8,1);
    $page->submitbuttonbar(0,1,0);
    $page->form(0);
    $page->flush();
}

elsif ($database eq 'arcturus' && $option eq 'vectortable') {

    my $function = $cgi->parameter('voption');
    my $confirm = $cgi->parameter('confirm',0) || 0; # no check on presence

    my $return = "$thisScript/arcturus/vectors";

    $page->sectionheader("ARCTURUS contents manager");
    $page->sectionheader("Sequence and Cloning Vector data update",4,1);

    undef my $error;
    if ($cgi->{'und_error'}) {
        $error = "Please define every input field";
    }
    elsif (!$GateKeeper->authorize(100)) {
        $error = $GateKeeper->{error};
    }

    elsif ($function eq 'update' && $confirm ne 'CONFIRM') {
#  compose confirm form
        my $action = "$thisScript/arcturus/vectortable"; # "form" in promptbox
        my $text = "A comprehensive cross-check of the Sequence Vector and Cloning ";
        $text .= "Vector<p>tables across Organism databases on this server will be done<p><p>";
        $text .= "The master table will be updated as required";
        $page->promptbox($text,$action,$getMenu);
        $page->ingestCGI();
        $page->form(0);
    } 
    elsif ($function eq 'vtedit' && $confirm ne 'CONFIRM') {
# prepare edit form for master VECTOR table
        my $vectors = $organisms->spawn('VECTORS','arcturus',1);
        $page->form("$thisScript/arcturus/vectortable");
        $page->add($vectors->htmlEditTable('012'),0,1);
# submit changes under new function 'change'?
        $cgi->replace('voption','change');
        $page->submitbuttonbar($getMenu,1,0); # return link to menu
        $page->ingestCGI();
        $page->form(0);
    }
    elsif ($function eq 'change' && $confirm ne 'CONFIRM') {
# generate confirm form for changes
        my $cgihash = $cgi->{cgi_input};
        my $vectors = $organisms->spawn('VECTORS','arcturus',0,1);
        my ($changes,$text) = $vectors->cgiEditTable($cgihash,0);
        if (!$changes) {
            $page->messagebox($text,$getMenu); # return link to menu
        }
        else {
            $page->form("$thisScript/arcturus/vectortable");
            $page->promptbox($text,$action,$getMenu);
            $page->ingestCGI(); # transport current cgi input
            $page->form(0);
        }
    } 
    elsif ($confirm eq 'CONFIRM') {
# here a section to do the cross checking across the databases
        undef my $report;
        if ($function eq 'update') {
# invoke subroutine  to do the cleanup
            $report .= &cleanVectors($organisms);
            my $return = "$thisScript/arcturus/vectortable";
            $return .= $cgi->postToGet;
            $page->messagebox($report,$return);
        } 
        elsif ($function eq 'change') {
            my $cgihash = $cgi->{cgi_input};
            my $vectors = $organisms->spawn('VECTORS','arcturus',0,1);
            $report = $vectors->cgiEditTable($cgihash,1);
            $page->messagebox($report,$getMenu);
        }
    }
    $page->errorbox("Operation Refused!<br>$error",$return) if $error;
    $page->flush();
}

###############################################################################

else {

   $page->errorbox("Invalid database '$database' or option '$option' for 'update'");
   $page->add($cgi->PrintVariables());
   $page->form(0);
   $page->flush();
}

#******************************************************************************

my $userid = $cgi->parameter('USER') || '';
$organisms->updateHistory($userid,0,2) if $userid;

$page->flush();
$GateKeeper->disconnect;
exit 0;


#******************************************************************************
# script to update vector tables
#******************************************************************************


sub cleanVectors {
    my $organisms = shift;

    undef my $report;

    my $vector = $organisms->spawn('VECTORS','arcturus',0,1);
    my $hashes = $organisms->{hashrefs};

# go through all organism databases

    foreach my $hash (@$hashes) {
        my $database = $hash->{dbasename};

# get the Sequence Vector table; go through all entries and collect the
# vector names in lc; find reference in mastertable; 

        my $svector = $organisms->spawn('SEQUENCEVECTORS',$database,0,1);
        if ($svector->{errors}) {
            $report .= "<h4>$svector->{errors} on this server</h4>";
            next;
        }

        my $entries = $svector->{hashrefs};
        $report .= "<h4>Testing $database\.SEQUENCEVECTORS</h4>";
        foreach my $entry (@$entries) {
            my $name = $entry->{name};
            my $lcname = lc($name);
# find name in master vector table
            my $number = $vector->associate('vector',$lcname,'template');
            if (!$number) {
                $vector->counter('template',$lcname); # add new entry to VECTORS
                $report .= "Vector template $lcname added to VECTORS<br>";   
                $number = $vector->associate('vector',$lcname,'template'); # get new number
            }
            if (!$entry->{vector}) {
                $svector->update('vector',$number,'name',$name);
                $report .= "$name in SEQUENCEVECTORS associated ";
                $report .= "with VECTOR nr. $number ($lcname)<br>"; 
            } 
            elsif ($entry->{vector} != $number) {
                $report .= "WARNING! mis-match of existing SEQUENCEVECTORS ";
                $report .= "vector nr. $entry->{vector} and template nr. $number<br>";
            }
            else {
                $report .= "$name associated with VECTOR $lcname<BR>";
            }
        } # next table entry
 
# get the Cloning Vector table; go through all entries and collect the
    # vector names in lc; find reference in mastertable; 

        my $cvector = $organisms->spawn('CLONINGVECTORS',$database);
        $cvector->build(1);
        $entries = $cvector->{'hashrefs'};
        $report .= "<h4>Testing $database\.CLONINGVECTORS</h4>";
        foreach my $entry (@$entries) {
            my $name = $entry->{name};
            my $lcname = lc($name);
        # find name in master vector table
            my $number = $vector->associate('vector',$lcname,'template');
            if (!$number) {
                $vector->counter('template',$lcname); # add new entry to VECTORS
                $report .= "Vector template $lcname added to VECTORS<br>";   
                $number = $vector->associate('vector',$lcname,'template'); # get new number
            }
            if (!$entry->{vector}) {
                $cvector->update('vector',$number,'name',$name);
                $report .= "$name in CLONINGVECTORS associated ";
                $report .= "with VECTOR nr. $number ($lcname)<br>"; 
            }
            elsif ($entry->{vector} != $number) {
                $report .= "WARNING! mis-match of existing CLONINGVECTORS ";
                $report .= "vector nr. $entry->{vector} and template nr. $number<br>";
            }
            else {
                $report .= "$name associated with VECTOR $lcname<BR>";
            }
        } # next table entry
    } # next database

    return $report; 
}
