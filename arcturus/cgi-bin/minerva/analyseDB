#!/usr/local/bin/perl

use strict;

use WrapMySQL;
use CGI;

my $cgi = new CGI;

print $cgi->header();

print $cgi->start_html(-title => 'Database Analyser',
		       -bgcolor => '#FFFFFF');

my $debug = $cgi->param('debug');

my $instance = $cgi->param('instance');
my $database = $cgi->param('database');
my $table = $cgi->param('table');

if (defined($instance)) {
    print $cgi->h1("Database Analyser: $instance");
} else {
    print $cgi->h1("Database Analyser");
    &showAllInstances($cgi);
    exit(0);
}

my $dbh = WrapMySQL->connect($instance, 'read');

&db_die("Unable to connect to instance $instance") unless $dbh;

if (!defined($database)) {
    &showAllDatabases($cgi, $dbh, $instance);
    exit(0);
}

if(defined($table)) {
    &showTable($cgi, $dbh, $instance, $database, $table);
} else {
    &showDatabase($cgi, $dbh, $instance, $database);
}

$dbh->disconnect();

print $cgi->end_html, "\n";

exit(0);

sub showAllInstances {
    my $cgi = shift;

    my $scriptname = $cgi->script_name;

    my @allinstances = ('babel.prod', 'babel.dev', 'babel.test',
			'pcs3.prod',  'pcs3.dev',  'pcs3.test');

    print $cgi->h2("Select an instance");

    print "<UL>\n";

    foreach my $instance (@allinstances) {
	print "<LI><A HREF=\"$scriptname?instance=$instance\">$instance</A>\n<P>\n";
    }

    print "</UL>\n";

    print $cgi->end_html, "\n";
}

sub showAllDatabases {
    my ($cgi, $dbh, $instance, $junk) = @_;

    my $scriptname = $cgi->script_name;

    print $cgi->h2("Select a database");

    print "<UL>\n";

    my $query = 'SHOW DATABASES';

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    $sth->execute();
    &db_die("execute($query) failed");

    while (my @ary = $sth->fetchrow_array()) {
	my ($database, $junk) = @ary;

	my $nTables = &countTables($dbh, $database);

	my $nContigs = &countContigs($dbh, $database);

	if (defined($nTables)) {
	    if ($nTables > 0) {
		$nTables = "($nTables table" . ($nTables > 1 ? 's' : '');
	    } else {
		$nTables = "(no tables";
	    }
	    if ($nContigs > 0) {
		$nTables .= ", $nContigs contigs)";
	    } else {
		$nTables .= ")";
	    }
	} else {
	    $nTables = "(cannot query)";
	}

	print "<LI><A HREF=\"$scriptname?instance=$instance&database=$database\">$database";
	print "</A> <EM>$nTables</EM><P>\n";
    }

    print "</UL>\n";

    $sth->finish();
    &db_die("finish($query) failed");
}

sub countTables {
    my ($dbh, $database, $junk) = @_;

    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	return undef;
    } else {
	$query = 'SHOW TABLES';

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my $nTables = 0;

	while (my @ary = $sth->fetchrow_array()) {
	    my ($tablename, $junk) = @ary;
	    $nTables++;
	}

	$sth->finish();
	&db_die("finish($query) failed");

	return $nTables;
    }
}

sub countContigs {
    my ($dbh, $database, $junk) = @_;

    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	return undef;
    } else {
	$query = 'select count(*) from CONTIG';

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();

	if ($DBI::err) {
	    $sth->finish();
	    return 0;
	}

	my $nContigs = 0;

	while (my @ary = $sth->fetchrow_array()) {
	    my ($nContigs, $junk) = @ary;
	}

	$sth->finish();
	&db_die("finish($query) failed");

	return $nContigs;
    }
}

sub showDatabase {
    my ($cgi, $dbh, $instance, $database, $junk) = @_;

    my $unknown = '<EM>(unknown)</EM>';

    my $scriptname = $cgi->script_name;

    my $scriptlink = "$scriptname?instance=$instance&database=$database";
	
    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	print "UNABLE TO USE $database: $DBI::errstr\n";
    } else {
	print $cgi->h2("Database: $database"), "\n";

	print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

	print "<TR BGCOLOR=\"#FFCC00\">\n";
	print "<TH ALIGN=\"LEFT\">Table</TH>\n";
	print "<TH ALIGN=\"LEFT\">Rows</TH>\n";
	print "<TH ALIGN=\"LEFT\">Created</TH>\n";
	print "<TH ALIGN=\"LEFT\">Updated</TH>\n";
	print "</TR>\n";

	$query = 'SHOW TABLES';

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my @alltables;

	while (my @ary = $sth->fetchrow_array()) {
	    my ($tablename, $junk) = @ary;
	    push @alltables, $tablename;
	}

	$sth->finish();
	&db_die("finish($query) failed");

	foreach my $tablename (@alltables) {
	    my $metadata = &getTableMetadata($dbh, $tablename);

	    my $rowcount = defined($metadata->{'Rows'}) ? $metadata->{'Rows'} : $unknown;
	    my $created  = defined($metadata->{'Create_time'}) ? $metadata->{'Create_time'} : $unknown;
	    my $updated  = defined($metadata->{'Update_time'}) ? $metadata->{'Update_time'} : $unknown;

	    my $tabletype = $metadata->{'Type'};

	    my $isInnoDB = $tabletype =~ /InnoDB/;

	    my $tr = $isInnoDB ? "<TR BGCOLOR=\"#99FF99\">" : "<TR>";

	    my $scriptlink = "$scriptname?instance=$instance&database=$database&table=$tablename";
	    printf "$tr\n<TD>";
	    print "<A HREF=\"$scriptlink\">$tablename</A></TD>\n";
	    print "<TD>$rowcount</TD>\n";
	    print "<TD>$created</TD>\n";
	    print "<TD>$updated</TD>\n";
	    print "</TR>\n";
	}
    }

    print "</TABLE>\n";
}

sub showTable {
    my ($cgi, $dbh, $instance, $database, $tablelist, $junk) = @_;

    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	print "UNABLE TO USE $database: $DBI::errstr</TD>\n</TR>\n";
    } else {
	my $showdescription = $cgi->param('describetable');
	my $showstatus = $cgi->param('tablestatus');

	if (!defined($showdescription) && !defined($showstatus)) {
	    $showdescription = 1;
	    $showstatus = 1;
	}

	$showdescription = 0 unless defined($showdescription);
	$showstatus = 0 unless defined($showstatus);

	my @tables = split(/,/, $tablelist);

	foreach my $table (sort @tables) {
	    &showTableDescription($cgi, $dbh, $instance, $database, $table)
		if $showdescription;

	    &showTableStatus($cgi, $dbh, $instance, $database, $table)
		if $showstatus;
	}
    }
}

sub showTableDescription {
    my ($cgi, $dbh, $instance, $database, $table, $junk) = @_;

    print $cgi->h2("Table description for $database.$table");
	
    my $query = "DESCRIBE $table";

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    $sth->execute();
    &db_die("execute($query) failed");

    my @colnames = @{$sth->{NAME}};

    print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

    print "<TR BGCOLOR=\"#FFCC00\">\n";

    foreach my $hdr (@colnames) {
	print "<TH ALIGN=\"LEFT\">$hdr</TH>\n";
    }

    print "</TR>\n";

    while (my @ary = $sth->fetchrow_array()) {
	print "<TR>\n";
	foreach my $item (@ary) {
	    print "<TD>", ((defined($item) && $item ne "") ? $item : "&nbsp;"), "</TD>\n";
	}
	    print "</TR>\n";
    }
    
    $sth->finish();

    print "</TABLE>\n";
}

sub showTableStatus {
    my ($cgi, $dbh, $instance, $database, $table, $junk) = @_;

    print $cgi->h2("Table status for $database.$table");

    my $query = "SHOW TABLE STATUS LIKE '$table'";

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");
    
    $sth->execute();
    &db_die("execute($query) failed");

    my @values = $sth->fetchrow_array();

    my @colnames = @{$sth->{NAME}};

    print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

    while (my $colname = shift @colnames) {
	my $colvalue = shift @values;
	
	next if ($colname eq 'Name');
	
	$colvalue = "&nbsp;" if (!defined($colvalue) || $colvalue =~ /^\s*$/);

	my $tr;

	if ($colname eq 'Type') {
	    $tr = "<TR BGCOLOR=\"" . (($colvalue eq 'InnoDB') ? '#99FF99' : '#FFCC00') . "\">";
	} else {
	    $tr = '<TR>';
	}

	print $tr;
	print "\n<TD><STRONG>$colname</STRONG></TD>\n";
	print "<TD>$colvalue</TD></TR>\n";
    }
    
    $sth->finish();
    
    print "</TABLE>\n";
}

sub getTableMetadata {
    my ($dbh, $table, $junk) = @_;

    my $metadata = {};

    my $query = "SHOW TABLE STATUS LIKE '$table'";

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    $sth->execute();
    &db_die("execute($query) failed");

    my @values = $sth->fetchrow_array();

    my @colnames = @{$sth->{NAME}};

    while (my $colname = shift @colnames) {
	my $colvalue = shift @values;
	$metadata->{$colname} = $colvalue;
    }

    $sth->finish();

    return $metadata;
}

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg: $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}
