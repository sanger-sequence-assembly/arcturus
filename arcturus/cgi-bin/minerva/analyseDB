#!/usr/local/bin/perl

use WrapMySQL;
use CGI;

$cgi = new CGI;

print $cgi->header();

print $cgi->start_html(-title => 'Database Analyser',
		       -bgcolor => '#FFFFFF');

$debug = $cgi->param('debug');

$instance = $cgi->param('instance');
$database = $cgi->param('database');
$table = $cgi->param('table');

if (defined($instance)) {
    print $cgi->h1("Database Analyser: $instance");
} else {
    print $cgi->h1("Database Analyser");
    &showAllInstances($cgi);
    exit(0);
}

$dbh = WrapMySQL->connect($instance, 'read');

&db_die("Unable to connect to instance $instance") unless $dbh;

if (!defined($database)) {
    &showAllDatabases($cgi, $dbh, $instance);
    exit(0);
}

if(defined($table)) {
    &showTable($cgi, $dbh, $instance, $database, $table);
} else {
    &showDatabase($cgi, $dbh, $instance, $database);
}

$dbh->disconnect();

print $cgi->end_html, "\n";

exit(0);

sub showAllInstances {
    my $cgi = shift;

    my $scriptname = $cgi->script_name;

    my @allinstances = ('babel.prod', 'babel.dev', 'babel.test',
			'pcs3.prod',  'pcs3.dev',  'pcs3.test');

    print $cgi->h2("Select an instance");

    print "<UL>\n";

    foreach my $instance (@allinstances) {
	print "<LI><A HREF=\"$scriptname?instance=$instance\">$instance</A>\n<P>\n";
    }

    print "</UL>\n";

    print $cgi->end_html, "\n";
}

sub showAllDatabases {
    my ($cgi, $dbh, $instance, $junk) = @_;

    my $scriptname = $cgi->script_name;

    print $cgi->h2("Select a database");

    print "<UL>\n";

    my $query = 'SHOW DATABASES';

    my $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed");

    $sth->execute();
    &db_die("execute($query) failed");

    while (my @ary = $sth->fetchrow_array()) {
	my ($database, $junk) = @ary;

	my $nTables = &countTables($dbh, $database);

	if (defined($nTables)) {
	    if ($nTables > 0) {
		$nTables = "($nTables table" . ($nTables > 1 ? 's' : '') . ")";
	    } else {
		$nTables = "(no tables)";
	    }
	} else {
	    $nTables = "(cannot query)";
	}

	print "<LI><A HREF=\"$scriptname?instance=$instance&database=$database\">$database";
	print "</A> <EM>$nTables</EM><P>\n";
    }

    print "</UL>\n";

    $sth->finish();
    &db_die("finish($query) failed");
}

sub countTables {
    my ($dbh, $database, $junk) = @_;

    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	return undef;
    } else {
	$query = 'SHOW TABLES';

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my $nTables = 0;

	while (@ary = $sth->fetchrow_array()) {
	    ($tablename, $junk) = @ary;
	    $nTables++;
	}

	$sth->finish();
	&db_die("finish($query) failed");

	return $nTables;
    }
}

sub showDatabase {
    my ($cgi, $dbh, $instance, $database, $junk) = @_;

    my $scriptname = $cgi->script_name;

    my $scriptlink = "$scriptname?instance=$instance&database=$database";
	
    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	print "UNABLE TO USE $database: $DBI::errstr\n";
    } else {
	print $cgi->h2("Database: $database"), "\n";

	print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

	print "<TR BGCOLOR=\"#FFCC00\">\n";
	print "<TH ALIGN=\"LEFT\">Table</TH>\n";
	print "<TH ALIGN=\"LEFT\">Rows</TH>\n";
	print "</TR>\n";

	$query = 'SHOW TABLES';

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my @alltables;

	while (@ary = $sth->fetchrow_array()) {
	    ($tablename, $junk) = @ary;
	    push @alltables, $tablename;
	}

	$sth->finish();
	&db_die("finish($query) failed");

	foreach $tablename (@alltables) {
	    $query = 'SELECT COUNT(*) FROM ' . $tablename;

	    $sth = $dbh->prepare($query);
	    &db_die("prepare($query) failed");

	    $sth->execute();
	    &db_die("execute($query) failed");

	    while (@ary = $sth->fetchrow_array()) {
		($rowcount, $junk) = @ary;
		$scriptlink = "$scriptname?instance=$instance&database=$database&table=$tablename";
		printf "<TR>\n<TD>";
		print "<A HREF=\"$scriptlink\">$tablename</A></TD><TD>$rowcount</TD>\n</TR>\n";
	    }
	    
	    $sth->finish();
	    &db_die("finish($query) failed");
	}
    }

    print "</TABLE>\n";
}

sub showTable {
    my ($cgi, $dbh, $instance, $database, $table, $junk) = @_;

    my $query = "USE $database";

    $dbh->do($query);

    if ($DBI::err) {
	print "UNABLE TO USE $database: $DBI::errstr</TD>\n</TR>\n";
    } else {
	print $cgi->h2("Table description for $database.$table");
	
	$query = "DESCRIBE $table";

	my $sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my @colnames = @{$sth->{NAME}};

	print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

	print "<TR BGCOLOR=\"#FFCC00\">\n";

	foreach $hdr (@colnames) {
	    print "<TH ALIGN=\"LEFT\">$hdr</TH>\n";
	}

	print "</TR>\n";

	while (@ary = $sth->fetchrow_array()) {
	    print "<TR>\n";
	    foreach $item (@ary) {
		print "<TD>", ((defined($item) && $item ne "") ? $item : "&nbsp;"), "</TD>\n";
	    }
	    print "</TR>\n";
	}

	$sth->finish();

	print "</TABLE>\n";

	print $cgi->h2("Table status for $database.$table");

	$query = "SHOW TABLE STATUS LIKE '$table'";

	$sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");

	$sth->execute();
	&db_die("execute($query) failed");

	my @values = $sth->fetchrow_array();

	my @colnames = @{$sth->{NAME}};

	print "<TABLE BORDER=3 CELLPADDING=2 WIDTH=\"100%\">\n";

	while (my $colname = shift @colnames) {
	    my $colvalue = shift @values;

	    next if ($colname eq 'Name');

	    $colvalue = "&nbsp;" if (!defined($colvalue) || $colvalue =~ /^\s*$/);

	    print "<TR", ($colname eq 'Type' ? ' BGCOLOR="#FFCC00"' : ''), ">";
	    print "\n<TD><STRONG>$colname</STRONG></TD>\n";
	    print "<TD>$colvalue</TD></TR>\n";
	}

	$sth->finish();

	print "</TABLE>\n";
    }
}

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg: $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}
