#!/usr/local/bin/perl -w

#############################################################################
# Create a new ARCTURUS Assembly Database on the current server
#############################################################################

use strict; # Constraint variables declaration before using them

use GateKeeper; 

use CreateArcturus;

##############################################################################
# get configuration data, open CGI and MySQL for database arcturus
##############################################################################

my $GateKeeper  = GateKeeper->new('mysql',{insistOnCGI => 1,  dieOnNoTable => 0});

my $cgi         = $GateKeeper->cgiHandle();

my ($void,$action,$option) = split '/', $GateKeeper->currentOptions(2);

my $dbh         = $GateKeeper->dbHandle('arcturus'); # the database handle

my $database    = $GateKeeper->lookup('database',0) || 'arcturus';

# opening the required database depends on the action

my $targetdb    = 'arcturus'; $targetdb = $database if ($action eq 'existing');

my $organisms   = $GateKeeper->dbHandle($targetdb,{returnTableHandle => 1});

my $arc_cgi_dir = $GateKeeper->lookup("ARC_CGI_DIR");

my $page = $GateKeeper->GUI("database maintenance and updates",{doTransport => 0});

my $script = $GateKeeper->currentScript;
my $csroot = $GateKeeper->currentScriptRoot;

###############################################################################
# Test contents of the common database (always)
###############################################################################

# strategy: always test the contents of the common database first

# case: arcturus cdb does not exist (is completely empty): default create from scratch
# case: arcturus cdb does exist but is incomplete: default to arebuild
# case: arcturus cdb exists and is complete, only then allow other functions

my $inventory;
undef my @tables; # tables present
undef my @missed; # tables missing
undef my @extras; # tables in common which should not be there
my $count = 0;
undef my %tablecount;
undef my %redefined;

if ($dbh->do("SHOW TABLES FROM arcturus LIKE 'INVENTORY'") == 0) {
# the inventory table is missing; signal only this table
    push @missed,'INVENTORY';
    $count++;
}

else {
# read the common tables from INVENTORY
    $inventory = $organisms->spawn('INVENTORY','arcturus',1);
    my $hashes = $inventory->associate('hashrefs','c','domain');
    foreach my $hash (@$hashes) {
        my $tablename = $hash->{tablename};
        $tablecount{$tablename} = 1;
    }
# get list of required tables
    @tables = keys %tablecount;
# compare with the existing tables in common database arcturus    
    my $sth = $dbh->prepare("SHOW TABLES");
    if ($sth->execute()) {
        while (my $table = $sth->fetchrow_array()) {
            $tablecount{$table}--; # i.e. on table found set to zero
            $count++;
	}
    }
# now determine if there are any missing or extra tables
    $csroot =~ s/cgi-bin/lib/; # for modules
    foreach my $table (keys %tablecount) {
        push @missed, $table if ($tablecount{$table} > 0);
        push @extras, $table if ($tablecount{$table} < 0);
# test the table definition (if the table exists)
        if (!$tablecount{$table}) {
            my $ArcturusTable = $organisms->spawn($table,'arcturus',0,0);
            my $diagnosis = diagnose($ArcturusTable,$csroot);
            $redefined{$table} = $diagnosis if $diagnosis;
        }
    }
}

# apply options filter based on contents of common database

if (@tables == 0) {
    $action = 'arcturus'; # override to creation of common database
}
elsif (@tables > 0 && (@missed > 0 || keys(%redefined)) || $action eq 'arcturus') {
    $action = 'arebuild'; # override to (re)install common database table(s)
}

##############################################################################
# database = database to act on
# table    = table to act on    | e.g. all, none (for overview)
# option   = what to do         | e.g. rebuild, clear, create
##############################################################################

my $db_manager = $GateKeeper->lookup("db_manager");      
my $BADGERDIR  = $GateKeeper->lookup("BADGERDIR");
my $arctmpdir  = $GateKeeper->lookup('ARC_TMP_DIR');

my $harmonize = 0;

my $purple = 'E2E2FF';
my $yellow = 'yellow';
my $orange = 'FFCA88';

##############################################################################
# MAIN
##############################################################################

my $font = "size=6 face='sans-serif'"; my $efnt = "</font>";

my $confirm = $GateKeeper->lookup('confirm',0) || '';
    
$page->message("! There are foreign tables @extras found in the common database",$yellow,$font) if @extras; 
$page->message("! There are tables missing in the common database",$yellow,$font) if @missed;

#-----------------------------------------------------------------------------
# build the arcturus database where none exists
#-----------------------------------------------------------------------------

if ($action eq 'arcturus') {

    if (!$confirm || $confirm ne 'CONFIRM') {
        $page->form("$script/arcturus");
        $page->space(6);
        $page->add("Create the ARCTURUS common area tables",0,0,$font);
        $page->space(1);
        my $text = "Creating a new ARCTURUS instance requires the<br>highest ";
        $text .= "level of access permission";
        $page->space(1);
        $page->add($text,0,0,$font);
        $page->space(3);
        $page->confirmbuttonbar(0,0);
        $page->form(0);
    }
    elsif ($GateKeeper->authorize(32768,{testSession => 0, makeSession => 0})) {
        $page->space(6);
        $page->add("Create the ARCTURUS common area tables",0,0,$font);
        $page->space(3);
        my $dbh = $GateKeeper->dbHandle('arcturus');
        if (my $created = &create_common($dbh,'all')) {
            my $server = $GateKeeper->currentServer;
            my $text = "DONE!<br>$created tables initialized<br>in the common database<br>on $server";
            $page->add($text,0,0,$font);
            $page->space(2);
            $page->message('IMPORTANT !',$yellow,$font);
            $page->space(1);
            $text = "The operations password has now to be updated";
            $page->add($text,0,0,$font);
            $page->space(2);
            my $link = "$arc_cgi_dir/umanager/pwupdate/getform\?GUI=1";
            $page->linkbutton('CONTINUE',$link);
        }
        else {
            $page->errorbox("FAILED !",0,0);
            $page->space(3);
            $page->add("Please contact $db_manager",0,0,$font);
        }
    }
    else {
        $page->space(6);
        $page->errorbox("Operation Refused!",0,0);
        my $error = $GateKeeper->{error};
        $page->space(1);
        $page->add($error,0,0,$font);
        $page->space(3);
        $page->add("Please contact $db_manager",0,0,$font);
    }
    $page->flush;
    $GateKeeper->disconnect;
}

#-----------------------------------------------------------------------------
# rebuild an existing or missing common database table
#-----------------------------------------------------------------------------

elsif ($action eq 'arebuild') {

    if (!$option || $option eq 'getform') {

        $page->form("$script/arebuild/process");
        $page->space(1);
        $page->add("Rebuild a table in the Common Database",0,0,$font);
        $page->space(2);
        $page->message("There are missing tables !",$yellow,$font) if @missed;
        $page->message("There are changed tables !",$yellow,$font) if keys(%redefined);
        $page->space(1);
# add list of contents
        my $preset;
        my $existlist = "<TABLE>";
        foreach my $table (sort keys %tablecount) {
	    $existlist .= "<TR><TH ALIGN=LEFT>$table</TH><TH>:</TH>";
            if ($tablecount{$table} > 0) { # table==1 for missing tables
                $existlist .= "<TD bgcolor='orange'>MISSING</TD></TR>"; 
                $preset = $table if !$preset;
            }
            elsif ($tablecount{$table} < 0) { 
                $existlist .= "<TD bgcolor=$yellow>FOREIGN</TD></TR>"; 
            }
            elsif ($redefined{$table}) {
                $existlist .= "<TD bgcolor=$yellow>DEFINITION HAS CHANGED</TD></TR>"; 
                $preset = $table if !$preset;
            }
            else {
                $existlist .= "<TD>found</TD></TR>";
            }
        }
        $existlist .= "</TABLE>";
        $page->add("$existlist",0,0);
        $page->space(1);
# generate a select form for reinitialising of a table in the common database
        my $message = "changing anything in the common tables\nrequires database access priviledges";
        $page->message($message,$purple,"size = +1",1);
        $page->space(1);
        $page->message("Select a table to rebuild",'white',"size = +1");
        $page->choicelist('tablename',\@tables,0,0,$preset);
        $page->space(2);
        $page->submitbuttonbar(1); # include reset button
        $page->ingestCGI;
        $page->form(0);
    }

    elsif ($option eq 'process') {
# generate confirm form for rebuild; test userid and password
        my $tablename = $GateKeeper->lookup('tablename');
        $page->form("$script/arebuild/process");
        $page->ingestCGI; # put here to ensure possible password info is kept
        $page->space(3);
        $page->add("Re-initialize ARCTURUS table $tablename",0,0,$font);
        my %options = (testSession => 0, makeSession => 0, noConfirm => 'Continue',
                       returnPath => "/arebuild/process");
        my $skipAuthorize = 0; 
        $skipAuthorize = 1 if $tablecount{$tablename}; # table is missing hence install
        $skipAuthorize = 0 if ($tablename =~ /\bUSERS|ORGANISMS\b/); # but not these

        my $error;
        if ($cgi->{und_error}) {
            $error = "Please define every input field ($cgi->{und_error})";
        }
        elsif (!$skipAuthorize && !$GateKeeper->authorize(2048,\%options)) {
            $error = $GateKeeper->{error};
        }
# deal with tables to be altered
        elsif ($redefined{$tablename}) {
            $page->space(2);            
            my $message = "Table $tablename will be altered to conform to the current template";
            $page->message($message,$yellow,"size = +1",1);
            $page->space(2);
            $page->message($redefined{$tablename},$purple,0,1);
            $page->space(2);
            my $return = "$script/arebuild/getform";
            $return .= "\?database=$database" if $database;
            if (!$confirm || $confirm ne 'ALTER') {
                $page->confirmbuttonbar($return); # include reject button
                $page->substitute('CONFIRM',"ALTER");
            }
            elsif ($organisms->query($redefined{$tablename})) {
                $page->message('DONE','yellow',"size = +1",1);
                $page->space(2);
                $page->linkbutton('CONTINUE',$return);
            }
	    else {
                $page->message('FAILED !',$orange,"size = +1",1);
                $page->space(2);
                $page->linkbutton('CONTINUE',$return);
            }
        }
# deal with tables to rebuild
        elsif (!$confirm || $confirm ne 'CONFIRM') {
            my $message = "All data in table $tablename will be lost!\n";
            $message .= "Be sure before you continue";
            $message = "Table $tablename will be created" if $tablecount{$tablename};
            $page->space(2);
            $page->message($message,$yellow,"size = +1",1);
            my $return = "$script/arebuild/getform";
            $page->space(2);
            $page->confirmbuttonbar($return); # include reject button
        }
        elsif ($tablename) {
            $page->space(2);
            if (my $created = &create_common($dbh,lc($tablename),0)) {
                $page->message('DONE',$purple,$font);
                $page->space(1);
                $page->add("$created tables created in ARCTURUS common database",0,0,"size = +1");
                $page->space(2);
                if ($tablename eq 'USERS') {
                    $page->message('IMPORTANT',$yellow,$font);
                    $page->space(1);
                    my $text = "The operations password has now to be initialized";
                    $page->add($text,0,0,$font);
                    $page->space(2);
                    my $data = "userid=oper\&identify=oper\&password=arcturus\&GUI=1";
                    my $link = "$arc_cgi_dir/umanager/pwupdate/getdata\?$data";
                    $page->linkbutton('CONTINUE',$link);
# or use a copy from other server? which one? entry in umanager
                }
	    }
            else {
                $page->message('FAILED !','orange',$font);
                $page->space(1);
                $page->message("Table $tablename could not be created",$yellow,"size = +1");
                $page->space(3);
                $page->add("Please contact $db_manager",0,0,$font);
            }
        }
        else {
            $page->errorbox("<h3>undefined table: $tablename<h3>"); # something really fishy
        }
        $page->form(0);
        $page->message($error,$yellow,"size = +1",1) if $error;
    }
    else {
        $page->errorbox("Invalid option $option for $script/$action",0,0,$yellow);
    }
    $page->flush;
    $GateKeeper->disconnect;
}

#*********************************************************************************************************
#*********************************************************************************************************
#
# The next section creates a new organism database
#
#*********************************************************************************************************
#*********************************************************************************************************
 
elsif ($action eq 'organism') {

    $page->space(1);
    $page->add("Create a new ARCTURUS Organism Database",0,0,$font);
    $page->space(1);

    if (!$option || $option eq 'getform') {

        my $text = "Use this form to create a new ARCTURUS organism database. ";
        $text .= "All sequence and assembly data for the named organism are to ";
        $text .= "be kept in the new database.\n";
        $text .= "Please take care to choose an appropriate database name, ";
        $text .= "preferably one under which the organism is generally known (e.g. ";
        $text .= "STyphi). Its name is an immutable attribute of the new database.\n\n";
        $text .= "Please try to provide as much information as is appropriate ";
        $text .= "for the various data fields. If anyhow possible adhere to standard ";
        $text .= "naming schemes; some fields can be modified afterwards, if needed.\n\n";
        $text .= "Creating a new database requires that you are registered as ";
        $text .= "ARCTURUS user and have the highest level of access priviledges.\n\n";
        $page->message($text,0,0,0,"70%");

# build the form

        $page->form("$script/organism/initialize");
        $page->add(&form);
        $page->preload('cgi_input',$cgi,1);
        $page->ingestCGI(1,'session'); # if any
        $page->space(1);
        $page->submitbuttonbar(1);
        $page->space(1);
        $page->form(0);
    }

    elsif ($option eq 'initialize') {

        $page->form("$script/organism/initialize");

        my $dbasename = $GateKeeper->lookup('dbasename'); # the database to be created

        my %options = (returnPath => '/organism/initialize', noConfirm => 'Continue');

        undef my $error;
        if ($cgi->{und_error}) {
            $error = "Please define a valid database name";
        }
        elsif ($dbasename =~ /^new|old|exist$/i) {
            $error = "Organism database name \"$dbasename\" cannot be used";
        }
        elsif ($organisms->associate('hashref',$dbasename,'dbasename')) {
            $error = "Organism database $dbasename already exists";
        }
        elsif (!$GateKeeper->authorize(32768, \%options)) {
            $error = $GateKeeper->{error};
        }
        elsif (!$confirm || $confirm ne 'CONFIRM') {
# here is the substance: compose confirm form
            my $location = $GateKeeper->whereAmI;
            $page->message("The new database will be added to the $location",$yellow,"size = +1");
            $page->space(1);

            my @items = ('genus','species','serovar','strain','isolate','template','comment');

            my $summary = "<table>";
            $summary .= "<tr><th align=left>Database name</th><th>:</th><td>$dbasename</td></tr>";
            foreach my $item (@items) {
                my $value = $GateKeeper->lookup($item);
                $value = "UNDEFINED" if (!$value);
                $value =~ s/\<name\>/$dbasename/; # template  hacks
                $cgi->replace($item,$value) if ($item eq 'template');
                $value =~ s/\</&\#060/g; $value =~ s/\>/&\#062/g;
                $summary .= "<tr><th align=left>$item</th><th>:</th><td>$value</td></tr>";
            }
            $summary .= "</table>";
            $page->add($summary,0,0); # list summary
            $page->space(1);
            $page->ingestCGI;   # add current cgi valueas as hidden fields
            if ($summary =~ /UNDEFINED/) {
                my $message = "There are undefined items in the database descriptors\n";
                $message .= "Are you sure that they are left empty? If not, use the ";
                $message .= "RETURN button and complete the form, else confirm";
                $page->message($message,$purple,"size = +1",0,"70%");
                $page->space(1);
            }
            my $return = "$script/organism/getform";
            $return .= $cgi->postToGet;
            $page->ingestCGI;
            $page->confirmbuttonbar($return,0);
            $page->substitute('REJECT','RETURN');
	}

        else { # confirmed
            my $error = '';
            my $exists = 0;
# test for a possibly existing database
            my $hashes = $organisms->query("show databases");
            foreach my $hash (@$hashes) {
                if ($dbasename eq $hash->{Database}) {
                    $page->message("Organism database \"$dbasename\" already exists",$purple,'size = +1');
                    $page->space(1);
                    $exists = 1;
                }
            }
# test existing descriptions; only continue if absent
            if (!$organisms->associate('dbasename',$dbasename,'dbasename')) {
# create the database tables
                my $oentry = 0;
                if (!$exists) {
                    $organisms->do("create database $dbasename");
                    if ($organisms->query("show databases like \'$dbasename\'")) {
                        $page->message("Database $dbasename was CREATED",$purple,"size = +1");
                        $exists = 1;
                        $oentry = 1;
                    }
                }
# confirm creation and check that the database is empty
                if ($exists) {
                    my $count = 0;
                    my $userid = $GateKeeper->{USER};
                    $GateKeeper->focus({useDatabase => $dbasename});
#  find the tables in this directory; there should not be any!
# (this is to be sure that we do not accidently overwrite another
#  database in case the "use" command failed for whatever reason) 
                    if (($count = $organisms->query("show tables")) != 0) {
                        $count = @$count; # get the number of tables present
                        $page->message("Database $dbasename is not empty ($count)",$purple,'size = +1');
                        $page->space(1);
                    }
                    elsif (my $created = &create_organism($dbh,$dbasename,0,$userid,1)) {
# okay, the default db was indeed empty and the tables were created; now check each one
                        my $diagnosis = 'FAILED';
                        my $report = "<table>";
                        foreach my $table (sort @$created) {
                            $report .= "<TR><TD ALIGN=LEFT>$table</TD>";
                            if ($organisms->query("show tables from $dbasename like \"$table\"")) {
                                $report .= "<TD BGCOLOR=$yellow>created</TD>";
                                $diagnosis = "INCOMPLETE"; # for possible error message at end
                                $count++;
                            }
                            else {
                                $report .= "<TD BGCOLOR='FFC080'>FAILED</TD>";
                            }
                            $report .= "</TR>";
                        }
                        $report .= "</TABLE>";
                        $page->add($report,0,0);
                        my $message = "$count tables of database $dbasename initialized ";
                        $message .= "; status $diagnosis" if ($count != @$created);
                        $page->message($message,$purple,"size = +1");
                    }
# test the result 
                    if (!$count) {
                        $error = "Failed to create tables of database $dbasename";
		    }
                    elsif ($oentry || $GateKeeper->lookup('forced')) {
                        &addEntry($dbasename); # add record to ORGANISMS
                        $page->message("Organism database $dbasename added to inventory",$purple,"size = +1");
                        $harmonize = 1;
                    }
                    else {
                        $page->message("Database $dbasename NOT added to inventory",'FFC088',"size = +1");
                        $page->space(1);
                        my $message = "You can force the description of $dbasename to be ";
                        $message .= "entered by clicking on continue";
                        $page->message($message,0,0,0,'50%',1);
                        $page->ingestCGI;
                        $page->hidden('forced','1');
                        $page->confirmbuttonbar;
                        $page->substitute('CONFIRM','FORCE ACCEPT');
                     }
                }
                else {
                    $error = "Failed to create database $dbasename";
                }
	    }
            else {
                $error = "Description of organism database \"$dbasename\" already exists";
	    }
	}

        $page->errorbox($error) if ($error);
        $page->form(0);
    }

    else {
        $page->errorbox("Invalid option $option for $script/$action",0,0,$orange); # light orange
    }

    $page->flush;
    $GateKeeper->disconnect;

# prime environment via GateKeeper for harmonize script

    $csroot = $GateKeeper->prepareFork('harmonize');
    system ("$csroot/harmonize organisms copy >> $arctmpdir/harmonize.log") if $harmonize;     
}

#*********************************************************************************************************
#*********************************************************************************************************
#
# The next section recreates or rebuilds a table in an existing organism database
#
#*********************************************************************************************************
#*********************************************************************************************************

elsif ($action eq 'existing' && $database ne 'arcturus') {
 
    $option = '' if !$option;

# always do a test on the current database

    $GateKeeper->focus({useDatabase => $database});
# read the tables from INVENTORY
    my $hashes = $inventory->associate('hashrefs','o','domain');
    undef %tablecount;
    foreach my $hash (@$hashes) {
        my $tablename = $hash->{tablename};
        $tablecount{$tablename} = 1;
    }
# add the history table to the list
    my $historytable = 'HISTORY'.uc($database);
    $tablecount{$historytable} = 1;

# get a list of required tables

    @tables = keys %tablecount;
# compare with the existing tables in the organism database    
    my $sth = $dbh->prepare("SHOW TABLES");
    if ($sth->execute()) {
        while (my $table = $sth->fetchrow_array()) {
            $tablecount{$table}--; # i.e. on table found set to zero
	}
    }

# list contents and determine if there are any missing or extra tables

# $tablecount{READS}++;
# $tablecount{PENDING}++;
# $tablecount{EXTRA}--; push @tables,'EXTRA';

    $count = 0;
    my $half = int(@tables/2 + 0.5);
    undef @missed;
    undef @extras;
# test table definition against current one
    undef %redefined;
    foreach my $table (@tables) {
        if (!$tablecount{$table}) {
            my $ArcturusTable = $organisms->spawn($table,$database,0,0);
            my $diagnosis = diagnose($ArcturusTable, $csroot);
            $redefined{$table} = $diagnosis if $diagnosis;
        }
    }

    my $contents = "<TABLE><TR><TD VALIGN=TOP> <TABLE>";
    foreach my $table (sort keys %tablecount) {
        if ($count++ == $half) {
            $contents .= "</TABLE> </TD><TD WIDTH=10%>&nbsp</TD><TD VALIGN=TOP> <TABLE>";
        }
        $contents .= "<TR><TD>$table</TD>";
        if ($tablecount{$table} > 0) {
            $contents .= "<TD bgcolor='orange'>MISSING</TD>";
            push @missed, $table;
        }
        elsif ($tablecount{$table} < 0) {
            $contents .= "<TD bgcolor=$purple>FOREIGN</TD>";
            push @extras, $table;
        }
        elsif ($redefined{$table}) {
            $contents .= "<TD bgcolor=$yellow nowrap>CHANGED FORMAT</TD>";
        }
        else {
            $contents .= "<TD>verified</TD>";
        }
        $contents .= "</TR>";
    }
    $contents .= "</TABLE> </TD></TR></TABLE>";

# signal anything unusual

    $page->space(1);
    if ($tablecount{$historytable}) {
        $page->message("! The history table $historytable is not found",$orange,$font);
        $page->space(1);
        $page->message("? Maybe you are accessing the wrong database",$yellow,$font);
        $page->space(1);
        $page->add($contents);
        $page->space(1);
        $page->message("Please contact $db_manager",$purple,$font);
    }
# signal extra tables
    elsif (@extras) {
        $page->message("! There are foreign tables found in database $database",'orange',$font);
        $page->space(1);
        $page->message("! The database may have been corrupted",$yellow,$font);
        $page->space(1);
        $page->add($contents);
        $page->space(1);
        $page->message("Please contact $db_manager",'white',$font);
    }
    elsif ($option eq 'overview' || $option eq 'getform' || (@missed && $option ne 'process')) {
        $page->space(1);
        $page->message("Overview of database $database",$purple,$font);
        $page->space(1);
        $page->add($contents);
        $page->space(1);
# generate a prompt to create or rebuild a table
# consider rebuilding a table only if all tables are present and there are no anomalies 
        if (@missed || $option eq 'getform') {
            $page->form("$script/existing/process");
            $page->ingestCGI;
            if (@missed == 1) {
                $page->hidden('tablename',$missed[0]);
                $page->message("Continue to create missing table $missed[0]",$purple,'size = +1');
                $page->confirmbuttonbar(0,0,'white');
                $page->substitute('CONFIRM',"CREATE $missed[0]");
            }
            elsif (@missed) {
                my $choices = $page->choicelist('tablename',\@missed,0,-1);
                $page->message("Select a table to create and continue: ",$purple,'size = +1',0,0,'CC');
                $page->substitute('CC',$choices);
                $page->confirmbuttonbar(0,0,'white');
                $page->substitute('CONFIRM',"CREATE");
            }
            else {
# here possibly special provision for HISTORY
                undef my $preset;
                if (my @altered = sort keys(%redefined)) {
                    $preset = $altered[0];
                }
                my $where = "domain = 'o' ";
                my $choices = $inventory->htmlMaskedOptions('tablename','where',$where,'tablename',0,0,$preset);
                $page->message("Select a table to rebuild: ",$purple,'size = +1',0,0,'CC');
                $page->substitute('CC',$choices);
                my $enforce = "<TABLE><TR><TD>Check <INPUT type=checkbox name='reinitialize'>";
                $enforce .= " to reinitialize protected tables</TD></TR></TABLE>";
                $page->add($enforce,0,1);
                $page->confirmbuttonbar(0,0,'white');
                $page->substitute('CONFIRM',"REBUILD");
            }
        }
    }

# create missing tables before doing anything else

    elsif ($option eq 'process' && @missed) {
        my $missed = join ' ',@missed;
        my $tablename = $GateKeeper->lookup('tablename');

        my $report = "Table $tablename will be created in the $database database...";
   
        $page->space(7);
        undef my $error;
        if ($cgi->{und_error}) {
            $error = "Please define all input fields: $cgi->{und_error}";
        }
        elsif (!$GateKeeper->authorize(8192,{returnPath => "/existing/process"})) {
            $error = $GateKeeper->{error};
        }
        elsif ($missed !~ /\b$tablename\b/) {
            $error = "Table $tablename is not missing ($missed)";
        }
        elsif ($confirm ne 'CONFIRM') {
            $page->form("$script/existing/process");
            $page->ingestCGI;
            $page->message($report,'white','size = +1');
            $page->space(2);
            $page->confirmbuttonbar;
        }
        else {
            my $user = $GateKeeper->{USER};
            my $created = &create_organism($dbh,$database,$tablename,$user,0);
            my $counted = @$created; # must equal 1
            if ($counted = 1 && $organisms->query("show tables from $database like '$tablename'")) {
                $report .= "... DONE";
                $page->message($report,'white','size = +1');
            }
            else {
                $report .= "... FAILED (count = $counted)";
                $page->message($report,$orange,'size = +1');
                $page->space(1);
                $page->message("Please contact $db_manager",'white',$font);
            }
        }
        $page->message($error,$orange,'size = +1') if $error;
    }

# here all tables exist in the database; only now consider to rebuild a table

    elsif ($option eq 'process') {
# rebuild a table in the database; get rebuild status from inventory table
        my $tablename = $GateKeeper->lookup('tablename');
        my $rebuild = $inventory->associate('rebuild',$tablename,'tablename');
        
# note: rebuild=0 for protected tables, only rebuild if empty or by user 'oper';
#       rebuild=1 for a dictonary table by a special script prcocessing READS;
#       rebuild=2 for an unprotected table;
#       rebuild=3 for re-loading from a data file (by special script)

        my $count = 0;
        if ($rebuild != 2 && $tablename) {
            my $table = $inventory->spawn($tablename,$database,0,0);
            $count = $table->counted if $table; # nr of lines or counts in counter table
            $rebuild = 0 if $GateKeeper->lookup('reinitialize',0);
        }

        my %options = (testSession => 0, makeSession => 0, #noConfirm => 'Continue',
                       returnPath => "/existing/process");    
    
        $page->space(7);
        undef my $error;
        if (!$tablename) {
            $error = "Please define a table name";
        }
        elsif ($cgi->{und_error}) {
            $error = "Please define all input fields: $cgi->{und_error}";
        }
# either alter the table
        elsif ($redefined{$tablename}) {
            $page->space(2);            
            my $message = "Table $tablename will be altered to conform to the current template";
            $page->message($message,$yellow,"size = +1",1);
            $page->space(2);
            $page->message($redefined{$tablename},$purple,0,1);
            $page->space(2);
            $options{noConfirm} = 'ALTER';
            my $return = "$script/existing/getform";
            $return .= $cgi->postToGet(0,'tablename','password','identify');
            if (!$confirm || $confirm ne 'ALTER') {
                $page->form("$script/existing/process");
                $page->confirmbuttonbar($return); # include reject button
                $page->substitute('CONFIRM',"ALTER");
                $page->ingestCGI;
            }
            elsif (!$GateKeeper->authorize(8192,\%options)) {
                $error = $GateKeeper->{error};
            }
            elsif ($organisms->query($redefined{$tablename})) {
                $page->message('DONE','yellow',"size = +1",1);
                $page->space(2);
                $page->linkbutton('CONTINUE',$return);
            }
	    else {
                $page->message('FAILED !',$orange,"size = +1",1);
                $page->space(2);
                $page->linkbutton('CONTINUE',$return);
            }
        }
# or rebuild the table
        else {
            my $report = "Table $database.$tablename will be rebuilt ...";
            if ($confirm ne "CONFIRM") {
                my $cbutton = 1;
                $page->message($report,$purple,'size = +1');
                $page->form("$script/existing/process");
                $page->space(1);
                if ($rebuild == 0 && $count > 0) {
# it is a protected table: rebuilding will loose all current data
                    my $warning = "The existing data in table $database.$tablename ";
                    $warning .= "($count) wil be completely lost";
                    $page->warningbox($warning);
                    $page->message("Be very sure before you continue!",$purple,'size = +1');
                }
                elsif ($rebuild == 1 && $count > 0) {
# it's a dictionary table
                    my $warning = "The existing data in table $database.$tablename ";
                    $warning .= "($count) will be rebuilt from READS table information";
                    my $report = updateCounters($organisms,$database,'READS',$tablename,0);
                    $page->add($report,0,0);
                    $cbutton = 0 if ($report =~ /no changes/i);
                }
                elsif ($rebuild == 2 && $count > 0) {
# it's an unprotected table which can be reinitialized
                    my $message = "Table $database.$tablename will be replaced by the latest version";
                    $page->message($message,$purple,'size = +1');
                }
                elsif ($rebuild == 3) {
# it's a table which can be rebuilt by processing a separate script
                    my $message = "The data in table $database.$tablename ";
                    $message .= "will be rebuilt using a special script";
                    $message .= "<br>The table is empty" if !$count;
                    $page->form("$arc_cgi_dir/tmanager/specify/$database/$tablename");
                    $page->message($message,$purple,'size = +1');
                }
                elsif ($tablename eq $historytable) {
# special case
                    my $warning = "All history information for database $database will be lost";
                    $page->warningbox($warning);
                    $page->message("Be very sure before you continue!",$purple,'size = +1');
                }
                elsif ($count == 0) {
# an empty table can always be rebuilt
		    $page->message("Table $database.$tablename is empty",$yellow,'size = +1');
                }
                $page->space(1);
                $page->ingestCGI();
                $page->confirmbuttonbar  if $cbutton;
            }

            else { # CONFIRM

                my $authorize = 4096; # default
                $authorize = 8192 if ($rebuild == 0 && $count > 0);
                if (!$GateKeeper->authorize($authorize, \%options)) {
                    $error = $GateKeeper->{error};
                    $report .= "... FAILED!";
                }
		elsif ($rebuild == 0 || $rebuild == 2 || !$count) {
                    my $identify = $GateKeeper->{USER};
                    my $level = 0; $level = 1 if ($identify eq 'oper');
                    my $created = &create_organism($dbh,$database,$tablename,$identify,$level);
                    my $counted = @$created;
                    my $query = "show tables from $database like '$tablename'";
                    if ($counted == 1 && $inventory->query($query)) {
                        $report .= "... DONE";
                    }
                    else {
                        $report .= "... FAILED! (counted = $counted)";
                        $error = "Table $tablename could not be created";
                    }
                }
                elsif ($rebuild == 1) {
                    my $identify = $GateKeeper->{USER};
                    my $update = &updateCounters ($organisms,$database,'READS',$tablename,$identify);
                    $page->message($report,$purple,'size = +1');
                    $page->space(1);
                    $page->add($update,0,0);
                    undef $report;
                }
                else {
                    $error = "Invalid usage of $script/existing/process";
                    $report .= "... FAILED! (rebuild = $rebuild)";
#$page->add($cgi->PrintVariables);
		}
                $page->message($report,$purple,'size = +1') if $report;
                $page->space(1);
	    }
        }
        $page->message($error,$orange,'size = +1') if $error;
    }

    $page->form(0);
    $page->flush;
    $GateKeeper->disconnect;
    exit 0;
}

elsif ($action eq 'existing') {

    $page->warningbox("Invalid or missing database $database in '$script/$action' ($database)",1);
    $page->flush;
    $GateKeeper->disconnect;
}

#*********************************************************************************************************
#*********************************************************************************************************
#
# The next section deals with editing of the description of an existing database
#
#*********************************************************************************************************
#*********************************************************************************************************

elsif ($action eq 'editor') {

    my $signame = $GateKeeper->lookup('signature_name');
    my $sigmail = $GateKeeper->lookup('signature_mail');
    $page->frameborder(80,5,'white',5); # overrides GUI
    $page->address($sigmail,$signame,2);
    $page->partition(2);
    $page->center(1);
    $page->add("ARCTURUS contents manager",0,0,'size=+1');
    $page->partition(1);
    $page->space(1);
    my $dbasename = $GateKeeper->lookup('database',0) || 'database';
    $page->add("Update organism $dbasename description",0,0,'size=+1');
    $page->space(2);

    $option = 'getform'  if (!$option); # default
    $option = 'editform' if ($option eq 'getform' && $database ne 'arcturus');

    my $error = '';
    my $harmonize = 0;
    my $nrdbases = $organisms->count;

    if ($nrdbases <= 0) {

        $error = "There are no organism databases";
    } 

    elsif ($option eq 'getform' && $nrdbases > 1) {

        $page->form("$arc_cgi_dir/create/editor/editform");
        my $dbases = $organisms->htmlTableColumn ('dbasename',{itemLink => 0, noHeader => 1});
        $page->add($dbases,0,0);

        my $list = "<TABLE><TR><TH>Select a database</TH><TD>:</TD>";
        my $dbaselist = $organisms->htmlOptions('dbasename','dbasename',0,0,0);
        $list .= "<TD>$dbaselist</TD></TR></TABLE>";
        $page->add($list,0,0);
        $page->submitbuttonbar();

    }

    elsif (($option eq 'getform' && $nrdbases == 1) || $option eq 'editform') {
    
        if ($option eq 'getform') {
            my $hash = $organisms->{hashrefs}->[0]; # the first entry (there is only one)
	    $database = $hash->{dbasename};
        }            
        $page->form("$script/editor/process");
        my $mask = '0122222000002000220'; # default
        my $session = $GateKeeper->lookup('session');
        $mask = '0122222000002000222' if ($session && $session =~ /\b(ejz|oper)\b/);
        my $editlist = $organisms->htmlEditRecord($database,'dbasename',0,$mask);
        if (!defined($editlist) || !$editlist) {
            $page->errorbox("No such Organism database: $database");

        }
        else {  
            $page->add($editlist,0,0);
#            $page->hidden('dbasename',$database);
            $page->ingestCGI();
            $page->space(1);
            $page->add("Complete changes and submit",0,0,'size=+1');
            $page->space(1);
            $page->submitbuttonbar();
        }
    }

    elsif ($option eq 'process') {

# the form is submitted for confirmation; test the user and password

        $database   = $GateKeeper->lookup('database'); # to test it's really defined
        my $confirm = $GateKeeper->lookup('confirm',0) || 0;

        undef my $error;
        if ($GateKeeper->cgiError(0)) {
            $error = "This function is invoked in an invalid manner";
        }
        elsif (!$GateKeeper->authorize(2<<14)) {
            $error = $GateKeeper->{error};
        }
        elsif (!$confirm) {
# generate a confirm form for changes
            my $cgihash = $cgi->{cgi_input};
            my ($changes,$report) = $organisms->cgiEditTable($cgihash,0);
            if (!$changes) {
                $page->messagebox($report);
                $page->space(1);
                $page->add("No changes specified",0,0,'size=+1 color="lightsteelblue"');
            }
            else {
                my $option = "$script/editor/process";
                $page->promptbox($report,$option,$script);
                $page->ingestCGI(); # transport current cgi input
                $page->form(0);
            }
	}
	elsif ($confirm eq 'CONFIRM') {
            undef my $report;
            my $cgihash = $cgi->{cgi_input};
            $report = $organisms->cgiEditTable($cgihash,1);
            $page->messagebox($report);
            $harmonize = 1;
	}
    }


    $page->errorbox("Operation Refused!<br>$error") if $error;

    $page->form(0);
    $page->flush;
    $GateKeeper->disconnect;

# prime environment via GateKeeper for harmonize script

    $csroot = $GateKeeper->prepareFork('harmonize');
    system ("$csroot/harmonize organisms copy >> $arctmpdir/harmonize.log") if $harmonize;     
} 

#*********************************************************************************************************
#*********************************************************************************************************

else {

    $page->warningbox("Invalid function $action for '$script' script",1);

    $page->flush;
    $GateKeeper->disconnect;
}

exit 0;

#############################################################################

sub addEntry {
# enter database descriptors into ORGANISMS table
    my $dbasename = shift;

    my $organisms = $GateKeeper->dbHandle('arcturus',{returnTableHandle => 1});
    my $userid    = $GateKeeper->currentUser;
    my $residence = $GateKeeper->currentResidence; # under CGI: "host:mysqlport:cgiport"

# add a line to ORGANISMS

    $organisms->newrow('dbasename',$dbasename);
    foreach my $item (@{$organisms->{columns}}) {
        my $cgivalue = $GateKeeper->lookup($item);
        if ($item ne 'dbasename' && defined($cgivalue)) {
            $organisms->update($item,$cgivalue);
        }
    }
    $organisms->update('creator',$userid);
    my $timestamp = $organisms->timestamp(0);
    my ($date, $time) = split /\s/, $organisms->timestamp(0);
    $organisms->update('date_created',$date);
# add residence information
    $organisms->update('residence',$residence);
# add (pack) attributes: first check if a template is defined
    my ($dflta,$dfltp);
    if (my $cgivalue = $GateKeeper->lookup('template')) {
# decode the default assembly name and project name
       ($dflta,$dfltp) = split /\<\w+\>/,$cgivalue;
#print "test dflta dfltp: |$dflta| |$dfltp|  (cgi: $cgivalue)<br>";
    }
    $dfltp = 'P' if !$dfltp; # default project name
    $dflta = uc($dbasename) if !$dflta; # default assembly name
    $ENV{TWO_TASK}    = 'sids';
    my $dfltd = `$BADGERDIR/pfind -q $dbasename > /dev/null 2>&1`;
    $dfltd = lc($dfltd) if $dfltd;

    $organisms->packAttribute($dbasename,'dbasename','attributes','dflta',$dflta) if ($dflta);
    $organisms->packAttribute($dbasename,'dbasename','attributes','dfltd',$dfltd) if ($dfltd);
    $organisms->packAttribute($dbasename,'dbasename','attributes','dfltp',$dfltp) if ($dfltp);

# add a new record to the ASSEMBLY table for the default assembly BLOB
    my $assembly = $organisms->spawn('ASSEMBLY',$dbasename,0);
    if (my $number = $organisms->associate('number',$dbasename,'dbasename')) {
# add entry to assemblies using default
        if ($assembly->newrow('assemblyname','BLOB')) {
            $assembly->update('organism',$number);
            $assembly->update('creator' ,$userid);
            $assembly->update('userid'  ,$userid);
            $assembly->update('updated' ,$timestamp);
            $assembly->update('created' ,$timestamp);
        }
        else {
            my $message = "Could not create an entry for assembly BLOB";
            $page->message($message,$yellow,0,1);
        }
# and update the assembly count
        my $count = $assembly->count;
        $organisms->update('assemblies',$count,'dbasename',$dbasename);
# update the current reads, pending and contigs counts, if any (restore missing data)
        my $reads = $organisms->spawn('READS',$dbasename,0);
        $count = $reads->count;
        $organisms->update('reads_loaded',$count,'dbasename',$dbasename);        
        my $pends = $organisms->spawn('PENDING',$dbasename,0);
        $count = $pends->count;
        $organisms->update('reads_pending',$count,'dbasename',$dbasename);        
        my $cntgs = $organisms->spawn('CONTIGS',$dbasename,0);
        $count = $cntgs->count;
        $organisms->update('contigs',$count,'dbasename',$dbasename);        
    }
}

#############################################################################

sub form {
# writes the definition form fro a new database

    my $form = '';

    $form .= "<TABLE ALIGN=CENTER CELLSPACING=2 CELLPADDING=2 BORDER=0>";
    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Database</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"dbasename\" SIZE=16 MAXSIZE=16 VALUE=\"new\"></TD>";
    $form .= "<TD WIDTH=50 ALIGN=CENTER> (16) </TD>";
    $form .= "<TD ALIGN=LEFT NOWRAP>Organism name, e.g. STyphi, DICTY</TD><TR>";

    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Genus</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"genus\"     SIZE=16 MAXSIZE=24 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (24) </TD><TD ALIGN=LEFT NOWRAP>e.g. Salmonella</TD></TR>";

    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Species</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"species\"   SIZE=16 MAXSIZE=24 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (24) </TD><TD ALIGN=LEFT NOWRAP>e.g. Enterica</TD></TR>";
   

    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Serovar</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"serovar\"   SIZE=16 MAXSIZE=24 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (24) </TD><TD ALIGN=LEFT NOWRAP>e.g. Typhimurium</TD></TR>";

    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Strain/Clone</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"strain\"    SIZE=16 MAXSIZE=24 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (24) </TD><TD ALIGN=LEFT NOWRAP> &nbsp </TD></TR>";

    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Isolate</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"isolate\"   SIZE=16 MAXSIZE=16 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (16) </TD>";
    $form .= "<TD ALIGN=LEFT NOWRAP>e.g. Clinical/Laboratory/Environment</TD></TR>";

    my $template = "<name><n>P<m>";
    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Template</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"template\"  SIZE=16 MAXSIZE=24 VALUE='$template'></TD>";
    $form .= "<TD ALIGN=CENTER> (24) </TD>";
    $form .= "<TD ALIGN=LEFT NOWRAP>Assembly/Project name template</TD></TR>";
    
    $form .= "<TR><TH ALIGN=LEFT NOWRAP>Comment</TH>";
    $form .= "<TD ALIGN=LEFT NOWRAP><INPUT NAME=\"comment\"   SIZE=20 MAXSIZE=256 VALUE=''></TD>";
    $form .= "<TD ALIGN=CENTER> (256) </TD><TD ALIGN=LEFT NOWRAP>Any further details</TD></TR>";

    $form .= "</TABLE>";

    return $form;
}

#############################################################################

sub updateCounters {
# testing and possibly adjusting counters in dictionary tables
    my $source   = shift; # any ArcturusTable in the database
    my $database = shift; # database name
    my $master   = shift; # the name of master table with a column to be counted/checked
    my $slave    = shift; # the name of table with the relevant dictonairy and counter
    my $update   = shift;

    undef my $report;
    my $dmodel = $source->spawn('DATAMODEL','arcturus',0,1);
    my $mtable = $source->spawn($master,$database,0,0);
    my $stable = $source->spawn($slave ,$database,0,1);

# find the connecting column name via the database model if it exists

    my $query = "select tcolumn,lcolumn from <SELF> where tablename='$master' and linktable='$slave'";
    my $hash  = $dmodel->query($query,0,0); # no tracing
    if (@$hash != 1) {
        $report = "Error in identification of column names (@$hash)";
        return $report;
    }

    my $column = $hash->[0]->{tcolumn};
    my $linker = $hash->[0]->{lcolumn};

# get the frequency distribution of 'tcolumn' values in the master table 

    $query = "select $column AS target, count(*) AS counted from <SELF> group by $column";

    if (my $frequency = $mtable->query($query,0,0)) {

        my $accumulator = $stable->{hashrefs};

# get inventory of the counter table
        undef my %inventory;
        foreach my $hash (@$accumulator) {
            my $cvalue = $hash->{$linker};
            my $ccount = $hash->{counted};
            $inventory{$cvalue}->[0] = $ccount;
            $inventory{$cvalue}->[1] = 0;
        }
# get inventory of the master table (protect against empty table)
        undef my $warning;
        if ($frequency != 0) {
            foreach my $hash (@$frequency) {
                my $target = $hash->{target};
                my $tcount = $hash->{counted};
                if (defined($target)) {
                    $inventory{$target}->[1] = $tcount;
                }
                else {
                    $warning = "! $tcount records found with undefined $column";
                }
            }
        }
        else {
	    $report = "<b>The database table $master has no occurances of $column<b><br>";
        }
# and compare
        my $changes = 0;        
        $report .= "<TABLE CELLPADDING=1 BORDER=0>";
        $report .= "<TR><TD COLSPAN=5 bgcolor=yellow ALIGN=CENTER>$warning</TD></TR>" if ($warning);
        foreach my $key (sort keys %inventory) {
            my $tc = $inventory{$key}->[0] || 0; # the  table count
            my $mc = $inventory{$key}->[1] || 0; # the master count
            if ($tc == $mc) {
        # print only meaningful information
                if ($tc > 0) {
                    $report .= "<TR><TD>$column</TD><TD>$key</TD><TD>checked</TD>";
#                    $report .= "<TD COLSPAN=2 ALIGN=RIGHT>($tc)</TD></TR>";
                    $report .= "<TD>$tc</TD><TD ALIGN=RIGHT>($mc)</TD></TR>";
                }
            }
            elsif (!$update) {
                $report .= "<TR><TD>$column</TD><TD>$key</TD><TD bgcolor=orange>mismatch</TD>";
                $report .= "<TD ALIGN=CENTER>$tc</TD><TD ALIGN=RIGHT>($mc)</TD></TR>";
                $changes++;
            }
            else {
                $tc = $mc if $stable->update('counted',$mc,$linker,$key);
                $report .= "<TR><TD>$column</TD><TD>$key</TD><TD bgcolor=yellow>updated</TD>";
                $report .= "<TD>$tc</TD><TD ALIGN=RIGHT>($mc)</TD></TR>";
                $stable->historyLogger($update); # $update is the user here
            }
        }
        if (!$update && !$changes) {
            $report .= "<TR><TD COLSPAN=4>&nbsp</TD></TR><TR><TD COLSPAN=4 bgcolor=yellow ";
            $report .= "ALIGN=CENTER>No changes identified</TD></TR>";
        }
        $report .= "</TABLE>";
    }
    else {
	$report = "Invalid query $query on $mtable->{tablename} in 'updateCounters'";
    }

    return $report;
}
