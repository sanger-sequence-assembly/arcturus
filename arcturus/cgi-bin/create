#!/usr/local/bin/perl -w

#############################################################################
#
# Create ARCTURUS Assembly Database (for organism or common)
#
#############################################################################

use strict; # Constraint variables declaration before using them

use GateKeeper; 
use DbaseTable;
use ArcturusTable;
use MyHTML;

require "arc_create_mysql.pl";

##############################################################################

open(STDERR,">&STDOUT") || die "Can't dump to STDOUT: $!\n";
select(STDERR); $| = 1; # Make unbuffered.
select(STDOUT); $| = 1; # Make unbuffered.

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = GateKeeper->new('mysql',0,'insist on CGI'); # CGI only
# $GateKeeper->cgiHeader(2); # return string plain

my $config     = $GateKeeper->configHandle();

my $cgi        = $GateKeeper->cgiHandle();

my ($void,$database,$option,$function) = split ('/',$GateKeeper->origin);

my $testdbase = $database;
   $testdbase = 'arcturus' if ($database eq 'new');
   $testdbase = 'arcturus' if ($database eq 'existing');
   $testdbase = $cgi->parameter('database',0) if ($option eq 'rebuild');
   $testdbase = 'arcturus' if (!$testdbase && $option eq 'rebuild');
   $testdbase = 'arcturus' if ($option eq 'initialize');

# print "database $database  option $option  function testdbase $testdbase<br>";

my $dbh = $GateKeeper->dbHandle($testdbase); #,{'override'=>'1'});

$GateKeeper->cgiHeader(2); # return string plain
#print "testdatabase $testdbase<br>";

##############################################################################
# MAIN
##############################################################################
# database = database to act on
# table    = table to act on    | e.g. all, none (for overview)
# option   = what to do         | e.g. rebuild, clear, create
##############################################################################

my $USERSUPPORT = $config->get("USERSUPPORT");
my $db_manager  = $config->get("db_manager");      
my $arc_cgi_dir = $config->get("ARC_CGI_DIR");

my $open;
if (!($open = $dbh->do("use arcturus"))) { # select the default common database
    $database = 'unknown';
}

###############################################################################
# actions on the common database
###############################################################################

my $page = MyHTML->new("ARCTURUS database maintenance and updates");
$page->frameborder(100,25);
$page->center(1);

if ($database eq 'arcturus') {

# this database cannot be dropped; be careful what you do to tables

    undef my @tablenames;

# get database tables; compare existing ones against complete set

    my %tables;
    my $count = 0;
    my $inventory;
    if ($dbh->do("SHOW TABLES FROM arcturus LIKE 'INVENTORY'") == 0) {
    # the inventory table is missing; signal only this table
        push @tablenames,'INVENTORY';
        $count = 1;
    }
    else {
    # read the common tables from INVENTORY
        $inventory = ArcturusTable->new($dbh,'INVENTORY','arcturus',1);
        my $hashes = $inventory->associate('hashrefs','c','domain');
        foreach my $hash (@$hashes) {
            my $tablename = $hash->{tablename};
            $tables{$tablename} = 1;
        }
    # build the list of required tables
        foreach my $tablename (keys (%tables)) {
            push @tablenames, $tablename;
        }        
    # okay, now compare with the existing tables in database arcturus    
        my $sth = $dbh->prepare("SHOW TABLES");
        if ($sth->execute()) {
            while (my $result = $sth->fetchrow_array()) {
               $tables{$result}--; # on table found set to zero
               $count++; 
	    }
        }
    }


    my $confirm = $cgi->parameter('confirm',0);
    my $return = "$arc_cgi_dir/update/arcturus/getmenu";

    if ($option eq 'create' && $count > 1) {
        my $message = "Database ARCTURUS and some common tables already exist<br>";
        $message   .= "Go BACK and use REBUILD instead";
        $page->errorbox("<h3></h3>",$return); 
    }
    elsif ($option eq 'create' && !$confirm) { # count == 0 or 1
    # get list of missing tables (have table count still at 1)
        undef my @misstables;
        foreach my $tablename (keys (%tables)) {
            push @misstables, $tablename if ($tables{$tablename} > 0);
        }        
    # generate a confirm form to create the common database
        $page->form("$arc_cgi_dir/create/arcturus/create");
        $page->add("<br><h3>Create these ARCTURUS common area tables:</h3>");
        $page->tablelist(\@misstables);
        $page->hline();
        $page->identify('10',1); # no repeat!
        $page->confirmbuttonbar($return,0); # include reject button
        $page->form(0);
    }
    elsif ($option eq 'reinit') {
    # determine missing tables
        my $exists = "<TABLE>";
        foreach my $table (@tablenames) {
	    $exists .= "<TR><TH ALIGN=LEFT>$table</TH><TH>:</TH>";
            if ($tables{$table}) { # table==1 for missing tables
                $exists .= "<TD bgcolor='orange'>missing</TD></TR>"; 
            }
            else {
                $exists .= "<TD>found</TD></TR>";
            }
        }
        $exists .= "</TABLE>";
    # generate a select form for reinitialising of a table in common
        $page->form("$arc_cgi_dir/create/arcturus/rebuild");
        $page->sectionheader("Tables in ARCTURUS common database",3,0);
        $page->add("$exists",0,1);
        $page->sectionheader("Select common table to rebuild:",4,0);
        $page->choicelist('table',\@tablenames,200,1);
        my $message = "Changing anything in the common tables requires ";
        $message   .= "special access priviledge. Please provide your ";
        $message   .= "ARCTURUS username and password";
        $page->messagebox($message,0);
        $page->identify('10',0,1);
        $page->submitbuttonbar(1); # include reset button
        $page->form(0);
    }
    elsif ($option eq 'rebuild' && !$confirm) {
    # generate confirm form for rebuild; test userid and password
        my $tablename = $cgi->parameter('table');
        $page->form("$arc_cgi_dir/create/arcturus/rebuild");
        $page->sectionheader("Re-initialize ARCTURUS table $tablename",3,1);
        $page->hidden('password',$cgi->parameter('password'));
        $page->hidden('identify',$cgi->parameter('identify'));
        $page->hidden('tablename',$tablename);
        if ($cgi->{und_error}) {
            my $error = "Please define every input field";
            $page->errorbox("<h3>$error</h3>");
        }
        else {
            my $message = "All accumulated data in $tablename will be lost!<br>";
            $message .= "Be sure before you continue";
            $page->warningbox($message,1);
            $page->confirmbuttonbar($return); # include reject button
        }
        $page->form(0);

    }
    elsif (($option eq 'rebuild' || $option eq 'create') && $confirm eq 'CONFIRM') {
    # okay, execute the update if the user priviledge is sufficient
        my $tablename = $cgi->parameter('tablename');
        $page->sectionheader("Re-initialize ARCTURUS table $tablename",3,1);
        my $accept = 0;
        my $userid = $cgi->parameter('identify');
        my $passwd = $cgi->parameter('password');
        if (defined($tables{USERS}) && $tables{USERS}) {
        # build peoples table and get data for user
            my $people = ArcturusTable->new($dbh,'USERS','arcturus');
            $people->build(1); # build the table
            if (my $uidref = $people->associate ('hashref',$userid,'userid')) {
                my $access = $uidref->{priviledges};
                if ($uidref->{password} eq 'update') {
                    my $ulink = "$arc_cgi_dir/umanager/";
                    $page->add("<br><h3>Your password was reset: ".
                    "<a href=\"$ulink\"> UPDATE </a> it now</h3>",0,1);
                }
                elsif (!$cgi->VerifyEncrypt($passwd,$uidref->{password})) {
                    $page->errorbox("<h3>Invalid Password for user $userid</h3>");
                }
                elsif ($access < 255) {
                    $page->errorbox("<h3>Insufficient priviledge for user $userid</h3>");
                }
                else {
                    $accept = 1;
                }
            }
            else {
        # reject: the user does not exist
                $page->errorbox("<h3>Invalid Username: no record of $userid</h3>");
            }
        }
        elsif ($userid ne 'ejz') {
            $page->errorbox("This operation can only be done by the ARCTURUS database manager");
        }
        else {
            $accept = 1; # it's the supreme fascist!
        }

# add username and passwd as hidden variables

        if ($option eq 'create' && $accept) {

            my $created = &create_common($dbh,'all');
            $page->add("<br><h3>Done: $created tables created in ARCTURUS common database</h3>");

        }
        elsif ($option eq 'rebuild' && $accept) {

            if (defined($tablename)) {
                my $created = &create_common($dbh,lc($tablename));
                if ($created > 0) {
                    $page->add("<br><h3>Done: $created tables created in ARCTURUS common database</h3>");
	        }
                else {
                    $page->errorbox("re-creation of table $tablename FAILED");
                }
            }
            else {
                $page->errorbox("<h3>undefined table: $tablename<h3>");
            }
        }
        else {
            $page->add("<br><h3>Option $option failed</h3>");
            
        }
        my $link = "$arc_cgi_dir/update/arcturus/getmenu";
        $page->linkbutton('CONTINUE',$link,0);
    }
    else {
        $page->errorbox("<h3>Invalid function $option or invalid status specified</h3>");
        $page->add($cgi->PrintVariables()); 
    }
    $page->form(0);
    $page->flush();
    $dbh->disconnect;
    exit 0;
}

#*********************************************************************************************************
#*********************************************************************************************************
#
# The next section creates a new organism database
#
#*********************************************************************************************************
#*********************************************************************************************************
 
elsif ($database eq "new" && $option eq "getform") {

# read the form entries, test the access priviledge (level 2 is required)

    $dbh->do("use arcturus"); # switch to arcturus common database
    $page->sectionheader("Create a new Organism Database",3,1);
    my $userid = $cgi->parameter('identify');
    my $passwd = $cgi->parameter('password');
    my $dbasename = $cgi->parameter('dbasename'); # the database to be created
    my $people = ArcturusTable->new($dbh,'USERS','arcturus',1);
#    $people->build(1);
    my $dbases = ArcturusTable->new($dbh,'ORGANISMS','arcturus',1);
#    $dbases->build(1);
    undef my $error;
    if ($cgi->{und_error}) {
        $error = "Please define at least the database name and your username and password";
    }
    elsif (!defined($people) || !$people) {
        $error = "There are NO ARCTURUS users defined";
    }
    elsif (my $uidref = $people->associate('hashref',$userid,'userid')) {
        my $priviledge = $uidref->{priviledges};
        if (!$cgi->VerifyEncrypt($passwd,$uidref->{password})) {
            $error = "Invalid Password for user $userid";
        }
        elsif ($priviledge < 200) {
    # error form 'insufficient authority' (at least project manager)
            $error = "Insufficient Priviledge for user $userid";
        }
        elsif ($dbasename =~ /^new$/i || $dbasename =~ /^old$/i || $dbasename =~ /^exist$/i) {
            $error = "Organism database name \"$dbasename\" cannot be used";
        }
        elsif ($dbases->associate('hashref',$dbasename,'dbasename')) {
            $error = "Organism database $dbasename already exists";
        }
        else {
    # here is the substance: compose confirm form
            my @items = ('genus','species','serovar','strain','isolate','comment');
            my $summary = "<table>";
            $summary .= "<tr><th align=left>Database name</th><th>:</th><td>$dbasename</td></tr>";
            foreach my $item (@items) {
                my $value = $cgi->parameter($item);
                $value = "UNDEFINED" if (!$value);
                $summary .= "<tr><th align=left>$item</th><th>:</th><td>$value</td></tr>";
            }
            $summary .= "</table>";
            $page->add($summary,0,1); # list summary
            $page->form("$arc_cgi_dir/create/$dbasename/initialize");
            $page->ingestCGI($cgi);   # add current cgi valueas as hidden fields
            if ($summary =~ /UNDEFINED/) {
                my $message = "There are undefined items in the database descriptors";
                $message .= "Are you sure that they are left empty? If not, use the ";
                $message .= "\"BACK\" button and complete the form, else confirm";
                $page->messagebox($message,0,1);
            }
            $page->confirmbuttonbar(0,0);
        }
    }
    else {
    # reject: the user does not exist
        $error = "Invalid Username: no record of $userid";
    }

    $page->errorbox($error) if ($error);
    $page->form(0);
    $page->flush();
    $dbh->disconnect;
    exit 0;
}

elsif ($database && $database ne 'new' && $option eq 'initialize') {

    my $confirm = $cgi->parameter('confirm');

# check again that no database exists and test the password again

    $dbh->do("use arcturus"); # switch to arcturus common database
    my $userid = $cgi->parameter('identify');
    my $passwd = $cgi->parameter('password');
    my $dbasename = $cgi->parameter('dbasename');
    my $people = ArcturusTable->new($dbh,'USERS','arcturus',1);
#    $people->build(1);
    my $dbases = ArcturusTable->new($dbh,'ORGANISMS','arcturus',1);
#    $dbases->build(1);
    my $accept = 1;
# first test password and priviledges (again)
    $page->sectionheader("Create a new Organism Database $dbasename",3,1);
    if (my $uidref = $people->associate('hashref',$userid,'userid')) {
        my $priviledge = $uidref->{priviledges};
        if (!$cgi->VerifyEncrypt($passwd,$uidref->{password})) {
            $page->errorbox("Invalid Password for user $userid");
            $accept = 0;
        }
        elsif ($priviledge < 200) {
            $page->errorbox("Insufficient Priviledge for user $userid");
            $accept = 0;
        }
    }
    else {
        $accept = 0;
    }
# test existing databases
    my $hashes = $dbases->query("show databases");
    foreach my $hash (@$hashes) {
        if ($dbasename eq $hash->{Database}) {
            $page->errorbox("Organism database \"$database\" already exists");
            $accept = 0;
        }
    } 

# okay, if still $accept all test were passed; now create the database

    my $diagnosis = "FAILED"; # default no success
    if ($accept && $cgi->parameter('confirm') eq 'CONFIRM') {
        $dbh->do("create database $database");
    # confirm creation if database by checking that it is empty
        if ($dbases->query("show databases like \'$database\'")) {
            $page->sectionheader("Database $database CREATED");

        # enter database descriptors into ORGANISMS table (default db here is "arcturus")

            $dbases->newrow('dbasename',$dbasename);
            foreach my $item (@{$dbases->{columns}}) {
                my $cgivalue = $cgi->parameter($item);
                if ($item ne 'dbasename' && $cgivalue) {
                    $dbases->update($item,$cgivalue);
                }
            }
            $dbases->update('creator',$userid);
            my $timestamp = $dbases->timestamp(0);
            my ($date, $time) = split /\s/,$timestamp;
            $dbases->update('date_created',$date);
        # add residence information
            my $residence = $GateKeeper->{server};
            $dbases->update('residence',$residence);
        # add (pack) attributes: first chech if a template is defined
            my ($dflta,$dfltp);
            if (my $cgivalue = $cgi->parameter('template')) {
            # decode the default assembly name and project name
                ($dflta,$dfltp) = split /\<\w+\>/,$cgivalue;
# print "test dflta dfltp: |$dflta| |$dfltp|  (cgi: $cgivalue)<br>";
            }
            $dfltp = 'P' if !$dfltp; # default project name
            $dflta = uc($dbasename) if !$dflta; # default assembly name
            my $dfltd = "/nfs/disk222/$dbasename/"; $dfltd = lc($dfltd);
            $dbases->packAttribute($database,'dbasename','attributes','dflta',$dflta) if ($dflta);
            $dbases->packAttribute($database,'dbasename','attributes','dfltd',$dfltd) if ($dfltd);
            $dbases->packAttribute($database,'dbasename','attributes','dfltp',$dfltp) if ($dfltp);

        # move focus to the new database and test if it is indeed empty
        # (this is to be sure that we do not accidently overwrite another
        #  database in case the "use" command failed for whatever reason) 

            $dbh->do("use $database");
        # find the tables in this directory; there should not be any!
            my $count = $dbases->query("show tables");
            if ($count != 0) {
                $page->warningbox("Something seriously wrong: The current database is not empty ($count)");
                $dbases->rollback(1); # undo the previous modifications to ORGANISMS
                $accept = 0;
            }
            else {
        # okay, the default db is indeed empty; now create tables and check each one
                my $report = "<table>";
                my $tables = &create_organism($dbh,$database,0,$userid,1); # create all tables
            # test the created tables
                foreach my $table (@$tables) {
                    $report .= "<TR><TD ALIGN=LEFT>$table</TD>";
                    if ($dbases->query("show tables from $database like \"$table\"")) {
                        $report .= "<TD BGCOLOR='yellow'>created</TD>";
                        $diagnosis = "INCOMPLETE"; # for possible error message at end
                    }
                    else {
                        $report .= "<TD BGCOLOR='orange'>FAILED</TD>";
                        $accept = 0; # force error message at end
                    }
                    $report .= "</TR>";
                }
                $report .= "</TABLE>";
            # finally, add attributes and a new record to the ASSEMBLY table for the BLOB
                my $assembly = $dbases->new($dbh,'ASSEMBLY',$database,0);
                if (my $number = $dbases->associate('number',$database,'dbasename')) {
            # add entry to assemblies using default
                    $assembly->newrow('assemblyname','BLOB');
                    $assembly->update('organism',$number);
                    $assembly->update('creator' ,$userid);
                    $assembly->update('userid'  ,$userid);
                    $assembly->update('updated' ,$timestamp);
                    $assembly->update('created' ,$timestamp);
            # and update the assembly count
                    $dbases->update('assemblies',1,'dbasename',$database);
                }
                else {
                    $report .= "! Something really wrong: Failed to get database number";
                }
                $page->add($report,0,1);
            }            
        }
        else {
            $accept = 0;
        }
    } 

    
    if ($accept) {
        my $link = "$arc_cgi_dir/update/arcturus/getmenu";
        $page->linkbutton('CONTINUE',$link,0);
    }
    else {
        $page->warningbox("Creation of new database \"$database\" $diagnosis",1);
        $page->sectionheader("Please contact $db_manager");
    }

    $page->flush();
    $dbh->disconnect;
    exit 0;
}

#*********************************************************************************************************
#*********************************************************************************************************
#
# The next section recreates or rebuilds a table in an organism database
#
#*********************************************************************************************************
#*********************************************************************************************************

elsif ($database eq 'existing' && $option eq 'getform') {

# get listing of organism databases and  tables therein

    my $tables = ArcturusTable->new($dbh,'INVENTORY','arcturus');
    $tables->build(1);
    my $hashes = $tables->associate('hashrefs','o','domain');
    undef my @tables;
    foreach my $hash (@$hashes) {
        push @tables,$hash->{tablename};
    }

    my $dbases = ArcturusTable->new($dbh,'ORGANISMS','arcturus');
    my $dbcount = $dbases->build(1);

# build the form to select a database and a table to rebuild

    my $choices;
    $page->form("$arc_cgi_dir/create/existing/rebuild");
    $page->sectionheader("Rebuild a table in an Organism Database",3,1);
    if ($dbcount > 1) {
        $page->sectionheader("Select an organism database and the tablename");
        $choices = $dbases->htmlOptions('dbasename','database',0,0);
        $page->add("$choices <p>");
    }
    elsif ($dbcount == 1) {
        my $hash = $dbases->{hashrefs};
        my $dbasename = $$hash[0]->{dbasename};
        $page->sectionheader("Select a tablename in the $dbasename database");
    }

    if ($dbcount >= 1) {
        unshift @tables,'TEST'; # add test
        $page->choicelist('tablename',\@tables,0,0);
        $page->sectionheader("(select TEST for an overview)",4,1);
# add reinitialize button to force replacement of a table
        my $enforce = "<TABLE><TR><TD>Check <INPUT type=checkbox name='reinitialize'>";
        $enforce .= " to reinitialize protected tables</TD></TR></TABLE>";
        $page->add($enforce,0,1);
        $page->identify('10',8,1);
        my $link = "$arc_cgi_dir/update/arcturus/getmenu";
        $page->submitbuttonbar($link,0,0);
    }
    else {
        $page->errorbox("No organism database found!");
        $page->messagebox("<h3>Please contact $db_manager</h3>");
    }
    $page->preload('cgi_input',$cgi);
#$page->add($cgi->PrintVariables());
    $page->flush();
    $dbh->disconnect;
    exit 0;
}
elsif ($database eq 'existing' && $option eq 'rebuild') {

# redefine the database name, then continue in the next block of code

    if ($cgi->parameter('database')) {
        $database = $cgi->parameter('database');
    }
    else {
        $page->errorbox('Please define a database');
        $page->form(0);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }
}
elsif ($option ne 'rebuild' || $database ne $cgi->parameter('database')) {

    $page->sectionheader("Create or Update an ARCTURUS data table",3,1);
    $page->errorbox("Refused: invalid input create/$database/$option");
    $page->sectionheader("Database \"arcturus\" not found",3,1) if (!$open);
    $page->messagebox("<h3>Please contact $db_manager</h3>");
#    $page->add($cgi->PrintVariables());
    $page->flush();
    $dbh->disconnect;
    exit 0;
}

#******************************************************************************
# continuation after renamed $database above
# - test password, user ID and other input 
# - generate confirm message (on !$confirm)
# - do the update (on $confirm)
#******************************************************************************

if ($database ne 'existing' && $option eq 'rebuild') {

# return address depends on confirm status

    my $confirm = $cgi->parameter('confirm',0);
    $confirm = 0 if (!defined($confirm) || $confirm ne 'CONFIRM');
    $page->form("$arc_cgi_dir/create/existing/getform")  if ($confirm);
    $page->form("$arc_cgi_dir/create/$database/rebuild") if (!$confirm);
    $page->sectionheader("Update a table in Organism database $database",3,1);

    my $identify  = $cgi->parameter('identify');
    my $password  = $cgi->parameter('password');
    my $tablename = $cgi->parameter('tablename');

# test if the database exists, get its contents and get name of its creator

    my $people    = ArcturusTable->new($dbh,"USERS",'arcturus',1);
    my $inventory = ArcturusTable->new($dbh,'INVENTORY','arcturus',1);

    my $hashes = $inventory->associate('hashrefs','o','domain');

    undef my %tables;
    undef my @tables;
    foreach my $hash (@$hashes) {
        push @tables,$hash->{tablename};
        my $tablename = $hash->{tablename};
        $tables{$tablename} = 0;
    }
# add the history table to the list
    my $historytable = 'HISTORY'.uc($database);
    $tables{$historytable} = 0;

# switch to the database wanted

    $dbh->do("use $database");
# compare with existing tables
    my $sth = $dbh->prepare("show tables");
    if ($sth->execute()) {
        while (my $result = $sth->fetchrow_array()) {
            $tables{$result}++; # on found, set to 1
        }
    }

# collect missing tables

    my $contents = "<TABLE>";
    foreach my $key (sort keys (%tables)) {
        $contents .= "<TR><TD>$key</TD>";
        $contents .= "<TD>Found</TD>" if ($tables{$key});
        $contents .= "<TD bgcolor='orange'>Missing</TD></TR>" if (!$tables{$key});
    }
    $contents .= "</TABLE>";
    
# test if I am in the correct database; test password and authorization

    undef my $error;
    if (!$tables{$historytable} && !($tablename eq 'TEST' && $identify eq 'oper')) {
        $error = "Maybe in the wrong database?<br>Table $historytable does not exist";
    }
    elsif ($cgi->{und_error}) {
        $error = "Please define all input fields: $cgi->{und_error}";
    }
    elsif (!defined($people) || !$people) {
        $error = "There are NO ARCTURUS users defined";
    }
    elsif (my $uidref = $people->associate('hashref',$identify,'userid')) {
        my $priviledge = $uidref->{priviledges};
        if (!$cgi->VerifyEncrypt($password,$uidref->{password})) {
            $error = "Invalid Password for user $identify";
        }
        elsif ($priviledge < 200) { # overall priviledge
    # error form 'insufficient authority' (at least project manager)
            $error = "Insufficient Priviledge for user $identify";
        }
        else {
            my $rebuild = 0;
            my $tablestatus = 'o';
            if ($tablename eq 'TEST') {
                $page->add($contents,0,1);
                $tablename = $historytable; # replace by name of history table
                $rebuild = 99 if ($identify ne 'oper'); # 99 will skip confirm form
            }
            else {
            # get rebuild status from inventory table
                $rebuild = $inventory->associate('rebuild',$tablename,'tablename');
                $rebuild = 0 if ($rebuild == 3 && !$tables{$tablename});
            }
            $tablestatus = $inventory->associate('status' ,$tablename,'tablename');

        # note: rebuild=0 for protected tables, only rebuild if empty or by user 'oper';
        #       rebuild=1 for a dictonary table by a special script prcocessing READS;
        #       rebuild=2 for an unprotected table; rebuild=99 tests
        #       rebuild=3 for re-loading from a data file by special script

            my $count = 0;
            if (($rebuild < 2 || $rebuild == 3) && $tables{$tablename}) {
                my $tablehandle = ArcturusTable->new($dbh,$tablename,$database,0);
                $count = $tablehandle->counted() if ($tablehandle); # get nr of lines or counts
#                $rebuild = 0 if ($rebuild == 3 && $cgi->parameter('reinitialize'));
                $rebuild = 0 if ($cgi->parameter('reinitialize'));
            }

            my $report = "Table $database.$tablename will be ";
            $report .= "created ...." if (!$tables{$tablename}); # is missing
            $report .= "rebuilt ...." if ($tables{$tablename} && $tables{$tablename} == 1); # already exists

            if ($confirm ne 'CONFIRM' && $rebuild <= 3) {
            # generate confirm form for update 
                $page->sectionheader($report,4,1);
                if ($count > 0 && $rebuild == 0) { 
                    $page->warningbox("The existing data in table $database.$tablename ($count) ".
                                      " will be lost completely");
                    $page->sectionheader("Be very sure before you continue!",3,0);
                    $page->sectionheader("Please provide the operations password and confirm",3,0);
                    $page->identify('00',0,1);
                } 
                elsif ($count > 0 && $rebuild == 1) {
                    $page->warningbox("The existing data in dictionary table $database.$tablename ".
                                    " ($count)<br>will be rebuilt from the READS table information");
                    my $report = updateCounters($dbh,$database,'READS',$tablename,0);
                    $page->add($report,0,1);
                    if ($report !~ /no changes/i) {
                        $page->sectionheader("Please provide your password again and confirm",3,0);
                        $page->identify('00',0,1);
                    }
                    else {
                        $rebuild = 99; # to skip confirm button
                    }
                } 
                elsif ($count > 0 && $rebuild == 2) {
                    $page->messagebox("Note: this table is unprotected",0,1,'yellow');
                }
                elsif ($rebuild == 3) {
                    $page->form("$arc_cgi_dir/tmanager/specify/$database/$tablename");
                    my $message = "The data in table $database.$tablename <br>";
                    $message .= "will be rebuilt from a data file.<br>";
                    $message .= "(The table is empty)" if (!$count);
                    $cgi->delete('CONFIRM'); $cgi->delete('password');
                    $page->warningbox($message,1,'lightyellow');
                }
                elsif ($count == 0 && $tablename eq $historytable) {
                    $page->sectionheader("Please provide your password again and confirm",3,0);
                    $page->identify('00',0,1);
                }
                elsif ($count == 0 && $tables{$tablename} != 0) {
                    $page->messagebox("Note: this table is empty",0,1,'yellow');
                }
                         
                my $return = "$arc_cgi_dir/update/arcturus/getmenu";
                $page->ingestCGI($cgi); # add hidden data
                if ($rebuild <= 3) { 
                    $page->confirmbuttonbar($return,0);
                }
                else {
            # add return link (overrides existing form specification)
                    $page->form("$arc_cgi_dir/create/existing/getform");
                    $page->ingestCGI($cgi);
                    $page->linkbutton("RETURN",0,0);
                }
            }
            elsif ($confirm eq 'CONFIRM' && $rebuild <= 3) {
            # recreate or rebuild the table after checking the password, if required
                my $accept = 1;
                my $PASSWORD = $cgi->parameter('PASSWORD');
                if ($count > 0 && $rebuild == 0) {
            # check password against 'oper' password
                    my $pwoper = $people->associate('password','oper','userid');
                    $accept = 0 if (!$PASSWORD || !$cgi->VerifyEncrypt($PASSWORD,$pwoper));
                }
                elsif ($count > 0 && $rebuild == 1) {
            # check password against user password
                    $accept = 0 if (!$PASSWORD || $PASSWORD ne $password);
                }
                elsif ($count == 0 && $tablename eq $historytable) { 
            # check password against user password
                    $accept = 0 if (!$PASSWORD || $PASSWORD ne $password);
                }

                if ($accept && ($rebuild == 0 || $rebuild == 2 || !$count)) {
                # recreate the table from scratch
                    my $lvl = 0; $lvl = 1 if ($identify eq 'oper');
                    my $created = &create_organism($dbh,$database,$tablename,$identify,$lvl);
                    my $counted = @$created; # should be 1 and only 1
                    if ($counted == 1 && 
                        $inventory->query("show tables from $database like \'$tablename\'")) {
                        $report .= '.... DONE';
                    }
                    else {
                        $report .= ".... FAILED (counted=$counted)!";
                    }
                } 
                elsif ($accept && $rebuild == 1) {
            # rebuild a dictionary table
                    $report = updateCounters ($dbh,$database,'READS',$tablename,$identify);
                    $page->add($report,0,1);
                    undef $report;
                } 
                elsif ($accept && $rebuild == 3) {
                    $report .= '.... FAILED!';
                    $error = "Operation refused: invalid usage of 'create' script";
                } 
                else {
                    $report .= '.... FAILED!';
                    $error = "Operation refused: invalid password provided";
                }
            # add return button and link
                $page->sectionheader($report,4,1) if ($report);
                $cgi->delete('confirm');
                $cgi->delete('submit');
                $page->ingestCGI($cgi);
                $page->linkbutton("RETURN",0,0) if (!$error);
            }
        }
    }
    else {
    # reject: the user does not exist
        $error = "Invalid Username: no record of $identify";
    }

    $page->errorbox($error) if ($error);
    $page->form(0);
} 

else {
    print "Undefined function $option for 'create' script<br>";
}

$page->flush();
$dbh->disconnect;

#******************************************************************************
###############################################################################

sub updateCounters {
# testing and possibly adjusting counters in dictionary tables
    my $dbh      = shift;
    my $database = shift;
    my $master   = shift; # the master table name with a column to be counted/checked
    my $slave    = shift; # the table with the relevant dictonairy and counter
    my $update   = shift;

    undef my $report;

    my $dmodel = ArcturusTable->new($dbh,'DATAMODEL','arcturus',1);
    my $mtable = ArcturusTable->new($dbh,$master,$database,0);
    my $stable = ArcturusTable->new($dbh,$slave ,$database,1);

# find the connecting column name via the database model if it exists

    my $query = "select tcolumn,lcolumn from <SELF> where tablename='$master' and linktable='$slave'";
    my $hash  = $dmodel->query($query,0,0); # no tracing
    if (@$hash != 1) {
        $report = "Error in identification of column names (@$hash)";
        return $report;
    }

    my $column = $hash->[0]->{tcolumn};
    my $linker = $hash->[0]->{lcolumn};

# get the frequency distribution of 'tcolumn' values in the master table 

    $query = "select $column AS target, count(*) AS counted from <SELF> group by $column";

    if (my $frequency = $mtable->query($query,0,0)) {

        my $accumulator = $stable->{hashrefs};
    # get inventory of the counter table
        undef my %inventory;
        foreach my $hash (@$accumulator) {
            my $cvalue = $hash->{$linker};
            my $ccount = $hash->{counted};
            $inventory{$cvalue}->[0] = $ccount;
            $inventory{$cvalue}->[1] = 0;
        }
    # get inventory of the master table (protect against empty table
        undef my $warning;
        if ($frequency != 0) {
            foreach my $hash (@$frequency) {
                my $target = $hash->{target};
                my $tcount = $hash->{counted};
                if (defined($target)) {
                    $inventory{$target}->[1] = $tcount;
                }
                else {
                    $warning = "! $tcount records found with undefined $column";
                }
            }
        }
        else {
	    $report = "<b>The database table $master has no occurances of $column<b><br>";
        }
    # and compare
        my $changes = 0;        
        $report .= "<TABLE CELLPADDING=1 BORDER=0>";
        $report .= "<TR><TD COLSPAN=4 bgcolor=yellow ALIGN=CENTER>$warning</TD></TR>" if ($warning);
        foreach my $key (sort keys %inventory) {
            my $tc = $inventory{$key}->[0] || 0; # the  table count
            my $mc = $inventory{$key}->[1] || 0; # the master count
            if ($tc == $mc) {
        # print only meaningful information
                if ($tc > 0) {
                    $report .= "<TR><TD>$column</TD><TD>$key</TD><TD>checked</TD>";
                    $report .= "<TD ALIGN=RIGHT>($tc)</TD></TR>";
                }
            }
            elsif (!$update) {
                $report .= "<TR><TD>$column</TD><TD>$key</TD><TD bgcolor=orange>mismatch</TD>";
                $report .= "<TD ALIGN=CENTER>$tc ($mc)</TD></TR>";
                $changes++;
            }
            else {
                $stable->update('counted',$mc,$column,$key);
                $report .= "<TR><TD>$column</TD><TD>$key</TD><TD bgcolor=yellow>updated</TD>";
                $report .= "<TD ALIGN=RIGHT>($mc)</TD></TR>";
                $stable->historyLogger($update); # $update is the user here
            }
        }
        if (!$update && !$changes) {
            $report .= "<TR><TD COLSPAN=4>&nbsp</TD></TR><TR><TD COLSPAN=4 bgcolor=yellow ";
            $report .= "ALIGN=CENTER>No changes identified</TD></TR>";
        }
        $report .= "</TABLE>";
    }
    else {
	$report = "Invalid query $query on $mtable->{tablename} in 'updateCounters'";
    }

    return $report;
}






