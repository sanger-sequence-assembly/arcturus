#!/usr/local/bin/perl -w

#############################################################################
#
# ARCTURUS Assembly and Projects manager; allocation of users and contigs
#
#############################################################################

use strict;

use GateKeeper; 

##############################################################################
# get configuration data, open CGI and MySQL Database
##############################################################################

my $GateKeeper = GateKeeper->new('mysql',{insistOnCGI => 1});

my ($void,$action,$option) = split '/',$GateKeeper->origin;

my $database   = $GateKeeper->lookup('database') || 'arcturus';

my $organisms  = $GateKeeper->dbHandle($database,{returnTableHandle => 1});

##############################################################################
# MAIN
##############################################################################

my $db_manager  = $GateKeeper->lookup("db_manager");      
my $arc_cgi_dir = $GateKeeper->lookup("ARC_CGI_DIR");

$GateKeeper->focus({useDatabase => 'arcturus', dieOnError => 1});

my $cgi; my $page; my $reject;
if ($cgi = $GateKeeper->cgiHandle(1)) {
# running under CGI
    $page = $GateKeeper->GUI("ARCTURUS database maintenance and updates");
    $reject = "$arc_cgi_dir/amanager/specify/$option".$cgi->postToGet(1,('session','database'));
}
elsif ($action ne 'testUserAllocation') {
# not in CGI mode with the wrong parameters
    $GateKeeper->disconnect("action $action can only be used under CGI control");
    exit 0;
}

my $operation = "define a new $option";
$operation = "allocate $option to a project" if ($option =~ /user|cont/i);
my %options = (headColor=>'FAFAD2',cellColor=>'CCCCCC',linkColor=>'E2E2FF');
my $font = "size=4 face='sans-serif'";

my $userupdate = 0;

#-----------------------------------------------------------------------------

if ($action eq "preselect" || ($action ne 'testUserAllocation' && $database eq 'arcturus')) {
# preselection of a database
    $page->frameborder(50,10,'white') if $GateKeeper->currentSession;
    $page->form("$arc_cgi_dir/amanager/specify/$option");
    $page->sectionheader("ARCTURUS assembly database: $operation",3,0);
    my $count = $organisms->count();
    $page->sectionheader("There are $count Organism databases",3,0);
    $options{mask} = '0110000011100000';
    $page->add($organisms->htmlTable(\%options));
    my $select =  $organisms->htmlOptions('dbasename','database',20,0,0);
    $page->sectionheader("Select a database and submit: $select",4,1);
    $page->ingestCGI();
    $page->submitbuttonbar(); # only submit button
    $page->form(0);
    $page->flush();
}
 
#-----------------------------------------------------------------------------

elsif ($action eq "specify") {
# list all assemblies
    $page->frameborder(10,10,'white');
    my $number   = $organisms->associate('number',$database,'dbasename');
    my $assembly = $organisms->spawn('ASSEMBLY',$database,0,1,'assemblyname');
    my $hashes   = $assembly->{hashrefs};
    $page->form("$arc_cgi_dir/amanager/process/$option");
    $operation =~ s/project/project of $database/; # applies to users and contigs
    $page->space(1);
    $page->add("ARCTURUS assembly database: $operation",0,0,$font);
    $page->space(1);
 
# get number of assemblies

    my $na = 0;
    $na = @$hashes if ($hashes && @$hashes > 0);

    if ($option ne 'assembly' && $na> 0) {
# build form for new project selection
        undef my $form;
        my $aname = $GateKeeper->lookup('assemblyname');
        if (!$aname && $na > 1) {
# an assembly has to be chosen first
            $page->sectionheader("There are $na assemblies defined for database $database",3,0);
            $options{mask} = '010101111111000';
            $page->add($assembly->htmlTable(\%options),0,0);
            $page->form("$arc_cgi_dir/amanager/specify/$option"); # resubmit to this option
            my $select = $assembly->htmlOptions('assemblyname','assemblyname',100,0,0);
            if ($option eq 'users') {
                $page->sectionheader("Select an assembly and users group and submit",4,0);
                $form = &intermediateform(1);
                my $users = $organisms->spawn('USERS','arcturus',0,1);
                my $query = "userid != 'arcturus' and userid != 'oper'";
                my $glist = $users->htmlMaskedOptions ('division','distinct where',$query,100,5,'any');
                $form =~ s/GSELECTION/$glist/; # replace place holder by choicelist
                my $button = "<TABLE><TR><TD>Check <INPUT name=allusers type=checkbox>";
                $button .= " to include all users in your choice list</TD></TR></TABLE>";
                $form .= $button;
            }
            else {  
                $page->sectionheader("Select an assembly and submit",4,0);
                $form = &intermediateform(0);
            }
            $form =~ s/ASELECTION/$select/; # replace place holder by choicelist
            $page->add($form,0,1);
        }

        elsif ($option eq 'project') {
# get assembly number from assembly name or vice-versa.
            my $anmbr = 1;
            $anmbr = $assembly->associate('assembly',$aname,'assemblyname') if ($na  > 1);
            $aname = $assembly->associate('assemblyname',$anmbr,'assembly') if ($na == 1);
            $page->hidden('assemblyname',$aname) if ($na == 1);
            my $attributes = $assembly->unpackAttributes($aname,'assemblyname');
            $page->sectionheader("There are $na assemblies defined for database $database",4,0);
# get projects for this assembly
            my $projects = $organisms->spawn('PROJECTS',$database,0,1);
            my $hashes = $projects->associate('hashrefs',$anmbr,'assembly');
            my $np = "no"; $np = @$hashes if (@$hashes > 0);
            $page->sectionheader("There are $np projects defined for assembly $aname",4,1);
            $np = 0 if ($np eq 'no');
# test projects against data in assembly table
            my $nps = $assembly->associate('projects',$aname,'assemblyname');
            $page->errorbox("Inconsistent project count for assemby $aname: actual ".
                "$np ($nps)<br>Please contact $db_manager",0,'orange') if ($nps != $np);
            $options{mask} = '0100111100001';
            $page->add($projects->htmlTable(\%options,'assembly',$anmbr)) if ($np);

            $page->sectionheader("Please specify the parameters for a new Project",4,0);
            $form = &projectform();
            my $defaultname = "<no default name available>"; my $defaulttype = 0;
# if no projects defined, propose BIN as first entry
            if (!$np) {
                $aname = $attributes->{dflta} if ($attributes && $attributes->{dflta});
                $defaultname = $aname.'BIN';
                $defaulttype = 'Bin';
            }
# if a project exists derive next name from template or last entered project name
            elsif ($np && $hashes && (my $lastname = $hashes->[$#$hashes]->{projectname})) {
                if ($lastname =~ /(\w+?)(\d+|BIN)$/i) {
                    $defaultname = $1;
                    my $defaultnumber = $2;
                    $defaultnumber++      if ($defaultnumber =~ /\d/);
                    $defaultnumber = 'P1' if ($defaultnumber !~ /\d/);
                    $defaultname .= $defaultnumber;
                }
            }
# else get it from assembly template name, if it exists
            elsif ($attributes && $attributes->{dfltp}) {    
                $defaultname = $aname.$attributes->{dfltp};
                $defaultname =~ s/<n>/$np/ if (++$np);
            }
# or fallback on the next P number in the series
            else {
                $defaultname = $aname.'P'.(++$np);
            }
            $form =~ s/PNAME/$defaultname/; # substitute placeholder in form
            my $dtypes = $projects->htmlOptions('projecttype','projecttype',165,0,$defaulttype);
            $form =~ s/PTYPE/$dtypes/; # substitute placeholder
            $page->add($form,0,1);
#            $reject = '';
        }

        elsif ($option eq 'users') {
#$page->add($cgi->PrintVariables());

            my $anmbr = $assembly->associate('assembly',$aname,'assemblyname');
            my $projects = $organisms->spawn('PROJECTS',$database,0,1);
	    my $users = $organisms->spawn('USERS','arcturus',0,1);
# find the project name; take the one in CGI input, or get a choice list
            my $projectlist = $GateKeeper->lookup('projectname');
	    if (!$projectlist) {
                 $projectlist = $projects->htmlMaskedOptions('projectname','assembly',$anmbr,0,0,0);
	    }
# get choicelist of users; Finishers & Trainees only or choose from all 
            my $clause = "(function like 'Fin%' or function like 'Tra%')"; 
            $clause = "userid != 'oper' and userid != 'arcturus'" if $GateKeeper->lookup('allusers');
            $clause .= " and ustatus != 'retired'";
            my $team = $GateKeeper->lookup('division'); undef $team if ($team && $team eq 'any');
            $clause = "($clause) and division = '$team'" if $team;
	    my $userlist = $users->htmlMaskedOptions('userid','where',$clause,70,0,0);
# get the available users and projects in table form
            $options{mask} = '0110000100001';
            my $ptable = $projects->htmlMaskedTable(\%options,'assembly',$anmbr);
            $options{mask} = '0110011000';
            my $utable = $users->htmlMaskedTable(\%options,'where',$clause);
            $page->sectionheader("Please specify a Project and a User",4,0);
            $form = &usersform(1);
            $form =~ s/PROJECTS/$projectlist/;
            $form =~ s/USERLIST/$userlist/;
            $form =~ s/PTABLE/$ptable/;
            $form =~ s/UTABLE/$utable/;
            $page->add($form,0,1);
            $cgi->delete('division');
            $page->ingestCGI();
            if ($GateKeeper->lookup('allusers')) {
                $reject = '';
            }
            else {
                $reject = "$arc_cgi_dir/amanager/specify/$option".$cgi->postToGet();
                $reject .= '&allusers=on';
#                $rejecttext = 'SELECT FROM ALL USERS';
            }
        }

        elsif ($option eq 'contigs') {
        # get assembly number
            my $anmbr = $assembly->associate('assembly',$aname,'assemblyname');        
            my $projects = $organisms->spawn('PROJECTS',$database,0,1);
# my $con2pros = $organisms->new($dbh,'CONTIGS2SCAFFOLD',$database,0);
        # get the available projects in table form
            $options{mask} = '0110000100001';
            my $ptable = $projects->htmlMaskedTable(\%options,'assembly',$anmbr);
        # get choicelist of projects
            my $projectlist = $projects->htmlMaskedOptions('projectname','assembly',$anmbr,0,0,0);
            my @choices = ('NAME','TAG','READ','LIST');
            my $choicelist = $page->choicelist('cmethod',\@choices,0,-1); 

            $page->sectionheader("Please specify a Project and a Contig selection method ",4,0);
            my $form = &usersform(2);
            my $list = &contigslist('FAFAD2','CCCCCC');
            $form =~ s/PROJECTS/$projectlist/;
            $form =~ s/METHOD/$choicelist/;
            $form =~ s/PTABLE/$ptable/;
            $form =~ s/UTABLE/$list/;

            $page->ingestCGI();
            $page->add($form,0,1);
# ! redirect to the cmanager script
            $page->form("$arc_cgi_dir/cmanager/specify");
        }
    }

    elsif ($option eq 'assembly') {
# list current status
        my $txt = 'no'; $txt = $na if $na;
        my $font = "size=4 face='sans-serif'";
        $page->add("There are $txt assemblies defined for database $database",0,0,$font);
        $page->space(1);
# test the number found against the counter in ORGANISMS
        my $nass = $organisms->associate('assemblies',$database,'dbasename');
        $page->errorbox("Inconsistent assembly count for $database: actual ".
                        "$na ($nass)<br>Please contact $db_manager",0,'orange') if ($nass != $na);
        $options{mask} = '010101111111000';
        $page->add($assembly->htmlTable(\%options),0,0) if $na;

# build form for new assembly

        my $form = &assemblyform();
        my $attributes = $organisms->unpackAttributes($database,'dbasename');
        my $defaultname = "<no default name specified>";
# replace by the default name based on ORGANISMS attributes if it exists
        if ($attributes && (my $default = $attributes->{dflta})) {
            $defaultname = $default.$na;
        }
# if no assembly defined, use blob
        if (!$na) {
            $defaultname = 'BLOB';
            $form =~ s/OVERRIDE/0/;
        }
# or try the last assembly name entered, if any 
        elsif ($hashes && (my $lastname = $hashes->[$#$hashes]->{assemblyname})) {
            if ($lastname =~ /(\w+?)(\d+)/) {
                my $defaultnumber = $2+1;
                $defaultname = "$1$defaultnumber";
            }
# non standard format: use last name itself
            elsif ($lastname !~ /blob/i) {
                $defaultname = "<$lastname>";
            }          
        }
	$form =~ s/ANAME/$defaultname/;

# build select list for chromosome

        $assembly->build(1,'chromosome');
        $hashes = $assembly->{hashrefs};
        my %cnumber; my $lastnmbr = 0;
        foreach my $hash (@$hashes) {
            $lastnmbr = $hash->{chromosome};
            $cnumber{$lastnmbr}++;
        }
        my @newnumbers;
        for (my $i = 1 ; $i < 100 ; $i++) {
            if (!defined($cnumber{$i})) {
                push @newnumbers, $i;
            }
            last if (@newnumbers >= 10);
        }
        $lastnmbr = 99 if ($lastnmbr < 99);
        push @newnumbers, ++$lastnmbr;
        my $choicelist = $page->choicelist('chromosome',\@newnumbers,0,-1);
        $choicelist =~ s/\>\s*(\d+)/>chromosome $1/g;
        $choicelist =~ s/chromosome\s*(\d{3})/other $1/g;
	$form =~ s/ASELECTLIST/$choicelist/;
        $form =~ s/OVERRIDE//; # clear if placeholder still present

        my $directory = "<no default directory specified>";
        if ($attributes->{dfltd}) {
            $directory = $attributes->{dfltd}; # default root dir from ORGANISMS
            $directory .= $defaultname.'/'  if ($directory !~ /$defaultname/);
        }
        $form =~ s/DIRECTORY/$directory/;
        
        $page->sectionheader("Please specify the parameters for a new Assembly",4,0);
        $page->add($form,0,1);
    }

    elsif ($option eq 'project') {

        $page->sectionheader("There are no assemblies defined for database $database",3,1);
        my $message = "Projects can only be entered for existing Assemblies<br>";
        $message .= "Please define an assembly first";
        $page->errorbox($message,0,0,'yellow');
        $page->form("$arc_cgi_dir/amanager/specify/assembly");
    }

    $GateKeeper->authorize(100); # if needed add the identification prompt to the page 

    if (!$page->locate('Sorry')) {
        $page->ingestCGI();
        if ($option eq 'users' && $GateKeeper->lookup('projectlist')) {
            $page->submitbuttonbar($reject,0,0,'SELECT FROM ALL USERS');
        }
        elsif ($option eq 'users' || $option eq 'assembly') {
            $reject =~ s/users|assembly/project/;
            $page->submitbuttonbar($reject,0,0,'NEW PROJECT');
        }
        elsif ($option eq 'project') {
            $reject =~ s/project/assembly/;
            $page->submitbuttonbar($reject,0,0,'NEW ASSEMBLY');
        }
        else {
            $page->submitbuttonbar();
        }
    }
    else {
        $page->linkbutton("RETURN TO MAIN",$reject,0);
    }
    $page->form(0);
    $page->flush();
}

#-----------------------------------------------------------------------------

elsif ($action eq 'process') {

    $page->frameborder(100,20,'white');
    $page->form("$arc_cgi_dir/amanager/process/$option");

    undef my $error; my $projectname;
    my $database     = $GateKeeper->lookup('database');
    $cgi->delete('assemblyname','test'); # remove possible bracketed entry
    my $assemblyname = $GateKeeper->lookup('assemblyname');
    $cgi->delete('projectname','test');  # remove possible bracketed entry
    $projectname = $GateKeeper->lookup('projectname') if ($option ne 'assembly');
    my $confirm      = $GateKeeper->lookup('confirm',0) || 0; 
    my $timestamp    = $organisms->timestamp(0);

    my $pjuser = ''; # project username
    $pjuser = $GateKeeper->lookup('userid') if ($option eq 'users');

# start by checking input definition and authorisation

    if ($cgi->{und_error}) {
        $error = "Please define every input field $cgi->{und_error}";
    }
    elsif (!$GateKeeper->authorize(100)) {
        $error = $GateKeeper->{error};
    }

    my $userid = $GateKeeper->currentUser;

    if ($error) {
       $page->sectionheader("ARCTURUS assembly database: Assembly and Project definition",3,0);
       $page->errorbox($error);
       $page->add($cgi->PrintVariables());
    }

    elsif ($option eq 'assembly') {

        my $assembly = $organisms->spawn('ASSEMBLY',$database,0,0);
        $page->sectionheader("ARCTURUS assembly database: define a new $option",3,0);
        $page->partition(1);
        my $chromosome = $GateKeeper->lookup('override');
        if (defined($chromosome) && $chromosome =~ /\d/ && $chromosome >= 0 && $chromosome < 256) {
            $cgi->transpose('override','chromosome',1); # force copy to 'chromosome'
        }
        $page->sectionheader("A new Assembly will be added for database $database:",4,0);

        my $report = "<TABLE BORDER=2 CELLPADDING=2 CELLSPACING=2>";
        my @items = ('assemblyname','chromosome','origin','directory','comment');
        my $organism = $organisms->associate('number',$database,'dbasename');
        undef my $error;
        foreach my $item (@items) {
            if ((my $value = $GateKeeper->lookup($item)) =~ /\S/) {
                $report .= "<TR><TH ALIGN=LEFT> $item </TH><TD> $value </TD>";
                if ($confirm eq 'CONFIRM') {
                    if ($item eq 'assemblyname' && $assembly->associate('assembly',$value,'assemblyname') > 0) {
                        $error  .= "Assembly $value already exists";
                    }
		    elsif ($item eq 'assemblyname') {
                        my $status = $assembly->newrow('assemblyname',$assemblyname);
                        if (!$status) {
                            $error .= "Cannot create a new entry in ASSEMBLY table";
                        }
                        else {
                            $status = $organism;
                            $error .= "Failed to get organism database number\n" if (!$organism);
                            $status = 0 if ($status && !$assembly->update('organism',$organism));
                            $status = 0 if ($status && !$assembly->update('created',$timestamp));
                            $status = 0 if ($status && !$assembly->update('creator',$userid));
			    $status = 0 if ($status && !$assembly->update('updated',$timestamp));
                            $status = 0 if ($status && !$assembly->update('userid' ,$userid));

                            $error .= "Cannot update ASSEMBLY table" if (!$status);
                            $assembly->rollback(1) if ($error); # undo newrow
                        }
                    }
                    elsif ($item eq 'directory') {
                        $assembly->packAttribute($assemblyname,'assemblyname','attributes','RDD',$value);
                    }
                    else {
	                my $status = $assembly->update($item,$value);
                        $error .= "Cannot update ASSEMBLY table" if (!$status);
                        $assembly->rollback(1) if ($error); # undo newrow
                    }
                    $report .= "<TD bgcolor='yellow'> ...... DONE </TD>"  if (!$error);
                    $report .= "<TD bgcolor='orange'> ...... FAILED!</TD>" if ($error);
                }
                $report .= "</TR>";
	    }
	    last if ($error);
        }
        $report .= "</TABLE>";
        $page->add($report,0,0);
        $page->space(1);
        
        if ($error) {
            $page->errorbox($error,$reject,'START AGAIN');
        }
        elsif (!$confirm) {
            $page->ingestCGI();
            $page->confirmbuttonbar($reject,0,0,'START AGAIN');
        }
        else {
# update the number of assemblies in the ORGANISMS table
            $organisms->increment('assemblies','dbasename',$database);
            my $name = $GateKeeper->lookup('assemblyname');
            my $template = $name.'P<n>';
            $assembly->packAttribute($name,'assemblyname','attributes','dfltp',$template); 
# update the defaults in ORGANISMS for this database (i.p. assembly template name)
            if ($GateKeeper->lookup('update')) {
               ($template = $name) =~ s/(\w+?)(\d+)$/$1/; # get default assembly name template
                $organisms->packAttribute($database,'dbasename','attributes','dflta',$template);
                if (my $dfltd = $GateKeeper->lookup('directory')) {
                    $dfltd =~ s?/$name??; # get the default root directory for assemblies
                    $organisms->packAttribute($database,'dbasename','attributes','dfltd',$dfltd);
                    $page->sectionheader("Attributes of database $database were updated",4,1);
                }
            }
            $page->ingestCGI();
            $page->sectionheader("Submit to create the BIN project for this assembly or return to main",4,0);
            $page->form("$arc_cgi_dir/amanager/specify/project");
            $page->submitbuttonbar($reject,0,0,'START AGAIN');
        }
    }

    elsif ($option eq 'project') {

        $page->sectionheader("ARCTURUS assembly database: define a new $option",3,1);
        my $assembly = $organisms->spawn('ASSEMBLY',$database,0,0);
        my $projects = $organisms->spawn('PROJECTS',$database,0,0);
        $page->sectionheader("A new Project will be added for database $database, assembly $assemblyname",4,0);
        my $anmbr = $assembly->associate('assembly',$assemblyname,'assemblyname');
        my $projecttype = $GateKeeper->lookup('projecttype');
        $projecttype = 'Other' if !$projecttype;

        undef my $error;
        my $report = "<TABLE BORDER=0 CELLPADDING=2>";
        $report .= "<TR><TH ALIGN=LEFT>projectname:</TH><TD BGCOLOR='lightblue'>$projectname</TD>";
        $report .=     "<TH ALIGN=LEFT>projecttype:</TH><TD BGCOLOR='lightblue'>$projecttype</TD>";
        if ($projects->associate('project',$projectname,'projectname')) {
            $error .= "Project $projectname already exists";
        }
        elsif ($confirm eq 'CONFIRM') {
            my $status = $projects->newrow('projectname',$projectname,'projecttype',$projecttype);
            if (!$status) {
                $error .= "Cannot create a new entry in PROJECTS table";
            }
            else {
                $status = 0 if (!$projects->update('assembly',$anmbr));
		$status = 0 if ($status && !$projects->update('created',$timestamp));
		$status = 0 if ($status && !$projects->update('creator',$userid));
		$status = 0 if ($status && !$projects->update('updated',$timestamp));
		$status = 0 if ($status && !$projects->update('userid' ,$userid));
                $error .= "Cannot update PROJECTS table" if (!$status);
                $projects->rollback(1) if $error;
            }
            $report .= "<TD bgcolor='yellow'> ...... DONE </TD>"  if (!$error);
            $report .= "<TD bgcolor='orange'> ...... FAILED!</TD>" if ($error);
        }

        if (!$error && (my $comment = $GateKeeper->lookup('comment'))) {
            $report .= "</TR><TR><TH ALIGN=LEFT>comment</TH><TD>$comment</TD>";
            if ($confirm eq 'CONFIRM') {
                my $status = $projects->update('comment',$comment);
                $error .= "Cannot update PROJECTS table" if (!$status);
            }
            $report .= "<TD bgcolor='yellow'> ...... DONE </TD>"  if (!$error);
            $report .= "<TD bgcolor='orange'> ...... FAILED!</TD>" if ($error);
        }      
        $report .= "</TR></TABLE>";
        $page->add($report,0,1);

        if ($error) {
            $page->errorbox($error,$reject,'START AGAIN');
        }
        elsif (!$confirm) {
            $page->ingestCGI();
            $page->confirmbuttonbar($reject,0,0,'START AGAIN');
        }
        else {
            undef $report;
# update the number of projects in the assembly table
            $assembly->increment('projects','assemblyname',$assemblyname);
            if ($GateKeeper->lookup('update')) {
# add the default project name template to the attributes of this assembly
                $projectname =~ s/(\w+?)(\d+)$/$1<n>/; # get template name from current
                $assembly->packAttribute($assemblyname,'assemblyname','attributes','dfltp',$projectname);
                $page->sectionheader("Attributes of assembly $assemblyname were updated",4,1);
            }
            $page->ingestCGI();
            $page->sectionheader("Submit to allocate finishers to this project or return to main",4,0);
            $page->form("$arc_cgi_dir/amanager/specify/users");
            $page->submitbuttonbar($reject,0,0,'START AGAIN');
        }
    }

    elsif ($option eq 'users') {

        my $datamodel = $organisms->spawn('DATAMODEL','arcturus',0,1);
        my $users = $organisms->spawn('USERS','arcturus',0,1,'userid');
        my $uutopp = $organisms->spawn('USERS2PROJECTS',$database,0,1);
# get a list of projects  to which user 'pjuser' is already allocated
        my $projects = $organisms->spawn('PROJECTS',$database,0,1,'projectname');
        $projects->autoVivify($database,1,1); # prepare links to USER2PROJECT
        my $query = "USERS2PROJECTS.userid = '$pjuser' order by projectname";
        $options{mask} = '0110111000000';
        my $userplist = $projects->htmlMaskedTable(\%options,'where',$query);
        $userplist =~ s/table PROJECTS/Projects assigned to user $pjuser/i;
        $userplist =~ s/So.+ble/<b>$pjuser<\/b> is not assigned to any project/;
# get a list of the users working on the same assembly 'assemblyname'
        $query = "assemblyname='$assemblyname'";
        $users->autoVivify($database,4,1); # prepare the links to subtables
        $options{mask} = '01110110000';
        my $useralist = $users->htmlMaskedTable(\%options,'distinct where',$query);
        $useralist =~ s/table USERS/Users of projects for assembly $assemblyname/i;
        $useralist =~ s/No.+ble/No users found/;
        my $form = &usersform(0);
        $form =~ s/PTABLE/$userplist/;
        $form =~ s/UTABLE/$useralist/;
        $form =~ s/orange/lightblue/g;   
        $page->sectionheader("ARCTURUS assembly database: allocate a user to a project of $assemblyname",3,0);
        $page->partition(1);
        $page->add($form);

# test if user is not already allocated to the project

        my $project  = $projects->associate('project',$projectname,'projectname') || 0;
        my $inquiry  = "select * from <self> where project=$project AND userid='$pjuser'";
        my $presence = $uutopp->query($inquiry,0,0);

        if ($presence > 0) {
            $error .= "User $pjuser is already assigned to project $projectname";
        }
        else {
            my $report = "<TABLE><TR><TH> User </TH><TH bgcolor='lightpink'> $pjuser </TH>";
            $report .= "<TH> will be assigned to project </TH>";
            $report .= "<TH bgcolor='lightpink'> $projectname </TH>";
            if ($confirm && $confirm eq 'CONFIRM') {
                my $status = $project;
                $error .= "Failed to get project number" if !$project;
		$status = 0 if ($status && !$uutopp->newrow('userid',$pjuser,'project',$project));
                $status = 0 if ($status && !$uutopp->update('date_from',$timestamp));
                $report .= "<TD bgcolor='yellow'> ...... DONE </TD>"   if  ($status);
                $report .= "<TD bgcolor='orange'> ...... FAILED!</TD>" if (!$status);
            }
            $report .= "</TR></TABLE>";
            $page->add($report,0,0);
        }

        my $return = "$arc_cgi_dir/amanager/specify/users\?database=$database";
        if ($error) {
            $page->errorbox($error,$reject,'START AGAIN');
        }
        elsif ($confirm && $confirm eq 'CONFIRM') {
            $page->ingestCGI(0,('projectname','userid'));
            $page->form("$arc_cgi_dir/amanager/specify/users");
            $page->sectionheader("Submit to assign another user or return",4,0);
            $page->submitbuttonbar($reject,0,0,'START AGAIN');
#   $page->add($cgi->PrintVariables());
            $userupdate = 1;
        }
        else {
            $page->ingestCGI();
            $page->confirmbuttonbar($reject,0);
        }
    }
    $page->form(0);
    $page->flush();

    $organisms->historyUpdate($userid,0,0); # put timestamps on altered tables (no list)
}

#-----------------------------------------------------------------------------

elsif ($action eq 'editor') {
# modify description of assembly
    my $script  = $GateKeeper->currentScript;
    my $session = $GateKeeper->lookup('session');
    my $signame = $GateKeeper->lookup('signature_name');
    my $sigmail = $GateKeeper->lookup('signature_mail');
    $page->frameborder(80,5,'white',5); # overrides GUI
    $page->address($sigmail,$signame,2);
    $page->partition(2);
    $page->center(1);
    $page->add("ARCTURUS contents manager",0,0,'size=+1');
    $page->partition(1);
    $page->space(1);

    my $assembly = $organisms->spawn('ASSEMBLY',$database,0,1);
    my $projects = $organisms->spawn('PROJECTS',$database,0,1);

    my $assemblyname = $GateKeeper->lookup('assemblyname',0);
    my $projectname  = $GateKeeper->lookup('projectname',0);

    if ($option eq 'agetform' || ($option =~ /^a\w+$/ && !defined($assemblyname))) {

        $page->form("$script/editor/aeditform");
        my $assemblys = $assembly->htmlTableColumn('assemblyname',{itemLink=>0, noHeader=>1});
        $page->add($assemblys,0,0);
        my $list = "<table><tr><th>Select an assembly</th><td> : </td>";
        my $assemblylist = $assembly->htmlOptions('assemblyname',0,0,0,0);
        $list .= "<td>$assemblylist</td></tr></table>";
        $page->add($list,0,0);
        $page->submitbuttonbar();
        $page->ingestCGI();

    }
    elsif ($option eq 'aeditform') {

        $page->form("$script/editor/aprocess");
        my $mask = '0100011011120021102';
        $mask = '0100011011120021122' if ($session && $session =~ /\b(ejz|oper)\b/);

        my $editlist = $assembly->htmlEditRecord($assemblyname,'assemblyname',0,$mask,'preset');
        if (!$editlist) {
            $page->errorbox("No such Assembly: $assemblyname");

        }
        else {  
            $page->add($editlist,0,0);
            $page->ingestCGI();
            $page->space(1);
            $page->add("Complete changes and submit",0,0,'size=+1');
            $page->space(1);
            $page->submitbuttonbar();
        }
    }
    elsif ($option eq 'aprocess') {
# the form is submitted for confirmation; test the user and password
        $assemblyname = $GateKeeper->lookup('assemblyname',0);
        my $confirm   = $GateKeeper->lookup('confirm',0) || 0;

        undef my $error;
        if ($GateKeeper->cgiError(0)) {
            $error = "This function is invoked in an invalid manner";
        }
        elsif (!$GateKeeper->authorize(2<<14)) {
            $error = $GateKeeper->{error};
        }
        elsif (!$confirm) {
# generate a confirm form for changes
            my $cgihash = $cgi->{cgi_input};
            my ($changes,$report) = $assembly->cgiEditTable($cgihash,0);
            if (!$changes) {
                $page->messagebox($report);
                $page->space(1);
                $page->add("No changes specified",0,0,'size=+1 color="lightsteelblue"');
            }
            else {
                my @transfer = ('database','assemblyname','session');
                my $reject = "$script/editor/agetform".$cgi->postToGet(1,@transfer);
                $page->promptbox($report,"$script/editor/aprocess",$reject);
                $page->ingestCGI(); # transport current cgi input
                $page->form(0);
            }
        }
        elsif ($confirm eq 'CONFIRM') {
            undef my $report;
            my $cgihash = $cgi->{cgi_input};
            $report = $assembly->cgiEditTable($cgihash,1);
            $page->messagebox($report);
        }
    }

    elsif ($option eq 'pgetform' || ($option =~ /^p\w+$/ && !defined($projectname))) {

        $page->form("$script/editor/peditform");
        my $choices = $projects->htmlTableColumn('projectname',{itemLink=>0, noHeader=>1});
        $page->add($choices,0,0);
        my $list = "<table><tr><th>Select a project</th><td> : </td>";
        my $projectlist = $projects->htmlOptions('projectname',0,0,0,0);
        $list .= "<td>$projectlist</td></tr></table>";
        $page->add($list,0,0);
        $page->submitbuttonbar();
        $page->ingestCGI();

    }
    elsif ($option eq 'peditform') {

        $page->form("$script/editor/pprocess");
        my $mask = '012011111202';
        $mask = '0120110001222' if ($session && $session =~ /\b(ejz|oper)\b/);

        my $editlist = $projects->htmlEditRecord($projectname,'projectname',0,$mask,'preset');
        if (!$editlist) {
            $page->errorbox("No such project: $projectname");

        }
        else {  
            $page->add($editlist,0,0);
            $page->ingestCGI();
            $page->space(1);
            $page->add("Complete changes and submit",0,0,'size=+1');
            $page->space(1);
            $page->submitbuttonbar();
        }
    }
    elsif ($option eq 'pprocess') {
# the form is submitted for confirmation; test the user and password
        $assemblyname = $GateKeeper->lookup('projectname',0);
        my $confirm   = $GateKeeper->lookup('confirm',0) || 0;

        undef my $error;
        if ($GateKeeper->cgiError(0)) {
            $error = "This function is invoked in an invalid manner";
        }
        elsif (!$GateKeeper->authorize(2<<14)) {
            $error = $GateKeeper->{error};
        }
        elsif (!$confirm) {
# generate a confirm form for changes
            my $cgihash = $cgi->{cgi_input};
            my ($changes,$report) = $projects->cgiEditTable($cgihash,0);
            if (!$changes) {
                $page->messagebox($report);
                $page->space(1);
                $page->add("No changes specified",0,0,'size=+1 color="lightsteelblue"');
            }
            else {
                my @transfer = ('database','projectname','session');
                my $reject = "$script/editor/pgetform".$cgi->postToGet(1,@transfer);
                $page->promptbox($report,"$script/editor/pprocess",$reject);
                $page->ingestCGI(); # transport current cgi input
                $page->form(0);
            }
        }
        elsif ($confirm eq 'CONFIRM') {
            undef my $report;
            my $cgihash = $cgi->{cgi_input};
            $report = $projects->cgiEditTable($cgihash,1);
            $page->messagebox($report);
        }
    }
    
    $page->form(0);
    $page->flush();
}

#-----------------------------------------------------------------------------

elsif ($action eq 'testUserAllocation') {
# ?? to be redeveloped
print "amanager: testUserAllocation (to be developed)<br>";
    my $whereAmI = $GateKeeper->whereAmI;
    $GateKeeper->dropDead($whereAmI) if !($whereAmI =~ s/^(\w).*$/$1/); 
    $whereAmI = uc($whereAmI); # P or D

    my $server = $GateKeeper->{server};
    $server =~ s/(\.sanger\.ac\.uk)?\:/%/;

    my $page = $GateKeeper->GUI("Checking project allocations on current server $server");
    my $users = $organisms->spawn('USERS','arcturus',0,1);

    if (my $databases = $organisms->associate('dbasename',$server,'residence',1)) {

        my @databases;
        $databases[0] = $databases;
        @databases = @$databases if (ref($databases) eq 'ARRAY');

        foreach my $database (@databases) {
            $GateKeeper->focus({useDatabase=>$database});
            $GateKeeper->report("Testing database $database");
            my $query = "select USERS2PROJECTS.userid,PROJECTS.projectname,ASSEMBLY.assemblyname ";
            $query .= "from PROJECTS,ASSEMBLY,USERS2PROJECTS ";
            $query .= "where  PROJECTS.project = USERS2PROJECTS.project ";
            $query .= "and ASSEMBLY.assembly = PROJECTS.assembly ";
            my $hashes = $organisms->query($query,0,0);
#$GateKeeper->report("hashes $hashes");
            my %numbers;
            foreach my $hash (@$hashes) {
#$GateKeeper->report("$hash->{userid}  $hash->{projectname}  $hash->{assemblyname}");
                my $attribute = "$hash->{projectname}-$hash->{assemblyname}";
                $users->packAttribute($hash->{userid},'userid','attributes',$attribute,$whereAmI);
                $numbers{$hash->{userid}}++; # projects per user
            }
            foreach my $userid (keys %numbers) {
                $users->update('projects',$numbers{$userid},'userid',$userid);
            }
        }
    }
    else {
        $GateKeeper->report("No Arcturus database found on this server");
    }
}

else {
    $GateKeeper->report("Invalid option $action for amanager script");
}

#********************************************************************************************************

$GateKeeper->disconnect;

if ($userupdate) {
# copy change accross other ARCTURUS instances 
    my $temp = $GateKeeper->lookup('ARC_TMP_DIR');
    my $root = $GateKeeper->prepareFork('harmonize');
    system ("$root/harmonize users copy >> $temp/harmonize.log");
}

exit 0;


#*********************************************************************************************************

sub intermediateform {
    my $kind = shift;
    
    my $form = "<TABLE BORDER=0 CELLPADDING=2><TR>";
    $form .= "<TH ALIGN=LEFT> Assembly:</TH><TD width=20> ASELECTION </TD>";
    $form .= "<TD WIDTH=25>&nbsp</TD><TH ALIGN=LEFT> Team:</TH><TD> GSELECTION </TD>" if $kind;
    $form .= "</TR></TABLE>";

    return $form;
}

sub projectform {
    
    my $form = "<TABLE BORDER=0 CELLPADDING=2><TR>";
    $form .= "<TH ALIGN=LEFT> Project Name </TH>";
    $form .= "<TD COLSPAN=3> <INPUT TYPE=text NAME=projectname VALUE=\"PNAME\" SIZE=32></TD> ";
    $form .= "<TH> (Compulsory)</TH>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Project Type </TH>";
    $form .= "<TD COLSPAN=3 ALIGN=LEFT> PTYPE </TD>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Comment </TH>";
    $form .= "<TD> <INPUT TYPE=text NAME=comment VALUE=\"\"> </TD>";
    $form .= "</TR><TR>";
    $form .= "<TD>&nbsp</TD>";
    $form .= "<TH COLSPAN=2 ALIGN=LEFT> Check <INPUT TYPE=checkbox NAME=update> to update defaults </TH>"; 
    $form .= "</TR></TABLE>";

    return $form;
}


sub assemblyform {
# assembly form with placeholders    
    my $form = "<TABLE BORDER=0 CELLPADDING=2><TR>";
    $form .= "<TH ALIGN=LEFT> Assembly Name </TH>";
    $form .= "<TD COLSPAN=3> <INPUT TYPE=text NAME=assemblyname VALUE=\"ANAME\" SIZE=32></TD> ";
    $form .= "<TH> (Compulsory)</TH>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Chromosome </TH><TD width=20> ASELECTLIST </TD>";
    $form .= "<TH> OR </TH><TD> <INPUT TYPE=text NAME=override VALUE=\"OVERRIDE\" SIZE=3></TD>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Origin </TH>";
    $form .= "<TD COLSPAN=3> <INPUT TYPE=text NAME=origin  VALUE=\"The Sanger Institute\"> </TD>";
    $form .= "<TH> (Default)</TH>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Directory </TH>";
    $form .= "<TD COLSPAN=3> <INPUT TYPE=text NAME=directory VALUE=\"DIRECTORY\" SIZE=32> </TD>";
    $form .= "<TH> (Optional)</TH>";
    $form .= "</TR><TR>";
    $form .= "<TH ALIGN=LEFT> Comment </TH>";
    $form .= "<TD COLSPAN=3> <INPUT TYPE=text NAME=comment VALUE=\"\" SIZE=32> </TD>";
    $form .= "<TH> (Optional)</TH>";
    $form .= "</TR><TR>";
    $form .= "<TD>&nbsp</TD>";
    $form .= "<TH COLSPAN=2 ALIGN=LEFT> Check <INPUT TYPE=checkbox NAME=update> to update defaults </TH>"; 
    $form .= "</TR></TABLE>";

    return $form;
}

sub usersform {
    my $mode = shift;

# users to project form with placeholders    

    my $form = "<TABLE BORDER=0 CELLPADDING=2><TR>";
    $form .= "<TD VALIGN=TOP ALIGN=CENTER WIDTH=50\%>PTABLE</TD>";
    $form .= "<TD VALIGN=TOP ALIGN=CENTER WIDTH=50\%>UTABLE</TD>";
    $form .= "</TR><TR>";
    $form .= "<TD>&nbsp</TD>";
    $form .= "</TR><TR>";
    if ($mode) {
        $form .= "<TD ALIGN=CENTER><B> Project Name:</B> PROJECTS </TD>";
        $form .= "<TD ALIGN=CENTER><B> User Name: </B> USERLIST </TD>"      if ($mode == 1);
        $form .= "<TD ALIGN=CENTER><B> Selection Method: </B> METHOD </TD>" if ($mode == 2);
    }
    $form .= "</TR></TABLE>";

    return $form;
}

sub contigslist {
    my $headcolor = shift || 'yellow';
    my $namecolor = shift || 'lightblue';
    
    my $col = "bgcolor='$namecolor'";
    my $choices = "<TABLE BORDER=1 CELLPADDING=2>";
#    $choices .= "<CAPTION ALIGN=CENTER><H4>Options for contig selection</H4></CAPTION>";
    $choices .=  "<TR><TH COLSPAN=2 bgcolor='$headcolor'>Options for contig selection</TH></TR>";
    $choices .=  "<TR><TH $col>NAME</TH><TD> ARCTURUS or PHRAP contig name </TD></TR>";
    $choices .=  "<TR><TH $col>READ</TH><TD> The name of a read in the contig </TD></TR>";
    $choices .=  "<TR><TH $col>TAG </TH><TD> A tag identified in the contig </TD></TR>";
    $choices .=  "<TR><TH $col>LIST</TH><TD> Input contig name(s) from a disk file </TD></TR>";
#    $choices .=  "<TR><TH> </TH><TD> </TD></TR>";
    $choices .=  "</TABLE>";

    return $choices;
}
