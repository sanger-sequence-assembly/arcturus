#!/usr/local/bin/perl
#
# compareConsensus
#
# This script cmpares the consensus sequences and quality data
# calculated by Gap4 and by the Arcturus code

use DBI;
use Term::ReadKey;
use Compress::Zlib;

$verbose = 0;
@dblist = ();

while ($nextword = shift @ARGV) {
    $host = shift @ARGV if ($nextword eq '-host');

    $port = shift @ARGV if ($nextword eq '-port');

    $mysqluser = shift @ARGV if ($nextword eq '-user');

    $mysqlpass = shift @ARGV if ($nextword eq '-pass');

    $dbname = shift @ARGV if ($nextword eq '-database');

    $doquality = 1 if ($nextword eq '-doquality');

    $chunk = shift @ARGV if ($nextword eq '-chunk');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($host) &&
	defined($port) &&
	defined($mysqluser) &&
	defined($dbname)) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

$doquality = 0 unless defined($doquality);

$chunk = 50 unless defined($chunk);

$dsn = 'DBI:mysql:' . $dbname . ';host=' . $host . ';port=' . $port;

unless (defined($mysqlpass)) {
    print STDERR "Enter MySQL password for $mysqluser\n";
    ReadMode 'noecho';
    $mysqlpass = ReadLine 0;
    ReadMode 'normal';
    chop $mysqlpass;
}

$dbh = DBI->connect($dsn, $mysqluser, $mysqlpass,
		    {PrintError => 1, RaiseError => 1});

$minlen = 1000 unless defined($minlen);

$query = "USE $dbname";
print STDERR "Switching to database $dbname\n";
$dbh->do($query);
&db_die("$query failed");

print STDERR "\n" if $verbose;

$fields = "CONSENSUS.contig_id,CONSENSUS.length,CONSENSUS.sequence,GAPCONSENSUS.length,GAPCONSENSUS.sequence";

$fields .= ",CONSENSUS.quality,GAPCONSENSUS.quality" if $doquality;

$query = "select $fields from CONSENSUS left join GAPCONSENSUS using(contig_id)";

$sth = $dbh->prepare($query);
&db_die("prepare($query) failed");

$sth->execute();
&db_die("execute($query) failed");

while(@ary = $sth->fetchrow_array()) {
    ($contigid,
     $arclength, $arcsequence,
     $gaplength, $gapsequence,
     $arcqualdata, $gapqualdata) = @ary;

    $arcsequence = uncompress($arcsequence);
    $arcseqlen = length($arcsequence);
 
    if ($arcqualdata) {
	$arcqualdata = uncompress($arcqualdata);    
	@arcquality = unpack("c*", $arcqualdata);
	$arcquallen = scalar(@arcquality);
    }

    $gapsequence = uncompress($gapsequence);
    $gapseqlen = length($gapsequence);

    if ($gapqualdata) {
	$gapqualdata = uncompress($gapqualdta);    
	@gapquality = unpack("c*", $gapqualdata);
	$gapquallen = scalar(@gapquality);
    }

    
    $report = "CONTIG $contigid: $arcseqlen";
    $report .= " MISMATCH $gapseqlen" if ($arcseqlen != $gapseqlen);

    print $report,"\n";
    print STDERR $report;

    $diffcount = 0;

    if ($arcseqlen == $gapseqlen) {
	while (length($arcsequence) > 0) {
	    print substr($arcsequence, 0, $chunk), "\n";
	    print substr($gapsequence, 0, $chunk), "\n";

	    $cmplen = (length($arcsequence) > $chunk) ? $chunk : length($arcsequence);

	    $diffstr = '';

	    $ndiffs = 0;

	    for ($offset = 0; $offset < $cmplen; $offset++) {
		if (substr($arcsequence, $offset, 1) ne substr($gapsequence, $offset, 1)) {
		    $diffstr .= '^';
		    $ndiffs++;
		    $diffcount++;
		} else {
		    $diffstr .= ' ';
		}
	    }

	    print $diffstr, "\n";

	    $arcsequence = substr($arcsequence, $chunk);
	    $gapsequence = substr($gapsequence, $chunk);

	    print "\n" if ($ndiffs);
	}
    }

    print "\n";

    print STDERR " >>> $diffcount DIFFS <<<" if $diffcount;
    print STDERR "\n";
}

$sth->finish();

$dbh->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -host\t\tHostname of server\n";
    print STDERR "    -port\t\tPort number of server\n";
    print STDERR "    -user\t\tMySQL username\n";
    print STDERR "    -database\t\tDatabase for reads\n";
    print STDERR "\n";
    print STDERR "OPTIONAL PARAMETERS:\n";
    print STDERR "    -chunk\t\tNumber of bases per line for output\n";
}
