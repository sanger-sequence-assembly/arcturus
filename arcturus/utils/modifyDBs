#!/usr/local/bin/perl
#
# modifyDBs
#
# This script modifies one or more MySQL databases according to
# the commands in a specified file.

use DBI;
use Term::ReadKey;

$user = $ENV{'USER'};
die "Username not defined" unless defined($user);

$loghistory = 1;
$verbose = 0;
@dblist = ();

while ($nextword = shift @ARGV) {
    $host = shift @ARGV if ($nextword eq '-host');

    $port = shift @ARGV if ($nextword eq '-port');

    $mysqluser = shift @ARGV if ($nextword eq '-user');

    $mysqlpass = shift @ARGV if ($nextword eq '-pass');

    $cmdfile = shift @ARGV if ($nextword eq '-cmdfile');

    if ($nextword eq '-databases') {
	while (@ARGV && ! ($ARGV[0] =~ /^-/)) {
	    push @dblist, shift @ARGV;
	}
    }

    $loghistory = 0 if ($nextword eq '-nohistory');

    $verbose = 1 if ($nextword eq '-verbose');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($host) &&
	defined($port) &&
	defined($user) &&
	defined($cmdfile) &&
	scalar(@dblist) > 0) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

die "Command file $cmdfile does not exist" unless -f $cmdfile;

die "Cannot open file $cmdfile for reading" unless open(CMDFILE, $cmdfile);

@commands= ();

undef $cmd;

while ($line = <CMDFILE>) {
    if ($line =~ /^\s*$/) {
	if (defined($cmd)) {
	    push @commands, $cmd;
	    undef $cmd;
	}
	next;
    }

    if (defined($cmd)) {
	$cmd .= $line;
    } else {
	$cmd = $line;
    }
}

push @commands, $cmd if defined($cmd);

close(CMDFILE);

print STDERR "Databases to modify: ", join(' ', @dblist), "\n";

print STDERR "Commands to execute:\n";

foreach $cmd (@commands) {
    print $cmd,"\n--------\n";
}

$dbname = $dblist[0];

$dsn = 'DBI:mysql:' . $dbname . ';host=' . $host . ';port=' . $port;

unless (defined($mysqlpass)) {
    print STDERR "Enter MySQL password for $mysqluser\n";
    ReadMode 'noecho';
    $mysqlpass = ReadLine 0;
    ReadMode 'normal';
    chop $mysqlpass;
}

$dbh = DBI->connect($dsn, $mysqluser, $mysqlpass,
		    {PrintError => 1, RaiseError => 1});

foreach $dbname (@dblist) {
    $query = "USE $dbname";
    print STDERR "Switching to database $dbname\n";
    print STDERR "\n$query\n" if $verbose;
    $dbh->do($query);
    &db_die("$query failed");
    print STDERR "\n" if $verbose;

    if ($loghistory) {
	$query = "INSERT INTO HISTORY(tablename, date, user, action, command)".
	    " VALUES(?, NOW(), '$user', ?, ?)";
	$sth = $dbh->prepare($query);
	&db_die("prepare($query) failed");
    }

    foreach $command (@commands) {
	print STDERR "\n$command\n";
	$dbh->do($command);
	&db_die("$command failed");

	($cmd, $tablename) = &parseTableName($command);

	if ($loghistory && defined($tablename) && defined($cmd)) {
	    $sth->execute($tablename, $cmd, $command);
	    &db_die("Update of HISTORY failed");
	}

	print STDERR "\n" if $verbose;
    }
}

$dbh->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -host\t\tHostname of server\n";
    print STDERR "    -port\t\tPort number of server\n";
    print STDERR "    -user\t\tMySQL username\n";
    print STDERR "    -cmdfile\t\tFile containing the commands to execute\n";
    print STDERR "\t\t\t(Commands must be separated by blank lines)\n";
    print STDERR "    -databases\t\tOne or more databases to be modified\n";
    print STDERR "\nOPTIONAL PARAMETERS:\n";
    print STDERR "    -pass\t\tMySQL password (you will be prompted for one if absent)\n";
    print STDERR "    -nohistory\t\tDo not log changes to the HISTORY table\n";
    print STDERR "    -verbose\t\tShow all MySQL statements\n";
}

sub parseTableName {
    my $command = shift;

    return undef unless defined($command);

    return (uc($1),$2) if ($command =~ /^\s*(create|alter|drop)\s+table\s+[\`]?(\w+)[\`]?/i);

    return ('UPDATE', $1) if ($command =~ /^\s*update\s+(\w+)\s+/i);

    return undef;
}
