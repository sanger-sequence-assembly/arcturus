#!/usr/local/bin/perl
#
# reads2zlib
#
# This script changes the compression of DNA sequences to Zlib

use DBI;
use Term::ReadKey;
use Compress;

$verbose = 0;
@dblist = ();

while ($nextword = shift @ARGV) {
    $host = shift @ARGV if ($nextword eq '-host');

    $port = shift @ARGV if ($nextword eq '-port');

    $mysqluser = shift @ARGV if ($nextword eq '-user');

    $mysqlpass = shift @ARGV if ($nextword eq '-pass');

    $limit = shift @ARGV if ($nextword eq '-limit');

    $onepass = 1 if ($nextword eq  '-onepass');

    if ($nextword eq '-databases') {
	while (@ARGV && ! ($ARGV[0] =~ /^-/)) {
	    push @dblist, shift @ARGV;
	}
    }

    $verbose = 1 if ($nextword eq '-verbose');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($host) &&
	defined($port) &&
	defined($mysqluser) &&
	scalar(@dblist) > 0) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

$dbname = $dblist[0];

$dsn = 'DBI:mysql:' . $dbname . ';host=' . $host . ';port=' . $port;

unless (defined($mysqlpass)) {
    print STDERR "Enter MySQL password for $mysqluser\n";
    ReadMode 'noecho';
    $mysqlpass = ReadLine 0;
    ReadMode 'normal';
    chop $mysqlpass;
}

$dbh = DBI->connect($dsn, $mysqluser, $mysqlpass,
		    {PrintError => 1, RaiseError => 1});

$compressor = new Compress('ACGT- ');

foreach $dbname (@dblist) {
    $query = "USE $dbname";
    print STDERR "Switching to database $dbname\n";
    print STDERR "\n$query\n" if $verbose;
    $dbh->do($query);
    &db_die("$query failed");
    print STDERR "\n" if $verbose;

    $query = "SELECT read_id,sequence,scompress FROM READS WHERE scompress != 99";
    $query .= " LIMIT $limit" if defined($limit);

    $sth = $dbh->prepare($query);
    &db_die("prepare($query) failed on $dsn");

    $sth->execute();
    &db_die("execute($query) failed on $dsn");

    $updatequery = "UPDATE READS SET scompress=99, sequence=? WHERE read_id=?";

    $update = $dbh->prepare($updatequery);
    &db_die("prepare($updatequery) failed on $dsn");
 
    $ndone = 0;
    $oldlen = 0;
    $newlen = 0;

    print STDERR "Compressing";
    print STDERR " and updating" if $onepass;
    print STDERR " ...\n";
    printf STDERR "%8d", $ndone;
    $format = "\010\010\010\010\010\010\010\010%8d";

    while(@ary = $sth->fetchrow_array()) {
	($readid, $sequence, $scompress) = @ary;

	$oldlen += length($sequence);

	$sequence = $compressor->sequenceDecoder($sequence, $scompress) if $scompress;

	$sequence = $compressor->sequenceEncoder($sequence, 99);

	if ($onepass) {
	    $update->execute($sequence, $readid);
	    &db_die("execute($updatequery) failed on $dsn for readid $readid");
	} else {
	    push @updates, [$readid, $sequence];
	}

	$newlen += length($sequence);

	$ndone++;
	printf STDERR $format, $ndone if (($ndone % 50) == 0);
    }

    $sth->finish();

    printf STDERR $format, $ndone;
    print STDERR " ... compressed";
    print STDERR " and updated" if $onepass;
    print STDERR "\n";

    unless ($onepass) {
	$ndone = 0;

	print STDERR "Updating ...\n";
	printf STDERR "%8d", $ndone;
	$format = "\010\010\010\010\010\010\010\010%8d";

	foreach $read (@updates) {
	    ($readid, $sequence) = @{$read};
	
	    $update->execute($sequence, $readid);
	    &db_die("execute($updatequery) failed on $dsn for readid $readid");

	    $ndone++;
	    printf STDERR $format, $ndone if (($ndone % 50) == 0);
	}

	printf STDERR $format, $ndone;
	print STDERR " ... updated.\n";
    }
	
    $update->finish();

    print STDERR "Total sequence length was $oldlen, now $newlen\n" if ($ndone > 0);
}

$dbh->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -host\t\tHostname of server\n";
    print STDERR "    -port\t\tPort number of server\n";
    print STDERR "    -user\t\tMySQL username\n";
    print STDERR "    -databases\t\tOne or more databases to be modified\n";
    print STDERR "\nOPTIONAL PARAMETERS:\n";
    print STDERR "    -pass\t\tMySQL password (you will be prompted for one if absent)\n";
    print STDERR "    -verbose\t\tShow all MySQL statements\n";
}
