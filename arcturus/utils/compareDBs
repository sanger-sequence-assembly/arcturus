#!/usr/local/bin/perl

use DBI;
use Digest::MD5 qw(md5_hex);
use Compress;

$compressor = new Compress('ACGT- ');

while ($nextword = shift @ARGV) {
    $dba = shift @ARGV if ($nextword eq '-dba');
    $dbb = shift @ARGV if ($nextword eq '-dbb');

    $dodna = 1 if ($nextword eq '-dodna');

    $doquality = 1 if ($nextword eq '-doquality');

    $limit = shift @ARGV if ($nextword eq '-limit');
}

$dodna = 0 unless defined($dodna);
$doquality = 0 unless defined($doquality);

die "You must supply -dba and -dbb parameters" unless (defined($dba) && defined($dbb));

die "You must specify at least one of -dodna or -doquality" unless ($dodna || $doquality);

($hosta,$porta,$dbnamea) = $dba =~ /(\w+):(\w+)\/(\w+)/;

die "-dba parameter is not in correct format"
    unless (defined($hosta) && defined($porta) && defined($dbnamea));

($hostb,$portb,$dbnameb) = $dbb =~ /(\w+):(\w+)\/(\w+)/;

die "-dbb parameter is not in correct format"
    unless (defined($hostb) && defined($portb) && defined($dbnameb));

$dsna = 'DBI:mysql:' . $dbnamea . ';host=' . $hosta . ';port=' . $porta;

$dbha = DBI->connect($dsna, 'arcturus', '***REMOVED***',
		     {PrintError => 0, RaiseError => 0});

&db_die("Unable to connect to $dsna") unless $dbha;

$dsnb = 'DBI:mysql:' . $dbnameb . ';host=' . $hostb . ';port=' . $portb;

$dbhb = DBI->connect($dsnb, 'arcturus', '***REMOVED***',
		     {PrintError => 0, RaiseError => 0});

&db_die("Unable to connect to $dsnb") unless $dbhb;

$dnaselect = $dodna ? ', sequence, scompress' : '';
$qualityselect = $doquality ? ', quality, qcompress' : '';

$lockquery = 'LOCK TABLES READS READ';

print STDERR "Trying to lock READS table on $dsna ...\n";

$dbha->do($lockquery);
&db_die("do($lockquery) failed on $dsna");

print STDERR "Trying to lock READS table on $dsnb ...\n";

$dbhb->do($lockquery);
&db_die("do($lockquery) failed on $dsnb");

$querya = "SELECT read_id, readname, slength $dnaselect $qualityselect from READS";

$querya .= " LIMIT $limit" if defined($limit);

print STDERR "Preparing \"$querya\" on $dsna ...\n";

$stha = $dbha->prepare($querya);
&db_die("prepare($querya) failed on $dsna");

$queryb = "SELECT readname, slength $dnaselect $qualityselect from READS where read_id=?";

print STDERR "Preparing \"$queryb\" on $dsnb ...\n";

$sthb = $dbhb->prepare($queryb);
&db_die("prepare($queryb) failed on $dsnb");

$nreads = 0;
printf STDERR "%8d", $nreads;
$format = "\010\010\010\010\010\010\010\010%8d";

$stha->execute();
&db_die("execute($querya) failed on $dsna");

while (@arya = $stha->fetchrow_array()) {
    $read_id = shift @arya;
    $readnamea = shift @arya;
    $slengtha = shift @arya;

    if ($dodna) {
	$seqa = shift @arya;
	$method = shift @arya;
	($slena, $seqa) = $compressor->sequenceDecoder($seqa, $method) if ($method > 0);
    }

    if ($doquality) {
	$quala = shift @arya;
	$method = shift @arya;
	($qlen, $quala) = $compressor->qualityDecoder($quala, $method) if ($method > 0);
	$quala =~ s/^\s+|\s+$//;
	$quala = pack("c*", split(/\s+/, $quala));
	$qualahash = md5_hex($quala);
    }

    $sthb->execute($read_id);

    while (@aryb = $sthb->fetchrow_array()) {
	$readnameb = shift @aryb;

	print "$read_id: readname mismatch: $readnamea vs $readnameb\n"
	    if ($readnamea ne $readnameb);

	$slengthb = shift @aryb;

	print "$read_id: slength mismatch: $slengtha vs $slengthb\n"
	    if ($slengtha != $slengthb);

	if ($dodna) {
	    $seqb = shift @aryb;
	    $method = shift @aryb;
	    ($slenb, $seqb) = $compressor->sequenceDecoder($seqb, $method) if ($method > 0);

	    print "$read_id: sequence mismatch\n" if ($seqa != $seqb);
	}

	if ($doquality) {
	    $qualb = shift @aryb;
	    $method = shift @aryb;
	    ($qlen, $qualb) = $compressor->qualityDecoder($qualb, $method) if ($method > 0);
	    $qualb =~ s/^\s+|\s+$//;
	    $qualb = pack("c*", split(/\s+/, $qualb));
	    $qualbhash = md5_hex($qualb);

	    print "$read_id: base quality mismatch\n" if ($qualahash ne $qualbhash);
	}
    }

    $nreads++;
    printf STDERR $format, $nreads if (($nreads % 50) == 0);
}

printf STDERR $format, $nreads;
print STDERR " reads found ... done.\n";

$stha->finish();
$sthb->finish();

$unlockquery = 'UNLOCK TABLES';

$dbha->do($unlockquery);
$dbhb->do($unlockquery);

$dbha->disconnect();
$dbhb->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}
