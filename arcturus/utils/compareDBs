#!/usr/local/bin/perl

use DBI;
use Digest::MD5 qw(md5_hex);

$dba = shift;

die "Usage: compareDBs host:port host:port dbname" unless $dba;

($hosta,$porta) = split(/:/, $dba);

die "Usage: compareDBs host:port host:port dbname" unless (defined($hosta) && defined($porta));

$dbb = shift;

die "Usage: compareDBs host:port host:port dbname" unless $dbb;

($hostb,$portb) = split(/:/, $dbb);

die "Usage: compareDBs host:port host:port dbname" unless (defined($hostb) && defined($portb));

$dbname = shift;

die "Usage: compareDBs host:port host:port dbname" unless $dbname;

$dsna = 'DBI:mysql:' . $dbname . ';host=' . $hosta . ';port=' . $porta;

$dbha = DBI->connect($dsna, 'arcturus', '***REMOVED***',
		     {PrintError => 0, RaiseError => 0});

&db_die("Unable to connect to $dsna") unless $dbha;

$dsnb = 'DBI:mysql:' . $dbname . ';host=' . $hostb . ';port=' . $portb;

$dbhb = DBI->connect($dsnb, 'arcturus', '***REMOVED***',
		     {PrintError => 0, RaiseError => 0});

&db_die("Unable to connect to $dsnb") unless $dbhb;

$lockquery = 'LOCK TABLES READS READ';

print STDERR "Trying to lock READS table on $dsna ...\n";

$dbha->do($lockquery);
&db_die("do($lockquery) failed on $dsna");

print STDERR "Trying to lock READS table on $dsnb ...\n";

$dbhb->do($lockquery);
&db_die("do($lockquery) failed on $dsnb");

$query = 'SELECT read_id, readname, slength, sequence from READS';

print STDERR "Executing $query on $dsna ...\n";

$stha = $dbha->prepare($query);
&db_die("prepare($query) failed on $dsna");

$stha->execute();
&db_die("execute($query) failed on $dsna");

while(@ary = $stha->fetchrow_array()) {
    ($read_id, $readname, $slength, $sequence) = @ary;
    $readida{$readname} = $read_id;
    $hasha{$readname} = md5_hex($sequence);
    $seqlena{$readname} = $slength;
}

$stha->finish();

$nra = scalar keys %seqlena;

print STDERR "Done. Found $nra reads.\n";

print STDERR "Executing $query on $dsnb ...\n";

$sthb = $dbhb->prepare($query);
&db_die("prepare($query) failed on $dsnb");

$sthb->execute();
&db_die("execute($query) failed on $dsnb");

while(@ary = $sthb->fetchrow_array()) {
    ($read_id, $readname, $slength, $sequence) = @ary;
    $readidb{$readname} = $read_id;
    $hashb{$readname} = md5_hex($sequence);
    $seqlenb{$readname} = $slength;
}

$sthb->finish();

$nrb = scalar keys %seqlenb;

print STDERR "Done. Found $nrb reads.\n";

foreach $readname (keys %seqlena) {
    $slenb = $seqlenb{$readname};
    if (defined($slenb)) {
	$slena = $seqlena{$readname};
	if ($slena != $slenb) {
	    print "$readname length mismatch $slena versus $slenb\n";
	}
	if ($hasha{$readname} ne $hashb{$readname}) {
	    print "$readname sequence hash mismatch\n";
	}
	if ($readida{$readname} != $readidb{$readname}) {
	    print "$readname ID mismatch: ",$readida{$readname}," ",$readidb{$readname},"\n";
	}
    } else {
	print "$readname in first DB but not in second\n";
    }
}

foreach $readname (keys %seqlenb) {
    if (!defined($seqlena{$readname})) {
  	print "$readname in second DB but not in first\n";
    }
}

$unlockquery = 'UNLOCK TABLES';

$dbha->do($unlockquery);
$dbhb->do($unlockquery);

$dbha->disconnect();
$dbhb->disconnect();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}
