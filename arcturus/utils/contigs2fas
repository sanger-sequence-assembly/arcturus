#!/usr/local/bin/perl
#
# contigs2fas
#
# This script extracts one or more contigs and generates a FASTA file

use DBI;
use Term::ReadKey;
use Compress::Zlib;
use FileHandle;

$verbose = 0;
@dblist = ();

while ($nextword = shift @ARGV) {
    $host = shift @ARGV if ($nextword eq '-host');

    $port = shift @ARGV if ($nextword eq '-port');

    $mysqluser = shift @ARGV if ($nextword eq '-user');

    $mysqlpass = shift @ARGV if ($nextword eq '-pass');

    $dbname = shift @ARGV if ($nextword eq '-database');

    $minlen = shift @ARGV if ($nextword eq '-minlen');

    $verbose = 1 if ($nextword eq '-verbose');

    $fastafile = shift @ARGV if ($nextword eq '-fasta');
    $qualfile = shift @ARGV if ($nextword eq '-quality');

    if ($nextword eq '-help') {
	&showUsage();
	exit(0);
    }
}

unless (defined($host) &&
	defined($port) &&
	defined($mysqluser) &&
	defined($dbname) &&
	defined($fastafile)) {
    print STDERR "One or more mandatory parameters are missing.\n\n";
    &showUsage();
    exit(1);
}

$fastafh = new FileHandle($fastafile, "w");

die "Unable to open FASTA file \"$fastafile\" for writing" unless $fastafh;

$qualfile = $fastafile . '.qual' unless defined($qualfile);

$qualityfh = new FileHandle($qualfile, "w");

die "Unable to open quality file \"$qualfile\" for writing" unless $qualityfh;

$dsn = 'DBI:mysql:' . $dbname . ';host=' . $host . ';port=' . $port;

unless (defined($mysqlpass)) {
    print STDERR "Enter MySQL password for $mysqluser\n";
    ReadMode 'noecho';
    $mysqlpass = ReadLine 0;
    ReadMode 'normal';
    chop $mysqlpass;
}

$dbh = DBI->connect($dsn, $mysqluser, $mysqlpass,
		    {PrintError => 1, RaiseError => 1});

$minlen = 1000 unless defined($minlen);

$query = "USE $dbname";
print STDERR "Switching to database $dbname\n";
$dbh->do($query);
&db_die("$query failed");

print STDERR "\n" if $verbose;

$query = "select CONTIGS.contig_id,CONTIGS.length,CONSENSUS.sequence,CONSENSUS.quality " .
    "from CONTIGS left join CONSENSUS using(contig_id) ".
    "where CONSENSUS.contig_id is not null and CONTIGS.length >= $minlen";

$sth = $dbh->prepare($query);
&db_die("prepare($query) failed");

$sth->execute();
&db_die("execute($query) failed");

while(@ary = $sth->fetchrow_array()) {
    ($contigid, $contiglength, $compressedsequence, $compressedquality) = @ary;

    $sequence = uncompress($compressedsequence);
    $qualitydata = uncompress($compressedquality);    
    @quality = unpack("c*", $qualitydata);

    if ($contiglength != length($sequence)) {
	print STDERR "Sequence length mismatch for contig $contigid: $contiglength vs ",
	length($sequence),"\n";
    }

    # Convert pads to N ...
    $sequence =~ s/[^\w\-]/N/g;

    printf $fastafh ">CONTIG%04d\n", $contigid;

    while (length($sequence) > 0) {
	print $fastafh substr($sequence, 0, 50), "\n";
	$sequence = substr($sequence, 50);
    }

    if ($contiglength != scalar(@quality)) {
	print STDERR "Quality length mismatch for contig $contigid: $contiglength vs ",
	scalar(@quality),"\n";
    }

    printf $qualityfh ">CONTIG%04d\n", $contigid;

    $nq = 0;

    while ($qvalue = shift @quality) {
	printf $qualityfh " %2d", $qvalue;
	$nq++;
	print $qualityfh "\n" if (($nq % 25) == 0);
    }

    print $qualityfh "\n";
}

$sth->finish();

$dbh->disconnect();

$fastafh->close();
$qualityfh->close();

exit(0);

sub db_die {
    my $msg = shift;
    return unless $DBI::err;
    print STDERR "MySQL error: $msg $DBI::err ($DBI::errstr)\n\n";
    exit(0);
}

sub showUsage {
    print STDERR "MANDATORY PARAMETERS:\n";
    print STDERR "    -host\t\tHostname of server\n";
    print STDERR "    -port\t\tPort number of server\n";
    print STDERR "    -user\t\tMySQL username\n";
    print STDERR "    -database\t\tDatabase for reads\n";
    print STDERR "    -fasta\t\tName of output FASTA file\n";
    print STDERR "\n";
    print STDERR "OPTIONAL PARAMETERS:\n";
    print STDERR "    -minlen\t\tMinimum length for contigs [default: 1000]\n";
    print STDERR "    -quality\t\tName of output quality file\n";
    print STDERR "    -depad\t\tRemove pad characters from sequence\n";
    print STDERR "    -padton\t\tConvert pads to N\n";
}
