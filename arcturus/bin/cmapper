#!/usr/local/bin/perl -w

#############################################################################
# Upload Contigs into ARCTURUS database
#############################################################################

use strict; # Constraint variables declaration before using them

use DBI; # Perl DB Interface module
use ConfigReader::MyCgi;   
use ConfigReader::Simpleton; # Module for managing configuration information
use Scripts::MyHTML;
use TableReader::DbaseTable;
use TableReader::ArcturusTable;
use TableReader::ReadsReader;
use TableReader::ContigBuilder;
use TableReader::ReadMapper;
# use TableReader::ReadsReader;

# use Compress::Compress;

##############################################################################
# unbuffered output
##############################################################################

open(STDERR,">&STDOUT") || die "Can't dump to STDOUT: $!\n";
select(STDERR); $| = 1; # Make unbuffered.
select(STDOUT); $| = 1; # Make unbuffered.

# print "content-type: text/html\n\n";

##############################################################################
# Loading Configuration Parameters
##############################################################################

# Get configuration parameters using Configuration File ".arc_common.cnf"

my $CONFIG_DIR = '/nfs/team81/ejz/arcturus/scripts/ConfigReader';
my $config = ConfigReader::Simpleton->new ("$CONFIG_DIR/.arc_common.cnf") ||
            die "No such file or directory: $CONFIG_DIR/.arc_common.cnf";
$config->parse ();

##############################################################################
# how is this script invoked?
##############################################################################

my $origin = 1; # default CGI
$origin = 0 if (!$ENV{PATH_INFO}); # from command line
my @brtag = ('\n','<br>'); 

##############################################################################
# open MySQL Reads Database
##############################################################################

my $driver      = $config->get("db_driver");
my $db_name     = $config->get("mysql_database");
my $host        = $config->get("mysql_hostname");
my $username    = $config->get("mysql_username");
my $password    = $config->get("mysql_password");

my $USERSUPPORT = $config->get("USERSUPPORT");
my $db_manager  = $config->get("db_manager");      

# check whether this driver is available

my @drivers = DBI->available_drivers;
#print "\nDrivers : @drivers\n\n";

my $lg = @drivers + 0;
my $i = 0;
while (($i < $lg) && ($driver ne $drivers[$i])) {
  $i ++;
}
if ($i >= $lg) {
  print STDERR "Driver syntax incorrect or Driver, $driver,  non available - install it before ...\n";
  exit 1;
}

# data source name

my $dsn = "DBI:".$driver.":".$db_name.":".$host;

print "\n\nHERE WE GO (dsn: $dsn)\n\n" if !$origin;

print "Trying to open database $db_name ..." if !$origin;
my $dbh = DBI->connect($dsn, $username, $password, {RaiseError => 1 }) 
        or die "! Failed to access $db_name again: $DBI::errstr";
print "... DONE\n\n" if !$origin;

##############################################################################
# Some local parameters and variables
##############################################################################

my %config;
$config{CDD} = $config->get('ROOTDIR');  # root data dir for caf files
$config{CFN} = 'MAL<m>.<n>.caf';         # name of individual caf file
$config{CNF} = '';                       # name filter
$config{CGN} = '';                       # generation number
$config{CPR} = 1000;                     # default maximum nr. contigs to load

my $arc_cgi_dir  = $config->get('ARC_CGI_DIR');
my $arc_log_dir  = $config->get('ARC_LOG_DIR');

$config{CLF} = "$arc_log_dir/cloader.DATABASE.log"; # default logfile

my ($userid, $database, $caffile, $cgi, $page);
my ($left, $list, $exactmatch, $limit);
my ($TEST, $logON, $reload, $update);
my ($CDD, $CFN, $CNF, $CGN, $CPR, $CLF);
my ($assembly, $assemblyname, $assemblynmbr);
my ($projects, $projectname, $projectnmbr);

my $return    = "$arc_cgi_dir/update/arcturus/getmenu";

my ($brtag, $gfont, $yfont, $ofont, $rfont, $efont);

###############################################################################

my $organisms = TableReader::ArcturusTable->new($dbh,'ORGANISMS','arcturus',1);
my $users = $organisms->new($dbh,'USERS','arcturus',1);

if (!$origin) {
    $brtag = "\n";
###############################################################################
# test user
###############################################################################
    $userid = $ENV{USER};
    if ($userid ne 'ejz' && $userid ne 'adh') {
# test against the priviledges for this user
        die "User $userid does not have priviledge to run 'cmapper' from".
            "the command line.\nTry the web-based version";
    }
###############################################################################
# Test command line parameters
###############################################################################
# input: ARGV[0]: database name

    if (@ARGV < 1) {
        print STDERR "! specify a database [TEST]\n";
        $dbh->disconnect;
        exit 1;
    }

# get file name filter and global (directory) filter 

    $database = $ARGV[0];
    my $onumber = $organisms->associate('number',$database,'dbasename');
    die "Organism database $database does not exist\n" if !$onumber;

    $TEST = $ARGV[1];
    $TEST = 1 if !defined($TEST); # default

    $limit = $ARGV[2];
    $limit = 10 if !defined($limit);
}

else {
# invoked as CGI scripts
    die 'Not yet prepared for CGI version';
    $brtag = "<br>";
    $gfont = "<FONT COLOR=lightgreen>";
    $yfont = "<FONT COLOR=yellow>";
    $ofont = "<FONT COLOR=orange>";
    $rfont = "<FONT COLOR=red>";
    $efont = "</FONT>";

   (my $void,$database,my $option) = split ('/',$ENV{PATH_INFO});

    $cgi = ConfigReader::MyCgi->new(); # parse CGI
    $cgi->PrintHeader(1); # print the magic words 

    $option = 'process' if ($option eq 'specify' && $cgi->parameter('process',0));

    $page = Scripts::MyHTML->new('ARCTURUS CONTIGs loader');    
    $page->address('ejz@sanger.ac.uk','Ed Zuiderwijk',2);
    $page->frameborder(100,15,'white',10);
    $page->center(1);

    undef my $error;
    if ($option eq 'getform') {
# 
        $page->form("$arc_cgi_dir/cloader/arcturus/specify");
        $page->partition(2);
        $page->sectionheader("ARCTURUS assembly database: CONTIGs loader specifications",3,0);
        $page->partition(1);
        my $count = $organisms->count();
        $page->sectionheader("There are $count Organism databases",3,0);
        $page->add($organisms->htmlTable('0110000011100000')); # list them
        my $select =  $organisms->htmlOptions('dbasename','database',20);
        $page->sectionheader("Select a Database : $select",4,0);
        $page->sectionheader("Provide your User Identification and Submit",4,0);
        $page->identify('10',8,1);
        $page->partition(5);
        $page->center(1);
        $page->submitbuttonbar("$arc_cgi_dir/update/arcturus/getmenu",0,0,'MAIN MENU');
        $page->form(0);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }

    elsif ($option eq 'specify') {
# list all assemblies
        $database  = $cgi->parameter('database'); # compulsory
        my $userid = $cgi->parameter('identify'); # compulsory
        my $passwd = $cgi->parameter('password'); # compulsory
        my $asname = $cgi->parameter('assemblyname',0); # no test
        $asname = 0 if !$asname; # to have it explicitly defined

        $page->form("$arc_cgi_dir/cloader/arcturus/specify");
        $page->partition(2);
        $page->sectionheader("ARCTURUS assembly database '$database': CONTIGs loader specifications",3,0);
        $page->partition(1);

        if ($cgi->{und_error} || !$database) {
            $page->errorbox("Please define all form entries");
            $page->add($cgi->PrintVariables());
        }
        else {
    # open assembly database; abort if no assemblies defined
            $assembly  = TableReader::ArcturusTable->new($dbh,'ASSEMBLY',$database,1);
            if ($assembly && $assembly->count() > 0) {
            # get the default assembly name if no assemblyname in CGI input; first try attributes
                my $attributes = $organisms->unpackAttributes($database,'dbasename');
                $asname = $attributes->{anlast} if (!$asname && $attributes->{anlast});
            # if still undefined, just take the first one
                $asname = $assembly->{hashrefs}->[0]->{assemblyname} if (!$asname);
            # substitute (possible) database placeholder
                $config{CLF} =~ s/DATABASE/$database/; # log file
            # overwrite the preset configuration data with those in ORGANISM attributes if any
                foreach my $key (keys %config) {
                    $config{$key} = $attributes->{$key} if defined($attributes->{$key});
# print "ORGANISM attribute $key  = $config{$key}<br>" if defined($attributes->{$key});
                }
            # overwrite the preset configuration data with those in ASSEMBLY attributes if any
                $attributes = $assembly->unpackAttributes($asname,'assemblyname');
                foreach my $key (keys %config) {
                    $config{$key} = $attributes->{$key} if defined($attributes->{$key});
# print "ASSEMBLY attribute $key  = $config{$key}<br>" if defined($attributes->{$key});
                }
            # update the caf file name if it contains a place holder
                $config{CFN} =~ s/^\S+?(\<m\>|\d+)/$asname/;
            # open the form and replace the placeholders
                my $form = form();
                $form =~ s/DATABASE/$database/g;
            # build the select list and add to form
                my $selectlist = $assembly->htmlOptions('assemblyname','assemblyname',100,0,$asname);
                $form =~ s/SELECTTAG/$selectlist/ if ($selectlist); # substitute the HTML selectlist
                $page->add($form,0,1); # add the form to the page and preload
            # preload the remaining placeholders with data in %config 
                foreach my $key (keys %config) {
                    $page->preload($key,$config{$key},1) if defined($config{$key});
                }
            # but overwrite with values in CGI input 
                $page->preload('cgi_input',$cgi,1);
            # and add hidden fields  
                $page->ingestCGI($cgi);

            # add a three-way button bar and a return link 

                my $text = "Repeat to update this form for a newly chosen assembly, or<br>";
                $text   .= "Continue to start loading CONTIGS with these specified values, or<br>";
                $text   .= "Click on the return link to the main UPDATE menu<br>";
                $page->sectionheader($text,4,0);
                my @buttons = ('type=submit value=" Repeat "',
                               'type=submit value="Continue" name="process"',
                               'type=reset  value=" Reset "');
                $page->buttonbartemplate(3,0,\@buttons);                 
                $page->linkbutton('RETURN',$return,0);
            }
            else {
                $page->errorbox("There are no assemblies defined for $database",0,0,'yellow');
                $page->messagebox("Please contact $db_manager or your project manager",$return);
            }
        }
    # close form
        $page->form(0);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }

    elsif ($option eq 'process') {
    # get assembly 
        $database = $cgi->parameter('database'); # redefine database
        $assembly = $organisms->new($dbh,'ASSEMBLY',$database,1);
        $assemblyname = $cgi->parameter('assemblyname'); # translate into number
        $assemblynmbr = $assembly->associate('assembly',$assemblyname,'assemblyname');

        $projects = $organisms->new($dbh,"PROJECTS",$database,1);

        $CPR = $cgi->parameter('CPR');
    # test mode
        $TEST   = 1 if $cgi->parameter('testrun',0);
        $logON  = 1 if $cgi->parameter('logON'  ,0);
        $reload = 1 if $cgi->parameter('reload' ,0);
        $update = 1 if $cgi->parameter('update', 0);
    # identity check
        $userid = $cgi->parameter('identify');
        my $passwd = $cgi->parameter('password');
      
        if ($cgi->{und_error}) {
            $error = "Please define every input field $cgi->{und_error} ";
        }
        elsif (my $users = $organisms->new($dbh,'USERS','arcturus',1)) {
    # authorisation level 100 required (temp)
            if (my $status = $users->authorize($userid,$passwd,100)) {
                $error = $status; # authorisation failed
            }
    # okay, now get specifications
            else {
                $CDD = $cgi->parameter('CDD');
                $CFN = $cgi->parameter('CFN');
                $CNF = $cgi->parameter('CNF');
                $CGN = $cgi->parameter('CGN');
                $CPR = $cgi->parameter('CPR');
                $CLF = $cgi->parameter('CLF');
            }
#            $arc_logfile = $cgi->parameter('LGF') if ($logON);
        }
        else {
            $error = "Can't access the USERS table in ARCTURUS database";
        }
    }
    else {
        $error = "Invalid option $option for cloader";
    }

# abort on any error, else continue with the main script

    if ($error) {
        $page->partition(2);
        $page->sectionheader("ARCTURUS CONTIGs loader specifications",3,0);
        $page->partition(1);
        $page->sectionheader("Sorry, an error status aborts this loader session",3,1);
        $page->errorbox($error,$return);
        $page->flush();
        $dbh->disconnect;
        exit 0;
    }
#    $page->add($cgi->PrintVariables());
}

###############################################################################
# open all database tables required
###############################################################################

#    my $dbreads  = $organisms->new($dbh,"READS",$database,0);
#    my $rrtoaa   = $organisms->new($dbh,"READS2ASSEMBLY",$database,0);
#    my $contigs  = $organisms->new($dbh,"CONTIGS",$database,0);
#    my $cctocc   = $organisms->new($dbh,"CONTIGS2CONTIG",$database,0);
    my $rrtocc   = $organisms->new($dbh,"READS2CONTIG",$database,0);
    my $cctopp   = $organisms->new($dbh,"CONTIGS2SCAFFOLD",$database,0);
#    my $pptoaa   = $organisms->new($dbh,"PROJECTS2ASSEMBLY",$database,0);
    my $cltocc   = $organisms->new($dbh,"CLONES2CONTIG",$database,0);
    my $cltopp   = $organisms->new($dbh,"CLONES2PROJECT",$database,0);

    my $query = "use $database";
    $organisms->query($query,0,0);

###############################################################################
#           2 Scan CONTIGS, READS, READS2CONTIG to get a) CLONES2CONTIG
#                                                      b) CLONES2PROJECT
###############################################################################
# Scan the READS2CONTIG table and test completeness and presence of all records
###############################################################################

    print "Scanning database $database for incomplete Reads-Contig maps ...";

# create a temporary table R2C of read_id's with completed mapping 

    my $create = "CREATE TABLE R2C (read_id mediumint unsigned not null)";
    $rrtocc->query($create,0,0);
    my $insert = "INSERT INTO R2C (read_id) SELECT read_id FROM READS2CONTIG WHERE label > 9"; 
    $rrtocc->query($insert,0,0);

# get a list of read_id's from READS2CONTIG which do not already figure in R2C

    $query  = "SELECT distinct READS2CONTIG.read_id from READS2CONTIG left join R2C ";
    $query .= "on READS2CONTIG.read_id = R2C.read_id where ";
    $query .= "R2C.read_id is NULL limit $limit"; 
    my $readids = $rrtocc->query($query,0,0);

# drop the temporary table

    $rrtocc->query('DROP TABLE R2C',0,0);

# and analyse the data

    undef my @dbreads;
    if (ref($readids) =~ /ARRAY/) {
        foreach my $readhash (@$readids) {
            my $read = $readhash->{read_id};
            push @dbreads, $read if $read;
        }
        undef @$readids; # free memory 
    }
    my $nrr = @dbreads;
    print "... DONE$brtag$nrr incomplete read maps found$brtag$brtag";
    print "! $rrtocc->{qerror}$brtag" if !$readids;
    print "Reads: @dbreads \n";

# okay, now complete the mappings

    foreach my $readid (@dbreads) {
# get all the reads
        my $hashrefs = $rrtocc->associate('hashrefs',$readid,'read_id',-1);
    # first get the contigs involved
        undef my $contig;
        undef my %contigs;
        if ($hashrefs && @$hashrefs > 0) {
            foreach my $hash (@$hashrefs) {
                $contig = $hash->{contig_id};
                my $deprecated = $hash->{deprecated};
                push @{$contigs{$contig}},$hash if ($deprecated eq 'N');
            }
        }
        my $nrc = keys %contigs;
        print "\n$nrc contig(s) found for mappings of read $readid\n";
        foreach $contig (keys %contigs) {
            $nrr = @{$contigs{$contig}};
            print "$nrr records found for read_id: $readid  mapped on contig $contig\n";
            if ($nrr > 1) {
	        my ($orientation, $clone, $error);
                foreach my $hash (@{$contigs{$contig}}) {
                    my $alignment = $hash->{pcfinal} - $hash->{pcstart};
                    $orientation = $alignment if !$orientation;
                    if (!$alignment) {
                        print "single codon block in  read_id=$readid\n";
                    }
                    elsif ($alignment*$orientation < 0) {
                        print "alignment error for read_id=$readid\n";
                        $error++;
                    }
                    $contig = $hash->{contig_id} if !$contig;
                    $clone  = $hash->{clone}     if !$clone;
                    if ($contig != $hash->{contig_id}) {
                        print "Contig mismatch for read_id $readid (contig $contig $hash->{contig_id})\n";
                        $error++;
                    }
                    if ($clone != $hash->{clone}) {
                        print "Clone  mismatch for read_id $readid (clone  $clone  $hash->{clone})\n";
                        $error++;
                    }
                }
            # test error
                if (!$error && $orientation) {
                    my $error;
                    undef my ($pcstart, $pcfinal, $prstart, $prfinal);
                    foreach my $hash (@{$contigs{$contig}}) {
                   # foreach my $hash (@$hashrefs) {
                        if ($orientation > 0) {            
                            $pcstart = $hash->{pcstart} if (!$pcstart || $hash->{pcstart} < $pcstart);
                            $pcfinal = $hash->{pcfinal} if (!$pcfinal || $hash->{pcfinal} > $pcfinal);
                        }
                        else {
                            $pcstart = $hash->{pcstart} if (!$pcstart || $hash->{pcstart} > $pcstart);
                            $pcfinal = $hash->{pcfinal} if (!$pcfinal || $hash->{pcfinal} < $pcfinal);
                        }
                        $prstart = $hash->{prstart} if (!$prstart || $hash->{prstart} < $prstart);
                        $prfinal = $hash->{prfinal} if (!$prfinal || $hash->{prfinal} > $prfinal);
                    }
                    my $label=20;
                    $label++ if ($orientation < 0);
                # insert the summarizing record into the table 
                # first assigning value X to 'deprecated', then replace by N
                    print "new record with label $label for read_id=$readid\n" if $label;
                    print "$contig, $pcstart, $pcfinal, $readid $prstart, $prfinal, $clone $label\n";
                    my $crange = abs($pcfinal-$pcstart); 
                    my $rrange = abs($prfinal-$prstart);
                    if (abs($crange-$rrange) > 10) {
                        print "strange values for ranges: reads=$rrange contig=$crange\n\n";
                        foreach my $hash (@$hashrefs) {
                            print "$hash->{contig_id} $hash->{pcstart} $hash->{pcfinal} ";
                            print "$hash->{read_id} $hash->{prstart} $hash->{prfinal} $hash->{label}\n";
                        }                   
                 #       print "\n";
                    } 
                    elsif (!$TEST && !$rrtocc->newrow('read_id',$readid,'deprecated','X')) {
                        $error .= "! Failed to add alignment of $readid to contig";
                        $error .= " $contig to READS2CONTIG\n";
                    } 
                    elsif (!$TEST) {
             # (will select only the lastly entered record for updates)
                        $rrtocc->update('contig_id',$contig);
                        $rrtocc->update('prstart',$prstart);
                        $rrtocc->update('prfinal',$prfinal);
                        $rrtocc->update('pcstart',$pcstart);
                        $rrtocc->update('pcfinal',$pcfinal);
                        $rrtocc->update('clone',$clone);
                        $rrtocc->update('label',$label);
 #                       $rrtocc->update('deprecated','N');
                    }               
                }
	        else {
                    print "alignment update of read_id $readid skipped\n";
                }
            }
            elsif ($nrr == 1) {
                print "Only one record found for read_id: $readid\n";
                my $hashref = @$hashrefs[0];
                my $rrange = $hashref->{prfinal} - $hashref->{prstart};
                my $crange = $hashref->{pcfinal} - $hashref->{pcstart};
                my $label = 10;
                if ($rrange == -$crange) {
                    $label++;
                }
                elsif ($rrange != $crange) {
                   print "MAPPING error detected: rrange=$rrange, crange=$crange\n";
                   $label = 0;
                }
                my $where = "contig_id=$contig and read_id=$readid and deprecated='N'";
                print "label $label to be set for read=$readid & contig=$contig\n" if $label;
                $rrtocc->update('label',$label,'where',$where) if ($label && !$TEST);
            }
            else {
                print "Something wrong: no match for read_id: $readid\n";
	    }
        }
    }
    
    

##############################################################################
# closing down
##############################################################################

print STDOUT "${brtag}Time stamping modified tables$brtag";
if ($organisms->historyUpdate($userid)) { # history update 
print "SIGNATURE on ORGANISMS for $database\n";
    $organisms->signature($userid,'dbasename',$database);
}
print STDOUT "${brtag}Closing database$brtag$brtag";
$dbh->disconnect;
exit 0;


##############################################################################
# subroutines
##############################################################################

sub form {
    my $source = shift;

    my $form;

    $form  = "<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=2 WIDTH 100%>";
    $form .= "</TABLE>";

    return $form;
}

